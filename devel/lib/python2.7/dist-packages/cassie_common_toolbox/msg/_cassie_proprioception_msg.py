# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cassie_common_toolbox/cassie_proprioception_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class cassie_proprioception_msg(genpy.Message):
  _md5sum = "3be1623c7974da649675ad63828eb904"
  _type = "cassie_common_toolbox/cassie_proprioception_msg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                   header
float64[16]              radio
float64[10]              motor_torque
float64[14]              encoder_position
float64[14]              encoder_velocity
geometry_msgs/Quaternion orientation
geometry_msgs/Vector3    angular_velocity
geometry_msgs/Vector3    linear_velocity
geometry_msgs/Vector3    linear_acceleration
float64[2]               q_achilles
float64[2]               dq_achilles
float64[2]               contact
bool                     isCalibrated


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','radio','motor_torque','encoder_position','encoder_velocity','orientation','angular_velocity','linear_velocity','linear_acceleration','q_achilles','dq_achilles','contact','isCalibrated']
  _slot_types = ['std_msgs/Header','float64[16]','float64[10]','float64[14]','float64[14]','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64[2]','float64[2]','float64[2]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,radio,motor_torque,encoder_position,encoder_velocity,orientation,angular_velocity,linear_velocity,linear_acceleration,q_achilles,dq_achilles,contact,isCalibrated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cassie_proprioception_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.radio is None:
        self.radio = [0.] * 16
      if self.motor_torque is None:
        self.motor_torque = [0.] * 10
      if self.encoder_position is None:
        self.encoder_position = [0.] * 14
      if self.encoder_velocity is None:
        self.encoder_velocity = [0.] * 14
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      if self.linear_velocity is None:
        self.linear_velocity = geometry_msgs.msg.Vector3()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.q_achilles is None:
        self.q_achilles = [0.] * 2
      if self.dq_achilles is None:
        self.dq_achilles = [0.] * 2
      if self.contact is None:
        self.contact = [0.] * 2
      if self.isCalibrated is None:
        self.isCalibrated = False
    else:
      self.header = std_msgs.msg.Header()
      self.radio = [0.] * 16
      self.motor_torque = [0.] * 10
      self.encoder_position = [0.] * 14
      self.encoder_velocity = [0.] * 14
      self.orientation = geometry_msgs.msg.Quaternion()
      self.angular_velocity = geometry_msgs.msg.Vector3()
      self.linear_velocity = geometry_msgs.msg.Vector3()
      self.linear_acceleration = geometry_msgs.msg.Vector3()
      self.q_achilles = [0.] * 2
      self.dq_achilles = [0.] * 2
      self.contact = [0.] * 2
      self.isCalibrated = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_16d().pack(*self.radio))
      buff.write(_get_struct_10d().pack(*self.motor_torque))
      buff.write(_get_struct_14d().pack(*self.encoder_position))
      buff.write(_get_struct_14d().pack(*self.encoder_velocity))
      _x = self
      buff.write(_get_struct_13d().pack(_x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      buff.write(_get_struct_2d().pack(*self.q_achilles))
      buff.write(_get_struct_2d().pack(*self.dq_achilles))
      buff.write(_get_struct_2d().pack(*self.contact))
      _x = self.isCalibrated
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      if self.linear_velocity is None:
        self.linear_velocity = geometry_msgs.msg.Vector3()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 128
      self.radio = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 80
      self.motor_torque = _get_struct_10d().unpack(str[start:end])
      start = end
      end += 112
      self.encoder_position = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 112
      self.encoder_velocity = _get_struct_14d().unpack(str[start:end])
      _x = self
      start = end
      end += 104
      (_x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_13d().unpack(str[start:end])
      start = end
      end += 16
      self.q_achilles = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.dq_achilles = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 16
      self.contact = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 1
      (self.isCalibrated,) = _get_struct_B().unpack(str[start:end])
      self.isCalibrated = bool(self.isCalibrated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.radio.tostring())
      buff.write(self.motor_torque.tostring())
      buff.write(self.encoder_position.tostring())
      buff.write(self.encoder_velocity.tostring())
      _x = self
      buff.write(_get_struct_13d().pack(_x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z))
      buff.write(self.q_achilles.tostring())
      buff.write(self.dq_achilles.tostring())
      buff.write(self.contact.tostring())
      _x = self.isCalibrated
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      if self.angular_velocity is None:
        self.angular_velocity = geometry_msgs.msg.Vector3()
      if self.linear_velocity is None:
        self.linear_velocity = geometry_msgs.msg.Vector3()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 128
      self.radio = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=16)
      start = end
      end += 80
      self.motor_torque = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=10)
      start = end
      end += 112
      self.encoder_position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=14)
      start = end
      end += 112
      self.encoder_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=14)
      _x = self
      start = end
      end += 104
      (_x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w, _x.angular_velocity.x, _x.angular_velocity.y, _x.angular_velocity.z, _x.linear_velocity.x, _x.linear_velocity.y, _x.linear_velocity.z, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z,) = _get_struct_13d().unpack(str[start:end])
      start = end
      end += 16
      self.q_achilles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.dq_achilles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 16
      self.contact = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 1
      (self.isCalibrated,) = _get_struct_B().unpack(str[start:end])
      self.isCalibrated = bool(self.isCalibrated)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
