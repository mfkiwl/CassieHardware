// Generated by gencpp from file cassie_common_toolbox/cassie_proprioception_msg.msg
// DO NOT EDIT!


#ifndef CASSIE_COMMON_TOOLBOX_MESSAGE_CASSIE_PROPRIOCEPTION_MSG_H
#define CASSIE_COMMON_TOOLBOX_MESSAGE_CASSIE_PROPRIOCEPTION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cassie_common_toolbox
{
template <class ContainerAllocator>
struct cassie_proprioception_msg_
{
  typedef cassie_proprioception_msg_<ContainerAllocator> Type;

  cassie_proprioception_msg_()
    : header()
    , radio()
    , motor_torque()
    , encoder_position()
    , encoder_velocity()
    , orientation()
    , angular_velocity()
    , linear_velocity()
    , linear_acceleration()
    , q_achilles()
    , dq_achilles()
    , contact()
    , isCalibrated(false)  {
      radio.assign(0.0);

      motor_torque.assign(0.0);

      encoder_position.assign(0.0);

      encoder_velocity.assign(0.0);

      q_achilles.assign(0.0);

      dq_achilles.assign(0.0);

      contact.assign(0.0);
  }
  cassie_proprioception_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , radio()
    , motor_torque()
    , encoder_position()
    , encoder_velocity()
    , orientation(_alloc)
    , angular_velocity(_alloc)
    , linear_velocity(_alloc)
    , linear_acceleration(_alloc)
    , q_achilles()
    , dq_achilles()
    , contact()
    , isCalibrated(false)  {
  (void)_alloc;
      radio.assign(0.0);

      motor_torque.assign(0.0);

      encoder_position.assign(0.0);

      encoder_velocity.assign(0.0);

      q_achilles.assign(0.0);

      dq_achilles.assign(0.0);

      contact.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 16>  _radio_type;
  _radio_type radio;

   typedef boost::array<double, 10>  _motor_torque_type;
  _motor_torque_type motor_torque;

   typedef boost::array<double, 14>  _encoder_position_type;
  _encoder_position_type encoder_position;

   typedef boost::array<double, 14>  _encoder_velocity_type;
  _encoder_velocity_type encoder_velocity;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<double, 2>  _q_achilles_type;
  _q_achilles_type q_achilles;

   typedef boost::array<double, 2>  _dq_achilles_type;
  _dq_achilles_type dq_achilles;

   typedef boost::array<double, 2>  _contact_type;
  _contact_type contact;

   typedef uint8_t _isCalibrated_type;
  _isCalibrated_type isCalibrated;





  typedef boost::shared_ptr< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> const> ConstPtr;

}; // struct cassie_proprioception_msg_

typedef ::cassie_common_toolbox::cassie_proprioception_msg_<std::allocator<void> > cassie_proprioception_msg;

typedef boost::shared_ptr< ::cassie_common_toolbox::cassie_proprioception_msg > cassie_proprioception_msgPtr;
typedef boost::shared_ptr< ::cassie_common_toolbox::cassie_proprioception_msg const> cassie_proprioception_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator1> & lhs, const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.radio == rhs.radio &&
    lhs.motor_torque == rhs.motor_torque &&
    lhs.encoder_position == rhs.encoder_position &&
    lhs.encoder_velocity == rhs.encoder_velocity &&
    lhs.orientation == rhs.orientation &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.q_achilles == rhs.q_achilles &&
    lhs.dq_achilles == rhs.dq_achilles &&
    lhs.contact == rhs.contact &&
    lhs.isCalibrated == rhs.isCalibrated;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator1> & lhs, const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cassie_common_toolbox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3be1623c7974da649675ad63828eb904";
  }

  static const char* value(const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3be1623c7974da64ULL;
  static const uint64_t static_value2 = 0x9675ad63828eb904ULL;
};

template<class ContainerAllocator>
struct DataType< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cassie_common_toolbox/cassie_proprioception_msg";
  }

  static const char* value(const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                   header\n"
"float64[16]              radio\n"
"float64[10]              motor_torque\n"
"float64[14]              encoder_position\n"
"float64[14]              encoder_velocity\n"
"geometry_msgs/Quaternion orientation\n"
"geometry_msgs/Vector3    angular_velocity\n"
"geometry_msgs/Vector3    linear_velocity\n"
"geometry_msgs/Vector3    linear_acceleration\n"
"float64[2]               q_achilles\n"
"float64[2]               dq_achilles\n"
"float64[2]               contact\n"
"bool                     isCalibrated\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.radio);
      stream.next(m.motor_torque);
      stream.next(m.encoder_position);
      stream.next(m.encoder_velocity);
      stream.next(m.orientation);
      stream.next(m.angular_velocity);
      stream.next(m.linear_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.q_achilles);
      stream.next(m.dq_achilles);
      stream.next(m.contact);
      stream.next(m.isCalibrated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cassie_proprioception_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cassie_common_toolbox::cassie_proprioception_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "radio[]" << std::endl;
    for (size_t i = 0; i < v.radio.size(); ++i)
    {
      s << indent << "  radio[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radio[i]);
    }
    s << indent << "motor_torque[]" << std::endl;
    for (size_t i = 0; i < v.motor_torque.size(); ++i)
    {
      s << indent << "  motor_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_torque[i]);
    }
    s << indent << "encoder_position[]" << std::endl;
    for (size_t i = 0; i < v.encoder_position.size(); ++i)
    {
      s << indent << "  encoder_position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.encoder_position[i]);
    }
    s << indent << "encoder_velocity[]" << std::endl;
    for (size_t i = 0; i < v.encoder_velocity.size(); ++i)
    {
      s << indent << "  encoder_velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.encoder_velocity[i]);
    }
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "q_achilles[]" << std::endl;
    for (size_t i = 0; i < v.q_achilles.size(); ++i)
    {
      s << indent << "  q_achilles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_achilles[i]);
    }
    s << indent << "dq_achilles[]" << std::endl;
    for (size_t i = 0; i < v.dq_achilles.size(); ++i)
    {
      s << indent << "  dq_achilles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dq_achilles[i]);
    }
    s << indent << "contact[]" << std::endl;
    for (size_t i = 0; i < v.contact.size(); ++i)
    {
      s << indent << "  contact[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.contact[i]);
    }
    s << indent << "isCalibrated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCalibrated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CASSIE_COMMON_TOOLBOX_MESSAGE_CASSIE_PROPRIOCEPTION_MSG_H
