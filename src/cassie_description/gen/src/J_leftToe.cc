/*
 * Automatically Generated from Mathematica.
 * Mon 13 Sep 2021 16:09:02 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "J_leftToe.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1649;
  double t1288;
  double t1645;
  double t1647;
  double t1648;
  double t1651;
  double t1715;
  double t1753;
  double t1791;
  double t1855;
  double t1877;
  double t2034;
  double t2039;
  double t2041;
  double t2043;
  double t1956;
  double t1979;
  double t2024;
  double t2049;
  double t2050;
  double t2067;
  double t3227;
  double t3623;
  double t3815;
  double t4128;
  double t2159;
  double t2195;
  double t2615;
  double t4331;
  double t4339;
  double t4344;
  double t4411;
  double t4421;
  double t4431;
  double t4464;
  double t4686;
  double t4920;
  double t5012;
  double t5108;
  double t5179;
  double t5217;
  double t5229;
  double t5273;
  double t5443;
  double t5545;
  double t5650;
  double t5658;
  double t5666;
  double t5752;
  double t5756;
  double t5760;
  double t5848;
  double t5884;
  double t5934;
  double t6045;
  double t6141;
  double t6193;
  double t6210;
  double t6300;
  double t6315;
  double t6316;
  double t6396;
  double t6414;
  double t6426;
  double t6536;
  double t6576;
  double t6650;
  double t6664;
  double t6904;
  double t6929;
  double t6955;
  double t1314;
  double t1639;
  double t7080;
  double t7103;
  double t7104;
  double t2042;
  double t2045;
  double t2046;
  double t2072;
  double t2106;
  double t2134;
  double t7135;
  double t7139;
  double t7141;
  double t7168;
  double t7174;
  double t7190;
  double t4028;
  double t4147;
  double t4155;
  double t4345;
  double t4385;
  double t4392;
  double t4457;
  double t4524;
  double t4606;
  double t7305;
  double t7306;
  double t7307;
  double t7322;
  double t7332;
  double t7349;
  double t5077;
  double t5085;
  double t5097;
  double t5512;
  double t5604;
  double t5638;
  double t7369;
  double t7398;
  double t7420;
  double t7455;
  double t7468;
  double t7496;
  double t5693;
  double t5746;
  double t5749;
  double t6004;
  double t6096;
  double t6126;
  double t7529;
  double t7563;
  double t7573;
  double t7581;
  double t7586;
  double t7592;
  double t6286;
  double t6287;
  double t6299;
  double t6529;
  double t6547;
  double t6571;
  double t7595;
  double t7598;
  double t7599;
  double t7601;
  double t7602;
  double t7603;
  double t6725;
  double t6782;
  double t6793;
  double t7605;
  double t7606;
  double t7613;
  double t7622;
  double t7631;
  double t7638;
  double t7744;
  double t7750;
  double t7756;
  double t7840;
  double t7859;
  double t7868;
  double t7898;
  double t7927;
  double t7933;
  double t7943;
  double t7944;
  double t7948;
  double t7952;
  double t7954;
  double t7958;
  double t7987;
  double t7996;
  double t8001;
  double t8035;
  double t8045;
  double t8058;
  double t8071;
  double t8072;
  double t8074;
  double t8076;
  double t8080;
  double t8083;
  double t8085;
  double t8086;
  double t8090;
  double t8110;
  double t8139;
  double t8143;
  double t8241;
  double t8245;
  double t8254;
  double t8306;
  double t8326;
  double t8351;
  double t8391;
  double t8392;
  double t8393;
  double t8397;
  double t8398;
  double t8399;
  double t8401;
  double t8402;
  double t8405;
  double t8418;
  double t8421;
  double t8426;
  double t8452;
  double t8453;
  double t8467;
  double t8472;
  double t8477;
  double t8486;
  double t8515;
  double t8519;
  double t8524;
  double t8542;
  double t8562;
  double t8573;
  double t8584;
  double t8607;
  double t8619;
  double t8752;
  double t8753;
  double t8754;
  double t8769;
  double t8785;
  double t8786;
  double t8792;
  double t8793;
  double t8804;
  double t8811;
  double t8815;
  double t8817;
  double t8819;
  double t8822;
  double t8823;
  double t8827;
  double t8828;
  double t8830;
  double t8836;
  double t8844;
  double t8852;
  double t8866;
  double t8875;
  double t8876;
  double t8881;
  double t8883;
  double t8887;
  double t8911;
  double t8928;
  double t8963;
  double t8980;
  double t8983;
  double t8988;
  double t9080;
  double t9081;
  double t9083;
  double t9099;
  double t9100;
  double t9101;
  double t9105;
  double t9107;
  double t9108;
  double t9112;
  double t9113;
  double t9114;
  double t9120;
  double t9121;
  double t9122;
  double t9141;
  double t9151;
  double t9154;
  double t9162;
  double t9169;
  double t9176;
  double t9182;
  double t9187;
  double t9188;
  double t9197;
  double t9199;
  double t9208;
  double t9263;
  double t9267;
  double t9274;
  double t9291;
  double t9292;
  double t9293;
  double t9296;
  double t9297;
  double t9298;
  double t9300;
  double t9301;
  double t9302;
  double t9304;
  double t9307;
  double t9309;
  double t9325;
  double t9328;
  double t9333;
  double t9335;
  double t9336;
  double t9338;
  double t9340;
  double t9345;
  double t9349;
  double t9356;
  double t9357;
  double t9371;
  double t9383;
  double t9390;
  double t9398;
  double t9436;
  double t9438;
  double t9442;
  double t9464;
  double t9465;
  double t9468;
  double t9471;
  double t9475;
  double t9477;
  double t9480;
  double t9482;
  double t9483;
  double t9485;
  double t9486;
  double t9487;
  double t9489;
  double t9490;
  double t9491;
  double t9494;
  double t9495;
  double t9496;
  double t9498;
  double t9500;
  double t9510;
  double t9513;
  double t9514;
  double t9517;
  double t9519;
  double t9528;
  double t9543;
  double t9601;
  double t9603;
  double t9614;
  double t9625;
  double t9626;
  double t9627;
  double t9630;
  double t9631;
  double t9632;
  double t9634;
  double t9635;
  double t9636;
  double t9638;
  double t9639;
  double t9640;
  double t9642;
  double t9643;
  double t9644;
  double t9646;
  double t9647;
  double t9648;
  double t9650;
  double t9653;
  double t9654;
  double t9657;
  double t9658;
  double t9659;
  double t9661;
  double t9663;
  double t9665;
  double t9719;
  double t9721;
  double t9722;
  double t9733;
  double t9739;
  double t9740;
  double t9744;
  double t9746;
  double t9748;
  double t9750;
  double t9752;
  double t9757;
  double t9761;
  double t9763;
  double t9764;
  double t9768;
  double t9771;
  double t9773;
  double t9776;
  double t9777;
  double t9778;
  double t9791;
  double t9794;
  double t9795;
  double t9805;
  double t9806;
  double t9809;
  double t9839;
  double t9843;
  double t9845;
  double t9850;
  double t9851;
  double t9853;
  double t9854;
  double t9855;
  double t9857;
  double t9859;
  double t9861;
  double t9863;
  double t9864;
  double t9868;
  double t9872;
  double t9873;
  double t9876;
  double t9878;
  double t9879;
  double t9880;
  double t9882;
  double t9885;
  double t9887;
  double t9891;
  double t9893;
  double t9896;
  double t9902;
  double t9903;
  double t9904;
  double t9942;
  double t9943;
  double t9945;
  double t9955;
  double t9959;
  double t9961;
  double t9976;
  double t9980;
  double t9982;
  double t9984;
  double t9985;
  double t9990;
  double t9994;
  double t9996;
  double t9997;
  double t10001;
  double t10004;
  double t10006;
  double t10009;
  double t10012;
  double t10013;
  double t10019;
  double t10021;
  double t10022;
  double t9922;
  double t9927;
  double t9934;
  double t9950;
  double t9953;
  double t7265;
  double t7273;
  double t7290;
  double t10063;
  double t10064;
  double t10065;
  double t10069;
  double t10073;
  double t10074;
  double t10077;
  double t10078;
  double t10079;
  double t10083;
  double t10084;
  double t10085;
  double t10087;
  double t10089;
  double t10090;
  double t10092;
  double t10093;
  double t10096;
  double t10124;
  double t10128;
  double t10133;
  double t10117;
  double t10119;
  double t10120;
  double t10135;
  double t10136;
  double t10139;
  double t10167;
  double t10170;
  double t10171;
  double t10176;
  double t10177;
  double t10178;
  double t10181;
  double t10183;
  double t10184;
  double t10192;
  double t10197;
  double t10198;
  double t10205;
  double t10206;
  double t10207;
  double t10209;
  double t10210;
  double t10212;
  double t10235;
  double t10238;
  double t10240;
  double t10245;
  double t10246;
  double t10250;
  double t10253;
  double t10254;
  double t10256;
  double t10258;
  double t10261;
  double t10265;
  double t10270;
  double t10271;
  double t10272;
  double t10280;
  double t10281;
  double t10282;
  double t10289;
  double t10292;
  double t10293;
  double t10300;
  double t10303;
  double t10304;
  double t10307;
  double t10308;
  double t10310;
  double t10232;
  double t10233;
  double t10241;
  double t10242;
  double t10243;
  double t10327;
  double t10331;
  double t10332;
  double t10335;
  double t10337;
  double t10339;
  double t10342;
  double t10343;
  double t10346;
  double t10349;
  double t10350;
  double t10352;
  double t10353;
  double t10354;
  double t10356;
  double t10357;
  double t10358;
  double t10364;
  double t10365;
  double t10366;
  double t10399;
  double t10402;
  double t10403;
  double t10406;
  double t10407;
  double t10409;
  double t10411;
  double t10414;
  double t10415;
  double t10418;
  double t10421;
  double t10422;
  double t10424;
  double t10425;
  double t10426;
  double t10428;
  double t10430;
  double t10431;
  double t10436;
  double t10437;
  double t10439;
  double t10441;
  double t10444;
  double t10445;
  double t10448;
  double t10449;
  double t10451;
  double t10480;
  double t10482;
  double t10483;
  double t10488;
  double t10489;
  double t10491;
  double t10492;
  double t10494;
  double t10495;
  double t10496;
  double t10500;
  double t10501;
  double t10502;
  double t10508;
  double t10510;
  double t10513;
  double t10515;
  double t10516;
  double t10517;
  double t10476;
  double t10478;
  double t10479;
  double t10485;
  double t10486;
  double t10554;
  double t10557;
  double t10559;
  double t10561;
  double t10562;
  double t10569;
  double t10571;
  double t10574;
  double t10575;
  double t10578;
  double t10580;
  double t10581;
  double t10585;
  double t10606;
  double t10607;
  double t10609;
  double t10615;
  double t10616;
  double t10627;
  double t10628;
  double t10633;
  double t10635;
  double t10636;
  double t10639;
  double t10640;
  double t10641;
  double t10646;
  double t10647;
  double t10648;
  double t10654;
  double t10655;
  double t10658;
  double t10677;
  double t10679;
  double t10680;
  double t10682;
  double t10683;
  double t10685;
  double t10686;
  double t10689;
  double t10698;
  double t10702;
  double t10706;
  double t10710;
  double t10713;
  double t10671;
  double t10672;
  double t10674;
  double t10675;
  double t10676;
  double t10734;
  double t10735;
  double t10740;
  double t10741;
  double t10746;
  double t10749;
  double t10750;
  double t10771;
  double t10774;
  double t10775;
  double t10777;
  double t10778;
  double t10785;
  double t10787;
  double t10790;
  double t10791;
  double t10792;
  double t10799;
  double t10803;
  double t10804;
  double t10818;
  double t10819;
  double t10821;
  double t10826;
  double t10827;
  double t10829;
  double t10830;
  double t10815;
  double t10816;
  double t10817;
  double t10823;
  double t10824;
  double t10863;
  double t10869;
  double t7699;
  double t10890;
  double t10891;
  double t10894;
  double t10901;
  double t10907;
  double t10910;
  double t10913;
  double t10832;
  double t10945;
  double t10946;
  double t10947;
  double t10844;
  double t10934;
  double t10935;
  double t10941;
  double t10942;
  double t10943;
  double t10873;
  double t7700;
  double t7707;
  double t10915;
  double t10965;
  double t10966;
  double t10967;
  double t10926;
  t1649 = Cos(var1[3]);
  t1288 = Cos(var1[6]);
  t1645 = Cos(var1[5]);
  t1647 = Sin(var1[3]);
  t1648 = -1.*t1645*t1647;
  t1651 = Sin(var1[4]);
  t1715 = Sin(var1[5]);
  t1753 = -1.*t1649*t1651*t1715;
  t1791 = t1648 + t1753;
  t1855 = Cos(var1[4]);
  t1877 = Sin(var1[6]);
  t2034 = Cos(var1[7]);
  t2039 = -1.*t2034;
  t2041 = 1. + t2039;
  t2043 = Sin(var1[7]);
  t1956 = t1288*t1791;
  t1979 = -1.*t1649*t1855*t1877;
  t2024 = t1956 + t1979;
  t2049 = t1649*t1645*t1651;
  t2050 = -1.*t1647*t1715;
  t2067 = t2049 + t2050;
  t3227 = Cos(var1[8]);
  t3623 = -1.*t3227;
  t3815 = 1. + t3623;
  t4128 = Sin(var1[8]);
  t2159 = t2034*t2067;
  t2195 = t2024*t2043;
  t2615 = t2159 + t2195;
  t4331 = -1.*t1649*t1855*t1288;
  t4339 = -1.*t1791*t1877;
  t4344 = t4331 + t4339;
  t4411 = Cos(var1[9]);
  t4421 = -1.*t4411;
  t4431 = 1. + t4421;
  t4464 = Sin(var1[9]);
  t4686 = t3227*t2615;
  t4920 = t4344*t4128;
  t5012 = t4686 + t4920;
  t5108 = t3227*t4344;
  t5179 = -1.*t2615*t4128;
  t5217 = t5108 + t5179;
  t5229 = Cos(var1[10]);
  t5273 = -1.*t5229;
  t5443 = 1. + t5273;
  t5545 = Sin(var1[10]);
  t5650 = -1.*t4464*t5012;
  t5658 = t4411*t5217;
  t5666 = t5650 + t5658;
  t5752 = t4411*t5012;
  t5756 = t4464*t5217;
  t5760 = t5752 + t5756;
  t5848 = Cos(var1[11]);
  t5884 = -1.*t5848;
  t5934 = 1. + t5884;
  t6045 = Sin(var1[11]);
  t6141 = t5545*t5666;
  t6193 = t5229*t5760;
  t6210 = t6141 + t6193;
  t6300 = t5229*t5666;
  t6315 = -1.*t5545*t5760;
  t6316 = t6300 + t6315;
  t6396 = Cos(var1[13]);
  t6414 = -1.*t6396;
  t6426 = 1. + t6414;
  t6536 = Sin(var1[13]);
  t6576 = -1.*t6045*t6210;
  t6650 = t5848*t6316;
  t6664 = t6576 + t6650;
  t6904 = t5848*t6210;
  t6929 = t6045*t6316;
  t6955 = t6904 + t6929;
  t1314 = -1.*t1288;
  t1639 = 1. + t1314;
  t7080 = t1649*t1645;
  t7103 = -1.*t1647*t1651*t1715;
  t7104 = t7080 + t7103;
  t2042 = 0.135*t2041;
  t2045 = 0.049*t2043;
  t2046 = t2042 + t2045;
  t2072 = -0.049*t2041;
  t2106 = 0.135*t2043;
  t2134 = t2072 + t2106;
  t7135 = t1288*t7104;
  t7139 = -1.*t1855*t1647*t1877;
  t7141 = t7135 + t7139;
  t7168 = t1645*t1647*t1651;
  t7174 = t1649*t1715;
  t7190 = t7168 + t7174;
  t4028 = -0.049*t3815;
  t4147 = -0.09*t4128;
  t4155 = t4028 + t4147;
  t4345 = -0.09*t3815;
  t4385 = 0.049*t4128;
  t4392 = t4345 + t4385;
  t4457 = -0.049*t4431;
  t4524 = -0.21*t4464;
  t4606 = t4457 + t4524;
  t7305 = t2034*t7190;
  t7306 = t7141*t2043;
  t7307 = t7305 + t7306;
  t7322 = -1.*t1855*t1288*t1647;
  t7332 = -1.*t7104*t1877;
  t7349 = t7322 + t7332;
  t5077 = -0.21*t4431;
  t5085 = 0.049*t4464;
  t5097 = t5077 + t5085;
  t5512 = -0.27068*t5443;
  t5604 = 0.00159*t5545;
  t5638 = t5512 + t5604;
  t7369 = t3227*t7307;
  t7398 = t7349*t4128;
  t7420 = t7369 + t7398;
  t7455 = t3227*t7349;
  t7468 = -1.*t7307*t4128;
  t7496 = t7455 + t7468;
  t5693 = -0.00159*t5443;
  t5746 = -0.27068*t5545;
  t5749 = t5693 + t5746;
  t6004 = 0.01841*t5934;
  t6096 = -0.70544*t6045;
  t6126 = t6004 + t6096;
  t7529 = -1.*t4464*t7420;
  t7563 = t4411*t7496;
  t7573 = t7529 + t7563;
  t7581 = t4411*t7420;
  t7586 = t4464*t7496;
  t7592 = t7581 + t7586;
  t6286 = -0.70544*t5934;
  t6287 = -0.01841*t6045;
  t6299 = t6286 + t6287;
  t6529 = -1.11344*t6426;
  t6547 = 0.02159*t6536;
  t6571 = t6529 + t6547;
  t7595 = t5545*t7573;
  t7598 = t5229*t7592;
  t7599 = t7595 + t7598;
  t7601 = t5229*t7573;
  t7602 = -1.*t5545*t7592;
  t7603 = t7601 + t7602;
  t6725 = -0.02159*t6426;
  t6782 = -1.11344*t6536;
  t6793 = t6725 + t6782;
  t7605 = -1.*t6045*t7599;
  t7606 = t5848*t7603;
  t7613 = t7605 + t7606;
  t7622 = t5848*t7599;
  t7631 = t6045*t7603;
  t7638 = t7622 + t7631;
  t7744 = t1288*t1651*t1715;
  t7750 = t1855*t1877;
  t7756 = t7744 + t7750;
  t7840 = -1.*t1645*t2034*t1651;
  t7859 = t7756*t2043;
  t7868 = t7840 + t7859;
  t7898 = t1855*t1288;
  t7927 = -1.*t1651*t1715*t1877;
  t7933 = t7898 + t7927;
  t7943 = t3227*t7868;
  t7944 = t7933*t4128;
  t7948 = t7943 + t7944;
  t7952 = t3227*t7933;
  t7954 = -1.*t7868*t4128;
  t7958 = t7952 + t7954;
  t7987 = -1.*t4464*t7948;
  t7996 = t4411*t7958;
  t8001 = t7987 + t7996;
  t8035 = t4411*t7948;
  t8045 = t4464*t7958;
  t8058 = t8035 + t8045;
  t8071 = t5545*t8001;
  t8072 = t5229*t8058;
  t8074 = t8071 + t8072;
  t8076 = t5229*t8001;
  t8080 = -1.*t5545*t8058;
  t8083 = t8076 + t8080;
  t8085 = -1.*t6045*t8074;
  t8086 = t5848*t8083;
  t8090 = t8085 + t8086;
  t8110 = t5848*t8074;
  t8139 = t6045*t8083;
  t8143 = t8110 + t8139;
  t8241 = -1.*t1855*t1288*t1647*t1715;
  t8245 = t1647*t1651*t1877;
  t8254 = t8241 + t8245;
  t8306 = t1855*t1645*t2034*t1647;
  t8326 = t8254*t2043;
  t8351 = t8306 + t8326;
  t8391 = t1288*t1647*t1651;
  t8392 = t1855*t1647*t1715*t1877;
  t8393 = t8391 + t8392;
  t8397 = t3227*t8351;
  t8398 = t8393*t4128;
  t8399 = t8397 + t8398;
  t8401 = t3227*t8393;
  t8402 = -1.*t8351*t4128;
  t8405 = t8401 + t8402;
  t8418 = -1.*t4464*t8399;
  t8421 = t4411*t8405;
  t8426 = t8418 + t8421;
  t8452 = t4411*t8399;
  t8453 = t4464*t8405;
  t8467 = t8452 + t8453;
  t8472 = t5545*t8426;
  t8477 = t5229*t8467;
  t8486 = t8472 + t8477;
  t8515 = t5229*t8426;
  t8519 = -1.*t5545*t8467;
  t8524 = t8515 + t8519;
  t8542 = -1.*t6045*t8486;
  t8562 = t5848*t8524;
  t8573 = t8542 + t8562;
  t8584 = t5848*t8486;
  t8607 = t6045*t8524;
  t8619 = t8584 + t8607;
  t8752 = t1649*t1855*t1288*t1715;
  t8753 = -1.*t1649*t1651*t1877;
  t8754 = t8752 + t8753;
  t8769 = -1.*t1649*t1855*t1645*t2034;
  t8785 = t8754*t2043;
  t8786 = t8769 + t8785;
  t8792 = -1.*t1649*t1288*t1651;
  t8793 = -1.*t1649*t1855*t1715*t1877;
  t8804 = t8792 + t8793;
  t8811 = t3227*t8786;
  t8815 = t8804*t4128;
  t8817 = t8811 + t8815;
  t8819 = t3227*t8804;
  t8822 = -1.*t8786*t4128;
  t8823 = t8819 + t8822;
  t8827 = -1.*t4464*t8817;
  t8828 = t4411*t8823;
  t8830 = t8827 + t8828;
  t8836 = t4411*t8817;
  t8844 = t4464*t8823;
  t8852 = t8836 + t8844;
  t8866 = t5545*t8830;
  t8875 = t5229*t8852;
  t8876 = t8866 + t8875;
  t8881 = t5229*t8830;
  t8883 = -1.*t5545*t8852;
  t8887 = t8881 + t8883;
  t8911 = -1.*t6045*t8876;
  t8928 = t5848*t8887;
  t8963 = t8911 + t8928;
  t8980 = t5848*t8876;
  t8983 = t6045*t8887;
  t8988 = t8980 + t8983;
  t9080 = -1.*t1855*t2034*t1715;
  t9081 = -1.*t1855*t1645*t1288*t2043;
  t9083 = t9080 + t9081;
  t9099 = t3227*t9083;
  t9100 = t1855*t1645*t1877*t4128;
  t9101 = t9099 + t9100;
  t9105 = t1855*t1645*t3227*t1877;
  t9107 = -1.*t9083*t4128;
  t9108 = t9105 + t9107;
  t9112 = -1.*t4464*t9101;
  t9113 = t4411*t9108;
  t9114 = t9112 + t9113;
  t9120 = t4411*t9101;
  t9121 = t4464*t9108;
  t9122 = t9120 + t9121;
  t9141 = t5545*t9114;
  t9151 = t5229*t9122;
  t9154 = t9141 + t9151;
  t9162 = t5229*t9114;
  t9169 = -1.*t5545*t9122;
  t9176 = t9162 + t9169;
  t9182 = -1.*t6045*t9154;
  t9187 = t5848*t9176;
  t9188 = t9182 + t9187;
  t9197 = t5848*t9154;
  t9199 = t6045*t9176;
  t9208 = t9197 + t9199;
  t9263 = -1.*t1645*t1647*t1651;
  t9267 = -1.*t1649*t1715;
  t9274 = t9263 + t9267;
  t9291 = t2034*t7104;
  t9292 = t1288*t9274*t2043;
  t9293 = t9291 + t9292;
  t9296 = t3227*t9293;
  t9297 = -1.*t9274*t1877*t4128;
  t9298 = t9296 + t9297;
  t9300 = -1.*t3227*t9274*t1877;
  t9301 = -1.*t9293*t4128;
  t9302 = t9300 + t9301;
  t9304 = -1.*t4464*t9298;
  t9307 = t4411*t9302;
  t9309 = t9304 + t9307;
  t9325 = t4411*t9298;
  t9328 = t4464*t9302;
  t9333 = t9325 + t9328;
  t9335 = t5545*t9309;
  t9336 = t5229*t9333;
  t9338 = t9335 + t9336;
  t9340 = t5229*t9309;
  t9345 = -1.*t5545*t9333;
  t9349 = t9340 + t9345;
  t9356 = -1.*t6045*t9338;
  t9357 = t5848*t9349;
  t9371 = t9356 + t9357;
  t9383 = t5848*t9338;
  t9390 = t6045*t9349;
  t9398 = t9383 + t9390;
  t9436 = t1645*t1647;
  t9438 = t1649*t1651*t1715;
  t9442 = t9436 + t9438;
  t9464 = t2034*t9442;
  t9465 = t1288*t2067*t2043;
  t9468 = t9464 + t9465;
  t9471 = t3227*t9468;
  t9475 = -1.*t2067*t1877*t4128;
  t9477 = t9471 + t9475;
  t9480 = -1.*t3227*t2067*t1877;
  t9482 = -1.*t9468*t4128;
  t9483 = t9480 + t9482;
  t9485 = -1.*t4464*t9477;
  t9486 = t4411*t9483;
  t9487 = t9485 + t9486;
  t9489 = t4411*t9477;
  t9490 = t4464*t9483;
  t9491 = t9489 + t9490;
  t9494 = t5545*t9487;
  t9495 = t5229*t9491;
  t9496 = t9494 + t9495;
  t9498 = t5229*t9487;
  t9500 = -1.*t5545*t9491;
  t9510 = t9498 + t9500;
  t9513 = -1.*t6045*t9496;
  t9514 = t5848*t9510;
  t9517 = t9513 + t9514;
  t9519 = t5848*t9496;
  t9528 = t6045*t9510;
  t9543 = t9519 + t9528;
  t9601 = t1288*t1651;
  t9603 = t1855*t1715*t1877;
  t9614 = t9601 + t9603;
  t9625 = t1855*t1288*t1715;
  t9626 = -1.*t1651*t1877;
  t9627 = t9625 + t9626;
  t9630 = t3227*t9614*t2043;
  t9631 = t9627*t4128;
  t9632 = t9630 + t9631;
  t9634 = t3227*t9627;
  t9635 = -1.*t9614*t2043*t4128;
  t9636 = t9634 + t9635;
  t9638 = -1.*t4464*t9632;
  t9639 = t4411*t9636;
  t9640 = t9638 + t9639;
  t9642 = t4411*t9632;
  t9643 = t4464*t9636;
  t9644 = t9642 + t9643;
  t9646 = t5545*t9640;
  t9647 = t5229*t9644;
  t9648 = t9646 + t9647;
  t9650 = t5229*t9640;
  t9653 = -1.*t5545*t9644;
  t9654 = t9650 + t9653;
  t9657 = -1.*t6045*t9648;
  t9658 = t5848*t9654;
  t9659 = t9657 + t9658;
  t9661 = t5848*t9648;
  t9663 = t6045*t9654;
  t9665 = t9661 + t9663;
  t9719 = -1.*t1288*t7104;
  t9721 = t1855*t1647*t1877;
  t9722 = t9719 + t9721;
  t9733 = t3227*t7349*t2043;
  t9739 = t9722*t4128;
  t9740 = t9733 + t9739;
  t9744 = t3227*t9722;
  t9746 = -1.*t7349*t2043*t4128;
  t9748 = t9744 + t9746;
  t9750 = -1.*t4464*t9740;
  t9752 = t4411*t9748;
  t9757 = t9750 + t9752;
  t9761 = t4411*t9740;
  t9763 = t4464*t9748;
  t9764 = t9761 + t9763;
  t9768 = t5545*t9757;
  t9771 = t5229*t9764;
  t9773 = t9768 + t9771;
  t9776 = t5229*t9757;
  t9777 = -1.*t5545*t9764;
  t9778 = t9776 + t9777;
  t9791 = -1.*t6045*t9773;
  t9794 = t5848*t9778;
  t9795 = t9791 + t9794;
  t9805 = t5848*t9773;
  t9806 = t6045*t9778;
  t9809 = t9805 + t9806;
  t9839 = t1649*t1855*t1288;
  t9843 = -1.*t9442*t1877;
  t9845 = t9839 + t9843;
  t9850 = -1.*t1288*t9442;
  t9851 = t9850 + t1979;
  t9853 = t3227*t9845*t2043;
  t9854 = t9851*t4128;
  t9855 = t9853 + t9854;
  t9857 = t3227*t9851;
  t9859 = -1.*t9845*t2043*t4128;
  t9861 = t9857 + t9859;
  t9863 = -1.*t4464*t9855;
  t9864 = t4411*t9861;
  t9868 = t9863 + t9864;
  t9872 = t4411*t9855;
  t9873 = t4464*t9861;
  t9876 = t9872 + t9873;
  t9878 = t5545*t9868;
  t9879 = t5229*t9876;
  t9880 = t9878 + t9879;
  t9882 = t5229*t9868;
  t9885 = -1.*t5545*t9876;
  t9887 = t9882 + t9885;
  t9891 = -1.*t6045*t9880;
  t9893 = t5848*t9887;
  t9896 = t9891 + t9893;
  t9902 = t5848*t9880;
  t9903 = t6045*t9887;
  t9904 = t9902 + t9903;
  t9942 = -1.*t1855*t1288*t1715;
  t9943 = t1651*t1877;
  t9945 = t9942 + t9943;
  t9955 = t2034*t9945;
  t9959 = -1.*t1855*t1645*t2043;
  t9961 = t9955 + t9959;
  t9976 = -1.*t3227*t4464*t9961;
  t9980 = -1.*t4411*t9961*t4128;
  t9982 = t9976 + t9980;
  t9984 = t4411*t3227*t9961;
  t9985 = -1.*t4464*t9961*t4128;
  t9990 = t9984 + t9985;
  t9994 = t5545*t9982;
  t9996 = t5229*t9990;
  t9997 = t9994 + t9996;
  t10001 = t5229*t9982;
  t10004 = -1.*t5545*t9990;
  t10006 = t10001 + t10004;
  t10009 = -1.*t6045*t9997;
  t10012 = t5848*t10006;
  t10013 = t10009 + t10012;
  t10019 = t5848*t9997;
  t10021 = t6045*t10006;
  t10022 = t10019 + t10021;
  t9922 = 0.135*t2034;
  t9927 = -0.049*t2043;
  t9934 = t9922 + t9927;
  t9950 = 0.049*t2034;
  t9953 = t9950 + t2106;
  t7265 = t2034*t7141;
  t7273 = -1.*t7190*t2043;
  t7290 = t7265 + t7273;
  t10063 = -1.*t3227*t4464*t7290;
  t10064 = -1.*t4411*t7290*t4128;
  t10065 = t10063 + t10064;
  t10069 = t4411*t3227*t7290;
  t10073 = -1.*t4464*t7290*t4128;
  t10074 = t10069 + t10073;
  t10077 = t5545*t10065;
  t10078 = t5229*t10074;
  t10079 = t10077 + t10078;
  t10083 = t5229*t10065;
  t10084 = -1.*t5545*t10074;
  t10085 = t10083 + t10084;
  t10087 = -1.*t6045*t10079;
  t10089 = t5848*t10085;
  t10090 = t10087 + t10089;
  t10092 = t5848*t10079;
  t10093 = t6045*t10085;
  t10096 = t10092 + t10093;
  t10124 = t1288*t9442;
  t10128 = t1649*t1855*t1877;
  t10133 = t10124 + t10128;
  t10117 = -1.*t1649*t1645*t1651;
  t10119 = t1647*t1715;
  t10120 = t10117 + t10119;
  t10135 = t2034*t10133;
  t10136 = -1.*t10120*t2043;
  t10139 = t10135 + t10136;
  t10167 = -1.*t3227*t4464*t10139;
  t10170 = -1.*t4411*t10139*t4128;
  t10171 = t10167 + t10170;
  t10176 = t4411*t3227*t10139;
  t10177 = -1.*t4464*t10139*t4128;
  t10178 = t10176 + t10177;
  t10181 = t5545*t10171;
  t10183 = t5229*t10178;
  t10184 = t10181 + t10183;
  t10192 = t5229*t10171;
  t10197 = -1.*t5545*t10178;
  t10198 = t10192 + t10197;
  t10205 = -1.*t6045*t10184;
  t10206 = t5848*t10198;
  t10207 = t10205 + t10206;
  t10209 = t5848*t10184;
  t10210 = t6045*t10198;
  t10212 = t10209 + t10210;
  t10235 = t1855*t1645*t2034;
  t10238 = t9945*t2043;
  t10240 = t10235 + t10238;
  t10245 = -1.*t3227*t10240;
  t10246 = -1.*t9614*t4128;
  t10250 = t10245 + t10246;
  t10253 = t3227*t9614;
  t10254 = -1.*t10240*t4128;
  t10256 = t10253 + t10254;
  t10258 = t4464*t10250;
  t10261 = t4411*t10256;
  t10265 = t10258 + t10261;
  t10270 = t4411*t10250;
  t10271 = -1.*t4464*t10256;
  t10272 = t10270 + t10271;
  t10280 = -1.*t5545*t10265;
  t10281 = t5229*t10272;
  t10282 = t10280 + t10281;
  t10289 = t5229*t10265;
  t10292 = t5545*t10272;
  t10293 = t10289 + t10292;
  t10300 = t6045*t10282;
  t10303 = t5848*t10293;
  t10304 = t10300 + t10303;
  t10307 = t5848*t10282;
  t10308 = -1.*t6045*t10293;
  t10310 = t10307 + t10308;
  t10232 = 0.049*t3227;
  t10233 = t10232 + t4147;
  t10241 = -0.09*t3227;
  t10242 = -0.049*t4128;
  t10243 = t10241 + t10242;
  t10327 = -1.*t3227*t7307;
  t10331 = -1.*t7349*t4128;
  t10332 = t10327 + t10331;
  t10335 = t4464*t10332;
  t10337 = t10335 + t7563;
  t10339 = t4411*t10332;
  t10342 = -1.*t4464*t7496;
  t10343 = t10339 + t10342;
  t10346 = -1.*t5545*t10337;
  t10349 = t5229*t10343;
  t10350 = t10346 + t10349;
  t10352 = t5229*t10337;
  t10353 = t5545*t10343;
  t10354 = t10352 + t10353;
  t10356 = t6045*t10350;
  t10357 = t5848*t10354;
  t10358 = t10356 + t10357;
  t10364 = t5848*t10350;
  t10365 = -1.*t6045*t10354;
  t10366 = t10364 + t10365;
  t10399 = t2034*t10120;
  t10402 = t10133*t2043;
  t10403 = t10399 + t10402;
  t10406 = -1.*t3227*t10403;
  t10407 = -1.*t9845*t4128;
  t10409 = t10406 + t10407;
  t10411 = t3227*t9845;
  t10414 = -1.*t10403*t4128;
  t10415 = t10411 + t10414;
  t10418 = t4464*t10409;
  t10421 = t4411*t10415;
  t10422 = t10418 + t10421;
  t10424 = t4411*t10409;
  t10425 = -1.*t4464*t10415;
  t10426 = t10424 + t10425;
  t10428 = -1.*t5545*t10422;
  t10430 = t5229*t10426;
  t10431 = t10428 + t10430;
  t10436 = t5229*t10422;
  t10437 = t5545*t10426;
  t10439 = t10436 + t10437;
  t10441 = t6045*t10431;
  t10444 = t5848*t10439;
  t10445 = t10441 + t10444;
  t10448 = t5848*t10431;
  t10449 = -1.*t6045*t10439;
  t10451 = t10448 + t10449;
  t10480 = t3227*t10240;
  t10482 = t9614*t4128;
  t10483 = t10480 + t10482;
  t10488 = -1.*t4464*t10483;
  t10489 = t10488 + t10261;
  t10491 = -1.*t4411*t10483;
  t10492 = t10491 + t10271;
  t10494 = -1.*t5545*t10489;
  t10495 = t5229*t10492;
  t10496 = t10494 + t10495;
  t10500 = t5229*t10489;
  t10501 = t5545*t10492;
  t10502 = t10500 + t10501;
  t10508 = t6045*t10496;
  t10510 = t5848*t10502;
  t10513 = t10508 + t10510;
  t10515 = t5848*t10496;
  t10516 = -1.*t6045*t10502;
  t10517 = t10515 + t10516;
  t10476 = -0.21*t4411;
  t10478 = -0.049*t4464;
  t10479 = t10476 + t10478;
  t10485 = 0.049*t4411;
  t10486 = t10485 + t4524;
  t10554 = -1.*t4411*t7420;
  t10557 = t10554 + t10342;
  t10559 = -1.*t5545*t7573;
  t10561 = t5229*t10557;
  t10562 = t10559 + t10561;
  t10569 = t5545*t10557;
  t10571 = t7601 + t10569;
  t10574 = t6045*t10562;
  t10575 = t5848*t10571;
  t10578 = t10574 + t10575;
  t10580 = t5848*t10562;
  t10581 = -1.*t6045*t10571;
  t10585 = t10580 + t10581;
  t10606 = t3227*t10403;
  t10607 = t9845*t4128;
  t10609 = t10606 + t10607;
  t10615 = -1.*t4464*t10609;
  t10616 = t10615 + t10421;
  t10627 = -1.*t4411*t10609;
  t10628 = t10627 + t10425;
  t10633 = -1.*t5545*t10616;
  t10635 = t5229*t10628;
  t10636 = t10633 + t10635;
  t10639 = t5229*t10616;
  t10640 = t5545*t10628;
  t10641 = t10639 + t10640;
  t10646 = t6045*t10636;
  t10647 = t5848*t10641;
  t10648 = t10646 + t10647;
  t10654 = t5848*t10636;
  t10655 = -1.*t6045*t10641;
  t10658 = t10654 + t10655;
  t10677 = t4411*t10483;
  t10679 = t4464*t10256;
  t10680 = t10677 + t10679;
  t10682 = -1.*t5229*t10680;
  t10683 = t10494 + t10682;
  t10685 = -1.*t5545*t10680;
  t10686 = t10500 + t10685;
  t10689 = t6045*t10683;
  t10698 = t5848*t10686;
  t10702 = t10689 + t10698;
  t10706 = t5848*t10683;
  t10710 = -1.*t6045*t10686;
  t10713 = t10706 + t10710;
  t10671 = 0.00159*t5229;
  t10672 = t10671 + t5746;
  t10674 = -0.27068*t5229;
  t10675 = -0.00159*t5545;
  t10676 = t10674 + t10675;
  t10734 = -1.*t5229*t7592;
  t10735 = t10559 + t10734;
  t10740 = t6045*t10735;
  t10741 = t10740 + t7606;
  t10746 = t5848*t10735;
  t10749 = -1.*t6045*t7603;
  t10750 = t10746 + t10749;
  t10771 = t4411*t10609;
  t10774 = t4464*t10415;
  t10775 = t10771 + t10774;
  t10777 = -1.*t5229*t10775;
  t10778 = t10633 + t10777;
  t10785 = -1.*t5545*t10775;
  t10787 = t10639 + t10785;
  t10790 = t6045*t10778;
  t10791 = t5848*t10787;
  t10792 = t10790 + t10791;
  t10799 = t5848*t10778;
  t10803 = -1.*t6045*t10787;
  t10804 = t10799 + t10803;
  t10818 = t5545*t10489;
  t10819 = t5229*t10680;
  t10821 = t10818 + t10819;
  t10826 = -1.*t6045*t10821;
  t10827 = t10826 + t10698;
  t10829 = -1.*t5848*t10821;
  t10830 = t10829 + t10710;
  t10815 = -0.70544*t5848;
  t10816 = 0.01841*t6045;
  t10817 = t10815 + t10816;
  t10823 = -0.01841*t5848;
  t10824 = t10823 + t6096;
  t10863 = -1.*t5848*t7599;
  t10869 = t10863 + t10749;
  t7699 = t6396*t7613;
  t10890 = t5545*t10616;
  t10891 = t5229*t10775;
  t10894 = t10890 + t10891;
  t10901 = -1.*t6045*t10894;
  t10907 = t10901 + t10791;
  t10910 = -1.*t5848*t10894;
  t10913 = t10910 + t10803;
  t10832 = -1.*t6536*t10827;
  t10945 = t5848*t10821;
  t10946 = t6045*t10686;
  t10947 = t10945 + t10946;
  t10844 = t6396*t10827;
  t10934 = 0.02159*t6396;
  t10935 = t10934 + t6782;
  t10941 = -1.11344*t6396;
  t10942 = -0.02159*t6536;
  t10943 = t10941 + t10942;
  t10873 = -1.*t6536*t7613;
  t7700 = -1.*t6536*t7638;
  t7707 = t7699 + t7700;
  t10915 = -1.*t6536*t10907;
  t10965 = t5848*t10894;
  t10966 = t6045*t10787;
  t10967 = t10965 + t10966;
  t10926 = t6396*t10907;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=1.;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=1.;
  p_output1[9]=0;
  p_output1[10]=0.135*t1639*t1791 + 0.135*t1649*t1855*t1877 + t2024*t2046 + 0.1305*(t2024*t2034 - 1.*t2043*t2067) + t2067*t2134 + t2615*t4155 + t4344*t4392 + t4606*t5012 + t5097*t5217 + t5638*t5666 + t5749*t5760 + t6126*t6210 + t6299*t6316 + t6571*t6664 + t6793*t6955 - 0.02159*(t6536*t6664 + t6396*t6955) - 1.11344*(t6396*t6664 - 1.*t6536*t6955);
  p_output1[11]=0.135*t1647*t1855*t1877 + 0.135*t1639*t7104 + t2046*t7141 + t2134*t7190 + 0.1305*t7290 + t4155*t7307 + t4392*t7349 + t4606*t7420 + t5097*t7496 + t5638*t7573 + t5749*t7592 + t6126*t7599 + t6299*t7603 + t6571*t7613 + t6793*t7638 - 0.02159*(t6536*t7613 + t6396*t7638) - 1.11344*t7707;
  p_output1[12]=0.135*t1639*t1651*t1715 - 0.135*t1855*t1877 - 1.*t1645*t1651*t2134 + t2046*t7756 + 0.1305*(t1645*t1651*t2043 + t2034*t7756) + t4155*t7868 + t4392*t7933 + t4606*t7948 + t5097*t7958 + t5638*t8001 + t5749*t8058 + t6126*t8074 + t6299*t8083 + t6571*t8090 + t6793*t8143 - 0.02159*(t6536*t8090 + t6396*t8143) - 1.11344*(t6396*t8090 - 1.*t6536*t8143);
  p_output1[13]=-0.135*t1639*t1647*t1715*t1855 - 0.135*t1647*t1651*t1877 + t1645*t1647*t1855*t2134 + t2046*t8254 + 0.1305*(-1.*t1645*t1647*t1855*t2043 + t2034*t8254) + t4155*t8351 + t4392*t8393 + t4606*t8399 + t5097*t8405 + t5638*t8426 + t5749*t8467 + t6126*t8486 + t6299*t8524 + t6571*t8573 + t6793*t8619 - 0.02159*(t6536*t8573 + t6396*t8619) - 1.11344*(t6396*t8573 - 1.*t6536*t8619);
  p_output1[14]=0.135*t1639*t1649*t1715*t1855 + 0.135*t1649*t1651*t1877 - 1.*t1645*t1649*t1855*t2134 + t2046*t8754 + 0.1305*(t1645*t1649*t1855*t2043 + t2034*t8754) + t4155*t8786 + t4392*t8804 + t4606*t8817 + t5097*t8823 + t5638*t8830 + t5749*t8852 + t6126*t8876 + t6299*t8887 + t6571*t8963 + t6793*t8988 - 0.02159*(t6536*t8963 + t6396*t8988) - 1.11344*(t6396*t8963 - 1.*t6536*t8988);
  p_output1[15]=-0.135*t1639*t1645*t1855 + 0.1305*(-1.*t1288*t1645*t1855*t2034 + t1715*t1855*t2043) - 1.*t1288*t1645*t1855*t2046 - 1.*t1715*t1855*t2134 + t1645*t1855*t1877*t4392 + t4155*t9083 + t4606*t9101 + t5097*t9108 + t5638*t9114 + t5749*t9122 + t6126*t9154 + t6299*t9176 + t6571*t9188 + t6793*t9208 - 0.02159*(t6536*t9188 + t6396*t9208) - 1.11344*(t6396*t9188 - 1.*t6536*t9208);
  p_output1[16]=t2134*t7104 + 0.135*t1639*t9274 + t1288*t2046*t9274 - 1.*t1877*t4392*t9274 + 0.1305*(-1.*t2043*t7104 + t1288*t2034*t9274) + t4155*t9293 + t4606*t9298 + t5097*t9302 + t5638*t9309 + t5749*t9333 + t6126*t9338 + t6299*t9349 + t6571*t9371 + t6793*t9398 - 0.02159*(t6536*t9371 + t6396*t9398) - 1.11344*(t6396*t9371 - 1.*t6536*t9398);
  p_output1[17]=0.135*t1639*t2067 + t1288*t2046*t2067 - 1.*t1877*t2067*t4392 + t2134*t9442 + 0.1305*(t1288*t2034*t2067 - 1.*t2043*t9442) + t4155*t9468 + t4606*t9477 + t5097*t9483 + t5638*t9487 + t5749*t9491 + t6126*t9496 + t6299*t9510 + t6571*t9517 + t6793*t9543 - 0.02159*(t6536*t9517 + t6396*t9543) - 1.11344*(t6396*t9517 - 1.*t6536*t9543);
  p_output1[18]=-0.135*t1288*t1651 - 0.135*t1715*t1855*t1877 + 0.1305*t2034*t9614 + t2046*t9614 + t2043*t4155*t9614 + t4392*t9627 + t4606*t9632 + t5097*t9636 + t5638*t9640 + t5749*t9644 + t6126*t9648 + t6299*t9654 + t6571*t9659 + t6793*t9665 - 0.02159*(t6536*t9659 + t6396*t9665) - 1.11344*(t6396*t9659 - 1.*t6536*t9665);
  p_output1[19]=0.135*t1288*t1647*t1855 + 0.135*t1877*t7104 + 0.1305*t2034*t7349 + t2046*t7349 + t2043*t4155*t7349 + t4392*t9722 + t4606*t9740 + t5097*t9748 + t5638*t9757 + t5749*t9764 + t6126*t9773 + t6299*t9778 + t6571*t9795 + t6793*t9809 - 0.02159*(t6536*t9795 + t6396*t9809) - 1.11344*(t6396*t9795 - 1.*t6536*t9809);
  p_output1[20]=-0.135*t1288*t1649*t1855 + 0.135*t1877*t9442 + 0.1305*t2034*t9845 + t2046*t9845 + t2043*t4155*t9845 + t4392*t9851 + t4606*t9855 + t5097*t9861 + t5638*t9868 + t5749*t9876 + t6126*t9880 + t6299*t9887 + t6571*t9896 + t6793*t9904 - 0.02159*(t6536*t9896 + t6396*t9904) - 1.11344*(t6396*t9896 - 1.*t6536*t9904);
  p_output1[21]=t10006*t6299 - 0.02159*(t10022*t6396 + t10013*t6536) - 1.11344*(t10013*t6396 - 1.*t10022*t6536) + t10013*t6571 + t10022*t6793 + t1645*t1855*t9934 + 0.1305*(-1.*t1645*t1855*t2034 - 1.*t2043*t9945) + t9945*t9953 + t4155*t9961 + t3227*t4606*t9961 - 1.*t4128*t5097*t9961 + t5638*t9982 + t5749*t9990 + t6126*t9997;
  p_output1[22]=t10065*t5638 + t10074*t5749 + t10079*t6126 + t10085*t6299 - 0.02159*(t10096*t6396 + t10090*t6536) - 1.11344*(t10090*t6396 - 1.*t10096*t6536) + t10090*t6571 + t10096*t6793 + 0.1305*(-1.*t2043*t7141 - 1.*t2034*t7190) + t4155*t7290 + t3227*t4606*t7290 - 1.*t4128*t5097*t7290 + t7190*t9934 + t7141*t9953;
  p_output1[23]=0.1305*(-1.*t10120*t2034 - 1.*t10133*t2043) + t10139*t4155 + t10139*t3227*t4606 - 1.*t10139*t4128*t5097 + t10171*t5638 + t10178*t5749 + t10184*t6126 + t10198*t6299 - 0.02159*(t10212*t6396 + t10207*t6536) - 1.11344*(t10207*t6396 - 1.*t10212*t6536) + t10207*t6571 + t10212*t6793 + t10120*t9934 + t10133*t9953;
  p_output1[24]=t10240*t10243 + t10256*t4606 + t10250*t5097 + t10272*t5638 + t10265*t5749 + t10293*t6126 + t10282*t6299 - 1.11344*(t10310*t6396 - 1.*t10304*t6536) - 0.02159*(t10304*t6396 + t10310*t6536) + t10310*t6571 + t10304*t6793 + t10233*t9614;
  p_output1[25]=t10332*t5097 + t10343*t5638 + t10337*t5749 + t10354*t6126 + t10350*t6299 - 1.11344*(t10366*t6396 - 1.*t10358*t6536) - 0.02159*(t10358*t6396 + t10366*t6536) + t10366*t6571 + t10358*t6793 + t10243*t7307 + t10233*t7349 + t4606*t7496;
  p_output1[26]=t10243*t10403 + t10415*t4606 + t10409*t5097 + t10426*t5638 + t10422*t5749 + t10439*t6126 + t10431*t6299 - 1.11344*(t10451*t6396 - 1.*t10445*t6536) - 0.02159*(t10445*t6396 + t10451*t6536) + t10451*t6571 + t10445*t6793 + t10233*t9845;
  p_output1[27]=t10479*t10483 + t10256*t10486 + t10492*t5638 + t10489*t5749 + t10502*t6126 + t10496*t6299 - 1.11344*(t10517*t6396 - 1.*t10513*t6536) - 0.02159*(t10513*t6396 + t10517*t6536) + t10517*t6571 + t10513*t6793;
  p_output1[28]=t10557*t5638 + t10571*t6126 + t10562*t6299 - 1.11344*(t10585*t6396 - 1.*t10578*t6536) - 0.02159*(t10578*t6396 + t10585*t6536) + t10585*t6571 + t10578*t6793 + t10479*t7420 + t10486*t7496 + t5749*t7573;
  p_output1[29]=t10415*t10486 + t10479*t10609 + t10628*t5638 + t10616*t5749 + t10641*t6126 + t10636*t6299 - 1.11344*(t10658*t6396 - 1.*t10648*t6536) - 0.02159*(t10648*t6396 + t10658*t6536) + t10658*t6571 + t10648*t6793;
  p_output1[30]=t10489*t10672 + t10676*t10680 + t10686*t6126 + t10683*t6299 - 1.11344*(t10713*t6396 - 1.*t10702*t6536) - 0.02159*(t10702*t6396 + t10713*t6536) + t10713*t6571 + t10702*t6793;
  p_output1[31]=t10735*t6299 - 1.11344*(t10750*t6396 - 1.*t10741*t6536) - 0.02159*(t10741*t6396 + t10750*t6536) + t10750*t6571 + t10741*t6793 + t10672*t7573 + t10676*t7592 + t6126*t7603;
  p_output1[32]=t10616*t10672 + t10676*t10775 + t10787*t6126 + t10778*t6299 - 1.11344*(t10804*t6396 - 1.*t10792*t6536) - 0.02159*(t10792*t6396 + t10804*t6536) + t10804*t6571 + t10792*t6793;
  p_output1[33]=t10817*t10821 + t10686*t10824 - 1.11344*(t10832 + t10830*t6396) - 0.02159*(t10844 + t10830*t6536) + t10830*t6571 + t10827*t6793;
  p_output1[34]=-1.11344*(t10873 + t10869*t6396) + t10869*t6571 + t10817*t7599 + t10824*t7603 + t6793*t7613 - 0.02159*(t10869*t6536 + t7699);
  p_output1[35]=t10787*t10824 + t10817*t10894 - 1.11344*(t10915 + t10913*t6396) - 0.02159*(t10926 + t10913*t6536) + t10913*t6571 + t10907*t6793;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=t10827*t10935 + t10943*t10947 - 1.11344*(t10832 - 1.*t10947*t6396) - 0.02159*(t10844 - 1.*t10947*t6536);
  p_output1[40]=t10935*t7613 + t10943*t7638 - 1.11344*(t10873 - 1.*t6396*t7638) - 0.02159*t7707;
  p_output1[41]=t10907*t10935 + t10943*t10967 - 1.11344*(t10915 - 1.*t10967*t6396) - 0.02159*(t10926 - 1.*t10967*t6536);
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 22, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void J_leftToe_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




