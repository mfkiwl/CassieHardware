/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:19:36 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "DLfya_LeftStanceActual.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t48;
  double t283;
  double t305;
  double t310;
  double t351;
  double t632;
  double t839;
  double t845;
  double t850;
  double t857;
  double t910;
  double t1017;
  double t1262;
  double t1294;
  double t1305;
  double t1881;
  double t1999;
  double t2049;
  double t2091;
  double t2150;
  double t2159;
  double t2394;
  double t2547;
  double t2599;
  double t2680;
  double t2796;
  double t2856;
  double t2882;
  double t682;
  double t705;
  double t824;
  double t340;
  double t377;
  double t496;
  double t1581;
  double t1631;
  double t1799;
  double t945;
  double t1063;
  double t1152;
  double t2733;
  double t2734;
  double t2783;
  double t3245;
  double t3260;
  double t3292;
  double t2339;
  double t2476;
  double t2537;
  double t3338;
  double t3362;
  double t3368;
  double t3373;
  double t3377;
  double t2915;
  double t2918;
  double t2926;
  double t237;
  double t618;
  double t652;
  double t832;
  double t1580;
  double t2081;
  double t2682;
  double t2883;
  double t2978;
  double t2980;
  double t2984;
  double t3000;
  double t3002;
  double t3015;
  double t3042;
  double t3066;
  double t3132;
  double t3197;
  double t3299;
  double t3328;
  double t3366;
  double t3379;
  double t3418;
  double t3426;
  double t3485;
  double t3548;
  double t3563;
  double t3591;
  double t3604;
  double t3613;
  double t3618;
  double t3958;
  double t4045;
  double t3744;
  double t3788;
  double t3835;
  double t5013;
  double t5017;
  double t5018;
  double t5044;
  double t5063;
  double t5093;
  double t5150;
  double t5152;
  double t3022;
  double t3701;
  double t3714;
  double t3721;
  double t4868;
  double t4907;
  double t4951;
  double t4962;
  double t4973;
  double t4993;
  double t5020;
  double t5105;
  double t5166;
  double t5199;
  double t5217;
  double t5230;
  double t5253;
  double t5331;
  double t5430;
  double t5464;
  double t5492;
  double t5537;
  double t5564;
  double t5571;
  double t6005;
  double t6034;
  double t6066;
  double t6070;
  double t5661;
  double t3944;
  double t4105;
  double t4170;
  double t4178;
  double t4266;
  double t4289;
  double t4308;
  double t4328;
  double t4367;
  double t4380;
  double t4471;
  double t4472;
  double t4490;
  double t4600;
  double t4614;
  double t4748;
  double t6753;
  double t6771;
  double t6677;
  double t6680;
  double t6684;
  double t6669;
  double t6670;
  double t6736;
  double t6737;
  double t6747;
  double t6703;
  double t6715;
  double t7501;
  double t7505;
  double t6671;
  double t6691;
  double t6728;
  double t6752;
  double t6766;
  double t6776;
  double t6781;
  double t6826;
  double t6929;
  double t7008;
  double t7219;
  double t7299;
  double t7302;
  double t7330;
  double t7421;
  double t5940;
  double t5946;
  double t7463;
  double t7467;
  double t7468;
  double t7484;
  double t7504;
  double t7520;
  double t7521;
  double t7537;
  double t7548;
  double t7551;
  double t7553;
  double t7558;
  double t7559;
  double t7560;
  double t7563;
  double t4346;
  double t4819;
  double t4845;
  double t7426;
  double t7566;
  double t7578;
  double t7580;
  double t7585;
  double t7638;
  double t7642;
  double t7643;
  double t7645;
  double t7646;
  double t7651;
  double t7653;
  double t7661;
  double t7804;
  double t7809;
  double t7815;
  double t7820;
  double t7778;
  double t7780;
  double t7781;
  double t7798;
  double t7799;
  double t7802;
  double t7866;
  double t7871;
  double t7875;
  double t7887;
  double t8011;
  double t8012;
  double t8016;
  double t6372;
  double t6381;
  double t6385;
  double t6438;
  double t6486;
  double t6498;
  double t6555;
  double t6577;
  double t6586;
  double t6596;
  double t6601;
  double t6621;
  double t6623;
  double t7681;
  double t7682;
  double t7683;
  double t7686;
  double t7690;
  double t7694;
  double t7696;
  double t7700;
  double t7704;
  double t7712;
  double t7721;
  double t7726;
  double t7736;
  double t7742;
  double t7748;
  double t7757;
  double t7758;
  double t7760;
  double t7761;
  double t7766;
  double t7768;
  double t8089;
  double t8098;
  double t8112;
  double t8114;
  double t8116;
  double t8124;
  double t8136;
  double t8137;
  double t8138;
  double t8139;
  double t8141;
  double t8145;
  double t8155;
  double t8159;
  double t8163;
  double t8171;
  double t8173;
  double t8174;
  double t8185;
  double t8186;
  double t8187;
  double t8189;
  double t8195;
  double t8196;
  double t8198;
  double t8176;
  double t8177;
  double t8180;
  double t8121;
  double t8126;
  double t8127;
  double t8130;
  double t8132;
  double t8133;
  double t8167;
  double t8169;
  double t8170;
  double t8143;
  double t8146;
  double t8149;
  double t8234;
  double t8236;
  double t8240;
  double t8188;
  double t8190;
  double t8193;
  double t8199;
  double t8202;
  double t8203;
  double t8244;
  double t8245;
  double t8247;
  double t8249;
  double t8250;
  double t8205;
  double t8207;
  double t8208;
  double t8094;
  double t8103;
  double t8129;
  double t8135;
  double t8164;
  double t8175;
  double t8194;
  double t8204;
  double t8210;
  double t8213;
  double t8214;
  double t8217;
  double t8219;
  double t8221;
  double t8228;
  double t8230;
  double t8231;
  double t8232;
  double t8242;
  double t8243;
  double t8248;
  double t8251;
  double t8254;
  double t8255;
  double t8258;
  double t8261;
  double t8262;
  double t8263;
  double t8264;
  double t8266;
  double t8268;
  double t8272;
  double t8273;
  double t8275;
  double t8276;
  double t8277;
  double t8315;
  double t8316;
  double t8317;
  double t8319;
  double t8320;
  double t8322;
  double t8323;
  double t8325;
  double t8225;
  double t8269;
  double t8270;
  double t8271;
  double t8302;
  double t8306;
  double t8310;
  double t8311;
  double t8312;
  double t8314;
  double t8318;
  double t8321;
  double t8326;
  double t8328;
  double t8331;
  double t8332;
  double t8333;
  double t8334;
  double t8335;
  double t8337;
  double t8338;
  double t8339;
  double t8341;
  double t8342;
  double t8365;
  double t8366;
  double t8362;
  double t8363;
  double t8350;
  double t8274;
  double t8278;
  double t8279;
  double t8280;
  double t8281;
  double t8282;
  double t8283;
  double t8284;
  double t8286;
  double t8288;
  double t8290;
  double t8291;
  double t8292;
  double t8295;
  double t8296;
  double t8298;
  double t8436;
  double t8438;
  double t8416;
  double t8418;
  double t8421;
  double t8422;
  double t8423;
  double t8430;
  double t8431;
  double t8433;
  double t8425;
  double t8427;
  double t8456;
  double t8462;
  double t8420;
  double t8424;
  double t8429;
  double t8434;
  double t8437;
  double t8439;
  double t8440;
  double t8441;
  double t8442;
  double t8444;
  double t8445;
  double t8446;
  double t8447;
  double t8448;
  double t8450;
  double t8360;
  double t8361;
  double t8452;
  double t8453;
  double t8454;
  double t8455;
  double t8459;
  double t8463;
  double t8464;
  double t8465;
  double t8466;
  double t8467;
  double t8468;
  double t8469;
  double t8471;
  double t8473;
  double t8474;
  double t8355;
  double t8356;
  double t8357;
  double t8358;
  double t8503;
  double t8505;
  double t8506;
  double t8507;
  double t8510;
  double t8513;
  double t8514;
  double t8515;
  double t8517;
  double t8518;
  double t8521;
  double t8522;
  double t8523;
  double t8524;
  double t8525;
  double t8528;
  double t8530;
  double t8532;
  double t8533;
  double t8536;
  double t8538;
  double t8539;
  double t8540;
  double t8399;
  double t8401;
  double t8403;
  double t8545;
  double t8546;
  double t8557;
  double t8558;
  double t8559;
  double t8569;
  double t8572;
  double t8573;
  double t8574;
  double t8576;
  double t8578;
  double t8580;
  double t8581;
  double t8582;
  double t8583;
  double t8584;
  double t8368;
  double t8369;
  double t8370;
  double t8374;
  double t8375;
  double t8376;
  double t8592;
  double t8593;
  double t8483;
  double t8484;
  double t8618;
  double t8620;
  double t8621;
  double t8622;
  double t8634;
  double t8635;
  double t8636;
  double t8637;
  double t8638;
  double t8639;
  double t8640;
  double t8641;
  double t8642;
  double t8629;
  double t8630;
  double t8631;
  double t8285;
  double t8299;
  double t8301;
  double t8451;
  double t8477;
  double t8480;
  double t8482;
  double t8485;
  double t8486;
  double t8487;
  double t8490;
  double t8492;
  double t8494;
  double t8497;
  double t8740;
  double t8743;
  double t8745;
  double t8747;
  double t8719;
  double t8724;
  double t8726;
  double t8733;
  double t8735;
  double t8737;
  double t8775;
  double t8769;
  double t8770;
  double t8771;
  double t8671;
  double t8673;
  double t8678;
  double t8695;
  double t8696;
  double t8697;
  double t8820;
  double t8821;
  double t8824;
  double t8615;
  double t8616;
  double t8623;
  double t8627;
  double t8643;
  double t8749;
  double t8751;
  double t8753;
  double t8756;
  double t8759;
  double t8761;
  double t8777;
  double t8778;
  double t8780;
  double t8783;
  double t8785;
  double t8787;
  double t8898;
  double t8899;
  double t8902;
  double t8388;
  double t8391;
  double t8393;
  double t8394;
  double t8398;
  double t8404;
  double t8405;
  double t8407;
  double t8409;
  double t8410;
  double t8666;
  double t8667;
  double t8680;
  double t8682;
  double t8683;
  double t8684;
  double t8686;
  double t8689;
  double t8691;
  double t8694;
  double t8698;
  double t8704;
  double t8706;
  double t8707;
  double t8708;
  double t8939;
  double t8940;
  double t8941;
  double t8905;
  double t8906;
  double t8907;
  double t8917;
  double t8918;
  double t8920;
  double t8541;
  double t8562;
  double t8564;
  double t8565;
  double t8566;
  double t8567;
  double t8568;
  double t8800;
  double t8801;
  double t8803;
  double t8804;
  double t8805;
  double t8807;
  double t8810;
  double t8811;
  double t8813;
  double t8815;
  double t8816;
  double t8817;
  t48 = Cos(var1[8]);
  t283 = Cos(var1[9]);
  t305 = -1.*t283;
  t310 = 1. + t305;
  t351 = Sin(var1[9]);
  t632 = Sin(var1[8]);
  t839 = -1.*var1[9];
  t845 = 0.226893 + t839;
  t850 = Cos(t845);
  t857 = -1.*t850;
  t910 = 1. + t857;
  t1017 = Sin(t845);
  t1262 = -1.*t48*t351;
  t1294 = -1.*t283*t632;
  t1305 = t1262 + t1294;
  t1881 = t283*t48;
  t1999 = -1.*t351*t632;
  t2049 = t1881 + t1999;
  t2091 = Cos(var1[13]);
  t2150 = -1.*t2091;
  t2159 = 1. + t2150;
  t2394 = Sin(var1[13]);
  t2547 = t1017*t1305;
  t2599 = t850*t2049;
  t2680 = t2547 + t2599;
  t2796 = t850*t1305;
  t2856 = -1.*t1017*t2049;
  t2882 = t2796 + t2856;
  t682 = -0.21*t310;
  t705 = 0.049*t351;
  t824 = t682 + t705;
  t340 = -0.049*t310;
  t377 = -0.21*t351;
  t496 = t340 + t377;
  t1581 = 0.01841*t910;
  t1631 = -0.70544*t1017;
  t1799 = t1581 + t1631;
  t945 = -0.70544*t910;
  t1063 = -0.01841*t1017;
  t1152 = t945 + t1063;
  t2733 = -1.11344*t2159;
  t2734 = 0.02159*t2394;
  t2783 = t2733 + t2734;
  t3245 = t48*t351;
  t3260 = t283*t632;
  t3292 = t3245 + t3260;
  t2339 = -0.02159*t2159;
  t2476 = -1.11344*t2394;
  t2537 = t2339 + t2476;
  t3338 = -1.*t1017*t3292;
  t3362 = t3338 + t2599;
  t3368 = t850*t3292;
  t3373 = t1017*t2049;
  t3377 = t3368 + t3373;
  t2915 = -1.*t2394*t2680;
  t2918 = t2091*t2882;
  t2926 = t2915 + t2918;
  t237 = 0.049*t48;
  t618 = t48*t496;
  t652 = -0.09*t632;
  t832 = -1.*t824*t632;
  t1580 = t1152*t1305;
  t2081 = t1799*t2049;
  t2682 = t2537*t2680;
  t2883 = t2783*t2882;
  t2978 = -1.11344*t2926;
  t2980 = t2091*t2680;
  t2984 = t2394*t2882;
  t3000 = t2980 + t2984;
  t3002 = -0.02159*t3000;
  t3015 = t237 + t618 + t652 + t832 + t1580 + t2081 + t2682 + t2883 + t2978 + t3002;
  t3042 = 0.09*t48;
  t3066 = t48*t824;
  t3132 = 0.049*t632;
  t3197 = t496*t632;
  t3299 = t1799*t3292;
  t3328 = t1152*t2049;
  t3366 = t2783*t3362;
  t3379 = t2537*t3377;
  t3418 = t2394*t3362;
  t3426 = t2091*t3377;
  t3485 = t3418 + t3426;
  t3548 = -0.02159*t3485;
  t3563 = t2091*t3362;
  t3591 = -1.*t2394*t3377;
  t3604 = t3563 + t3591;
  t3613 = -1.11344*t3604;
  t3618 = t3042 + t3066 + t3132 + t3197 + t3299 + t3328 + t3366 + t3379 + t3548 + t3613;
  t3958 = 0.02159*t2091;
  t4045 = t3958 + t2476;
  t3744 = -1.11344*t2091;
  t3788 = -0.02159*t2394;
  t3835 = t3744 + t3788;
  t5013 = -1.*t283*t48;
  t5017 = t351*t632;
  t5018 = t5013 + t5017;
  t5044 = -1.*t1017*t1305;
  t5063 = t850*t5018;
  t5093 = t5044 + t5063;
  t5150 = t1017*t5018;
  t5152 = t2796 + t5150;
  t3022 = Power(t3015,2);
  t3701 = Power(t3618,2);
  t3714 = 0.00002025 + t3022 + t3701;
  t3721 = Power(t3714,-1.5);
  t4868 = 2.*t3015*t3618;
  t4907 = -0.09*t48;
  t4951 = -1.*t48*t824;
  t4962 = -0.049*t632;
  t4973 = -1.*t496*t632;
  t4993 = t1799*t1305;
  t5020 = t1152*t5018;
  t5105 = t2783*t5093;
  t5166 = t2537*t5152;
  t5199 = t2394*t5093;
  t5217 = t2091*t5152;
  t5230 = t5199 + t5217;
  t5253 = -0.02159*t5230;
  t5331 = t2091*t5093;
  t5430 = -1.*t2394*t5152;
  t5464 = t5331 + t5430;
  t5492 = -1.11344*t5464;
  t5537 = t4907 + t4951 + t4962 + t4973 + t4993 + t5020 + t5105 + t5166 + t5253 + t5492;
  t5564 = 2.*t3015*t5537;
  t5571 = t4868 + t5564;
  t6005 = t1017*t3292;
  t6034 = t6005 + t5063;
  t6066 = -1.*t1017*t5018;
  t6070 = t3368 + t6066;
  t5661 = 1/Sqrt(t3714);
  t3944 = t3835*t2680;
  t4105 = t4045*t2882;
  t4170 = -0.02159*t2926;
  t4178 = -1.*t2091*t2680;
  t4266 = -1.*t2394*t2882;
  t4289 = t4178 + t4266;
  t4308 = -1.11344*t4289;
  t4328 = t3944 + t4105 + t4170 + t4308;
  t4367 = t4045*t3362;
  t4380 = t3835*t3377;
  t4471 = -1.*t2394*t3362;
  t4472 = -1.*t2091*t3377;
  t4490 = t4471 + t4472;
  t4600 = -1.11344*t4490;
  t4614 = -0.02159*t3604;
  t4748 = t4367 + t4380 + t4600 + t4614;
  t6753 = t2796 + t3368;
  t6771 = t2547 + t6005;
  t6677 = -0.21*t283;
  t6680 = -0.049*t351;
  t6684 = t6677 + t6680;
  t6669 = 0.049*t283;
  t6670 = t6669 + t377;
  t6736 = 0.01841*t850;
  t6737 = 0.70544*t1017;
  t6747 = t6736 + t6737;
  t6703 = 0.70544*t850;
  t6715 = t6703 + t1063;
  t7501 = t2599 + t5063;
  t7505 = t3373 + t5150;
  t6671 = t48*t6670;
  t6691 = t6684*t632;
  t6728 = t6715*t3292;
  t6752 = t6747*t2049;
  t6766 = t2783*t6753;
  t6776 = t2537*t6771;
  t6781 = t2394*t6753;
  t6826 = t2091*t6771;
  t6929 = t6781 + t6826;
  t7008 = -0.02159*t6929;
  t7219 = t2091*t6753;
  t7299 = -1.*t2394*t6771;
  t7302 = t7219 + t7299;
  t7330 = -1.11344*t7302;
  t7421 = t6671 + t6691 + t1580 + t6728 + t2081 + t6752 + t6766 + t6776 + t7008 + t7330;
  t5940 = t1152*t3292;
  t5946 = t1799*t5018;
  t7463 = t48*t6684;
  t7467 = -1.*t6670*t632;
  t7468 = t6747*t1305;
  t7484 = t6715*t2049;
  t7504 = t2783*t7501;
  t7520 = t2537*t7505;
  t7521 = t2394*t7501;
  t7537 = t2091*t7505;
  t7548 = t7521 + t7537;
  t7551 = -0.02159*t7548;
  t7553 = t2091*t7501;
  t7558 = -1.*t2394*t7505;
  t7559 = t7553 + t7558;
  t7560 = -1.11344*t7559;
  t7563 = t7463 + t7467 + t4993 + t7468 + t7484 + t5020 + t7504 + t7520 + t7551 + t7560;
  t4346 = 2.*t4328*t3015;
  t4819 = 2.*t3618*t4748;
  t4845 = t4346 + t4819;
  t7426 = 2.*t7421*t3618;
  t7566 = 2.*t3015*t7563;
  t7578 = t7426 + t7566;
  t7580 = 2.*t7421*t3015;
  t7585 = -1.*t48*t6670;
  t7638 = -1.*t6684*t632;
  t7642 = t6715*t1305;
  t7643 = t6747*t5018;
  t7645 = t7585 + t7638 + t7642 + t5940 + t5946 + t7643 + t6766 + t6776 + t7008 + t7330;
  t7646 = 2.*t7645*t3015;
  t7651 = 2.*t3618*t7563;
  t7653 = 2.*t5537*t7563;
  t7661 = t7580 + t7646 + t7651 + t7653;
  t7804 = t2547 + t6005 + t2599 + t5063;
  t7809 = -1.*t850*t1305;
  t7815 = -1.*t850*t3292;
  t7820 = t7809 + t7815 + t3373 + t5150;
  t7778 = -0.049*t283;
  t7780 = 0.21*t351;
  t7781 = t7778 + t7780;
  t7798 = -0.70544*t850;
  t7799 = 0.01841*t1017;
  t7802 = t7798 + t7799;
  t7866 = -1.*t850*t2049;
  t7871 = -1.*t850*t5018;
  t7875 = t2547 + t6005 + t7866 + t7871;
  t7887 = t2796 + t3368 + t3373 + t5150;
  t8011 = -0.02159*t2091;
  t8012 = 1.11344*t2394;
  t8016 = t8011 + t8012;
  t6372 = 2.*t4328*t3618;
  t6381 = 2.*t3015*t4748;
  t6385 = 2.*t4328*t5537;
  t6438 = t4045*t5093;
  t6486 = t3835*t5152;
  t6498 = -1.*t2394*t5093;
  t6555 = -1.*t2091*t5152;
  t6577 = t6498 + t6555;
  t6586 = -1.11344*t6577;
  t6596 = -0.02159*t5464;
  t6601 = t6438 + t6486 + t6586 + t6596;
  t6621 = 2.*t3015*t6601;
  t6623 = t6372 + t6381 + t6385 + t6621;
  t7681 = t4045*t6753;
  t7682 = t3835*t6771;
  t7683 = -1.*t2394*t6753;
  t7686 = -1.*t2091*t6771;
  t7690 = t7683 + t7686;
  t7694 = -1.11344*t7690;
  t7696 = -0.02159*t7302;
  t7700 = t7681 + t7682 + t7694 + t7696;
  t7704 = 2.*t7700*t3618;
  t7712 = 2.*t7421*t4748;
  t7721 = 2.*t4328*t7563;
  t7726 = t4045*t7501;
  t7736 = t3835*t7505;
  t7742 = -1.*t2394*t7501;
  t7748 = -1.*t2091*t7505;
  t7757 = t7742 + t7748;
  t7758 = -1.11344*t7757;
  t7760 = -0.02159*t7559;
  t7761 = t7726 + t7736 + t7758 + t7760;
  t7766 = 2.*t3015*t7761;
  t7768 = t7704 + t7712 + t7721 + t7766;
  t8089 = Cos(var1[16]);
  t8098 = Sin(var1[16]);
  t8112 = Cos(var1[17]);
  t8114 = -1.*t8112;
  t8116 = 1. + t8114;
  t8124 = Sin(var1[17]);
  t8136 = -1.*var1[17];
  t8137 = 0.226893 + t8136;
  t8138 = Cos(t8137);
  t8139 = -1.*t8138;
  t8141 = 1. + t8139;
  t8145 = Sin(t8137);
  t8155 = -1.*t8112*t8098;
  t8159 = -1.*t8089*t8124;
  t8163 = t8155 + t8159;
  t8171 = t8089*t8112;
  t8173 = -1.*t8098*t8124;
  t8174 = t8171 + t8173;
  t8185 = Cos(var1[21]);
  t8186 = -1.*t8185;
  t8187 = 1. + t8186;
  t8189 = Sin(var1[21]);
  t8195 = t8138*t8163;
  t8196 = -1.*t8145*t8174;
  t8198 = t8195 + t8196;
  t8176 = t8145*t8163;
  t8177 = t8138*t8174;
  t8180 = t8176 + t8177;
  t8121 = -0.049*t8116;
  t8126 = -0.21*t8124;
  t8127 = t8121 + t8126;
  t8130 = -0.21*t8116;
  t8132 = 0.049*t8124;
  t8133 = t8130 + t8132;
  t8167 = 0.01841*t8141;
  t8169 = -0.70544*t8145;
  t8170 = t8167 + t8169;
  t8143 = -0.70544*t8141;
  t8146 = -0.01841*t8145;
  t8149 = t8143 + t8146;
  t8234 = t8112*t8098;
  t8236 = t8089*t8124;
  t8240 = t8234 + t8236;
  t8188 = -0.02159*t8187;
  t8190 = -1.11344*t8189;
  t8193 = t8188 + t8190;
  t8199 = -1.11344*t8187;
  t8202 = 0.02159*t8189;
  t8203 = t8199 + t8202;
  t8244 = t8138*t8240;
  t8245 = t8145*t8174;
  t8247 = t8244 + t8245;
  t8249 = -1.*t8145*t8240;
  t8250 = t8249 + t8177;
  t8205 = t8185*t8198;
  t8207 = -1.*t8180*t8189;
  t8208 = t8205 + t8207;
  t8094 = 0.049*t8089;
  t8103 = -0.09*t8098;
  t8129 = t8089*t8127;
  t8135 = -1.*t8098*t8133;
  t8164 = t8149*t8163;
  t8175 = t8170*t8174;
  t8194 = t8180*t8193;
  t8204 = t8198*t8203;
  t8210 = -1.11344*t8208;
  t8213 = t8185*t8180;
  t8214 = t8198*t8189;
  t8217 = t8213 + t8214;
  t8219 = -0.02159*t8217;
  t8221 = t8094 + t8103 + t8129 + t8135 + t8164 + t8175 + t8194 + t8204 + t8210 + t8219;
  t8228 = 0.09*t8089;
  t8230 = 0.049*t8098;
  t8231 = t8098*t8127;
  t8232 = t8089*t8133;
  t8242 = t8170*t8240;
  t8243 = t8149*t8174;
  t8248 = t8247*t8193;
  t8251 = t8250*t8203;
  t8254 = t8185*t8247;
  t8255 = t8250*t8189;
  t8258 = t8254 + t8255;
  t8261 = -0.02159*t8258;
  t8262 = t8185*t8250;
  t8263 = -1.*t8247*t8189;
  t8264 = t8262 + t8263;
  t8266 = -1.11344*t8264;
  t8268 = t8228 + t8230 + t8231 + t8232 + t8242 + t8243 + t8248 + t8251 + t8261 + t8266;
  t8272 = 0.02159*t8185;
  t8273 = t8272 + t8190;
  t8275 = -1.11344*t8185;
  t8276 = -0.02159*t8189;
  t8277 = t8275 + t8276;
  t8315 = -1.*t8089*t8112;
  t8316 = t8098*t8124;
  t8317 = t8315 + t8316;
  t8319 = t8145*t8317;
  t8320 = t8195 + t8319;
  t8322 = -1.*t8145*t8163;
  t8323 = t8138*t8317;
  t8325 = t8322 + t8323;
  t8225 = Power(t8221,2);
  t8269 = Power(t8268,2);
  t8270 = 0.00002025 + t8225 + t8269;
  t8271 = Power(t8270,-1.5);
  t8302 = 2.*t8221*t8268;
  t8306 = -0.09*t8089;
  t8310 = -0.049*t8098;
  t8311 = -1.*t8098*t8127;
  t8312 = -1.*t8089*t8133;
  t8314 = t8170*t8163;
  t8318 = t8149*t8317;
  t8321 = t8320*t8193;
  t8326 = t8325*t8203;
  t8328 = t8185*t8320;
  t8331 = t8325*t8189;
  t8332 = t8328 + t8331;
  t8333 = -0.02159*t8332;
  t8334 = t8185*t8325;
  t8335 = -1.*t8320*t8189;
  t8337 = t8334 + t8335;
  t8338 = -1.11344*t8337;
  t8339 = t8306 + t8310 + t8311 + t8312 + t8314 + t8318 + t8321 + t8326 + t8333 + t8338;
  t8341 = 2.*t8221*t8339;
  t8342 = t8302 + t8341;
  t8365 = -1.*t8145*t8317;
  t8366 = t8244 + t8365;
  t8362 = t8145*t8240;
  t8363 = t8362 + t8323;
  t8350 = 1/Sqrt(t8270);
  t8274 = t8198*t8273;
  t8278 = t8180*t8277;
  t8279 = -0.02159*t8208;
  t8280 = -1.*t8185*t8180;
  t8281 = -1.*t8198*t8189;
  t8282 = t8280 + t8281;
  t8283 = -1.11344*t8282;
  t8284 = t8274 + t8278 + t8279 + t8283;
  t8286 = t8250*t8273;
  t8288 = t8247*t8277;
  t8290 = -1.*t8185*t8247;
  t8291 = -1.*t8250*t8189;
  t8292 = t8290 + t8291;
  t8295 = -1.11344*t8292;
  t8296 = -0.02159*t8264;
  t8298 = t8286 + t8288 + t8295 + t8296;
  t8436 = t8176 + t8362;
  t8438 = t8195 + t8244;
  t8416 = 0.049*t8112;
  t8418 = t8416 + t8126;
  t8421 = -0.21*t8112;
  t8422 = -0.049*t8124;
  t8423 = t8421 + t8422;
  t8430 = 0.01841*t8138;
  t8431 = 0.70544*t8145;
  t8433 = t8430 + t8431;
  t8425 = 0.70544*t8138;
  t8427 = t8425 + t8146;
  t8456 = t8245 + t8319;
  t8462 = t8177 + t8323;
  t8420 = t8089*t8418;
  t8424 = t8098*t8423;
  t8429 = t8427*t8240;
  t8434 = t8433*t8174;
  t8437 = t8436*t8193;
  t8439 = t8438*t8203;
  t8440 = t8185*t8436;
  t8441 = t8438*t8189;
  t8442 = t8440 + t8441;
  t8444 = -0.02159*t8442;
  t8445 = t8185*t8438;
  t8446 = -1.*t8436*t8189;
  t8447 = t8445 + t8446;
  t8448 = -1.11344*t8447;
  t8450 = t8420 + t8424 + t8164 + t8429 + t8175 + t8434 + t8437 + t8439 + t8444 + t8448;
  t8360 = t8149*t8240;
  t8361 = t8170*t8317;
  t8452 = -1.*t8098*t8418;
  t8453 = t8089*t8423;
  t8454 = t8433*t8163;
  t8455 = t8427*t8174;
  t8459 = t8456*t8193;
  t8463 = t8462*t8203;
  t8464 = t8185*t8456;
  t8465 = t8462*t8189;
  t8466 = t8464 + t8465;
  t8467 = -0.02159*t8466;
  t8468 = t8185*t8462;
  t8469 = -1.*t8456*t8189;
  t8471 = t8468 + t8469;
  t8473 = -1.11344*t8471;
  t8474 = t8452 + t8453 + t8314 + t8454 + t8455 + t8318 + t8459 + t8463 + t8467 + t8473;
  t8355 = -0.049*t8089;
  t8356 = 0.09*t8098;
  t8357 = -1.*t8089*t8127;
  t8358 = t8098*t8133;
  t8503 = -1.*t8198*t8273;
  t8505 = -1.*t8180*t8277;
  t8506 = 0.02159*t8208;
  t8507 = 1.11344*t8282;
  t8510 = t8503 + t8505 + t8506 + t8507;
  t8513 = -1.*t8149*t8163;
  t8514 = -1.*t8170*t8174;
  t8515 = -1.*t8180*t8193;
  t8517 = -1.*t8198*t8203;
  t8518 = 1.11344*t8208;
  t8521 = 0.02159*t8217;
  t8522 = t8355 + t8356 + t8357 + t8358 + t8513 + t8514 + t8515 + t8517 + t8518 + t8521;
  t8523 = Power(t8522,2);
  t8524 = -1.*t8170*t8240;
  t8525 = -1.*t8149*t8174;
  t8528 = -1.*t8247*t8193;
  t8530 = -1.*t8250*t8203;
  t8532 = 0.02159*t8258;
  t8533 = 1.11344*t8264;
  t8536 = t8306 + t8310 + t8311 + t8312 + t8524 + t8525 + t8528 + t8530 + t8532 + t8533;
  t8538 = Power(t8536,2);
  t8539 = t8523 + t8538;
  t8540 = 1/t8539;
  t8399 = -1.*t8185*t8320;
  t8401 = -1.*t8325*t8189;
  t8403 = t8399 + t8401;
  t8545 = -1.*t8250*t8273;
  t8546 = -1.*t8247*t8277;
  t8557 = 1.11344*t8292;
  t8558 = 0.02159*t8264;
  t8559 = t8545 + t8546 + t8557 + t8558;
  t8569 = Power(t8539,-2);
  t8572 = 2.*t8522*t8536;
  t8573 = -1.*t8170*t8163;
  t8574 = -1.*t8149*t8317;
  t8576 = -1.*t8320*t8193;
  t8578 = -1.*t8325*t8203;
  t8580 = 0.02159*t8332;
  t8581 = 1.11344*t8337;
  t8582 = t8228 + t8230 + t8231 + t8232 + t8573 + t8574 + t8576 + t8578 + t8580 + t8581;
  t8583 = 2.*t8522*t8582;
  t8584 = t8572 + t8583;
  t8368 = t8185*t8366;
  t8369 = -1.*t8363*t8189;
  t8370 = t8368 + t8369;
  t8374 = t8185*t8363;
  t8375 = t8366*t8189;
  t8376 = t8374 + t8375;
  t8592 = -1.*t8149*t8240;
  t8593 = -1.*t8170*t8317;
  t8483 = -1.*t8089*t8418;
  t8484 = -1.*t8098*t8423;
  t8618 = -1.*t8436*t8193;
  t8620 = -1.*t8438*t8203;
  t8621 = 0.02159*t8442;
  t8622 = 1.11344*t8447;
  t8634 = t8098*t8418;
  t8635 = -1.*t8089*t8423;
  t8636 = -1.*t8433*t8163;
  t8637 = -1.*t8427*t8174;
  t8638 = -1.*t8456*t8193;
  t8639 = -1.*t8462*t8203;
  t8640 = 0.02159*t8466;
  t8641 = 1.11344*t8471;
  t8642 = t8634 + t8635 + t8573 + t8636 + t8637 + t8574 + t8638 + t8639 + t8640 + t8641;
  t8629 = -1.*t8427*t8240;
  t8630 = -1.*t8433*t8174;
  t8631 = t8483 + t8484 + t8513 + t8629 + t8514 + t8630 + t8618 + t8620 + t8621 + t8622;
  t8285 = 2.*t8284*t8221;
  t8299 = 2.*t8268*t8298;
  t8301 = t8285 + t8299;
  t8451 = 2.*t8450*t8268;
  t8477 = 2.*t8221*t8474;
  t8480 = t8451 + t8477;
  t8482 = 2.*t8450*t8221;
  t8485 = t8427*t8163;
  t8486 = t8433*t8317;
  t8487 = t8483 + t8484 + t8485 + t8360 + t8361 + t8486 + t8437 + t8439 + t8444 + t8448;
  t8490 = 2.*t8487*t8221;
  t8492 = 2.*t8268*t8474;
  t8494 = 2.*t8339*t8474;
  t8497 = t8482 + t8490 + t8492 + t8494;
  t8740 = -1.*t8138*t8163;
  t8743 = -1.*t8138*t8240;
  t8745 = t8740 + t8743 + t8245 + t8319;
  t8747 = t8176 + t8362 + t8177 + t8323;
  t8719 = -0.049*t8112;
  t8724 = 0.21*t8124;
  t8726 = t8719 + t8724;
  t8733 = -0.70544*t8138;
  t8735 = 0.01841*t8145;
  t8737 = t8733 + t8735;
  t8775 = t8195 + t8244 + t8245 + t8319;
  t8769 = -1.*t8138*t8174;
  t8770 = -1.*t8138*t8317;
  t8771 = t8176 + t8362 + t8769 + t8770;
  t8671 = -1.*t8185*t8436;
  t8673 = -1.*t8438*t8189;
  t8678 = t8671 + t8673;
  t8695 = -1.*t8185*t8456;
  t8696 = -1.*t8462*t8189;
  t8697 = t8695 + t8696;
  t8820 = 2.*t8631*t8536;
  t8821 = 2.*t8522*t8642;
  t8824 = t8820 + t8821;
  t8615 = -1.*t8427*t8163;
  t8616 = -1.*t8433*t8317;
  t8623 = t8420 + t8424 + t8615 + t8592 + t8593 + t8616 + t8618 + t8620 + t8621 + t8622;
  t8627 = t8623*t8536*t8540;
  t8643 = t8221*t8642*t8540;
  t8749 = t8185*t8745;
  t8751 = t8747*t8189;
  t8753 = t8749 + t8751;
  t8756 = t8185*t8747;
  t8759 = -1.*t8745*t8189;
  t8761 = t8756 + t8759;
  t8777 = t8185*t8775;
  t8778 = -1.*t8771*t8189;
  t8780 = t8777 + t8778;
  t8783 = t8185*t8771;
  t8785 = t8775*t8189;
  t8787 = t8783 + t8785;
  t8898 = -0.02159*t8185;
  t8899 = 1.11344*t8189;
  t8902 = t8898 + t8899;
  t8388 = 2.*t8284*t8268;
  t8391 = 2.*t8221*t8298;
  t8393 = 2.*t8284*t8339;
  t8394 = t8325*t8273;
  t8398 = t8320*t8277;
  t8404 = -1.11344*t8403;
  t8405 = -0.02159*t8337;
  t8407 = t8394 + t8398 + t8404 + t8405;
  t8409 = 2.*t8221*t8407;
  t8410 = t8388 + t8391 + t8393 + t8409;
  t8666 = t8438*t8273;
  t8667 = t8436*t8277;
  t8680 = -1.11344*t8678;
  t8682 = -0.02159*t8447;
  t8683 = t8666 + t8667 + t8680 + t8682;
  t8684 = 2.*t8683*t8268;
  t8686 = 2.*t8450*t8298;
  t8689 = 2.*t8284*t8474;
  t8691 = t8462*t8273;
  t8694 = t8456*t8277;
  t8698 = -1.11344*t8697;
  t8704 = -0.02159*t8471;
  t8706 = t8691 + t8694 + t8698 + t8704;
  t8707 = 2.*t8221*t8706;
  t8708 = t8684 + t8686 + t8689 + t8707;
  t8939 = 2.*t8510*t8522;
  t8940 = 2.*t8559*t8536;
  t8941 = t8939 + t8940;
  t8905 = -1.*t8185*t8198;
  t8906 = t8180*t8189;
  t8907 = t8905 + t8906;
  t8917 = -1.*t8185*t8250;
  t8918 = t8247*t8189;
  t8920 = t8917 + t8918;
  t8541 = t8510*t8221*t8540;
  t8562 = -1.*t8325*t8273;
  t8564 = -1.*t8320*t8277;
  t8565 = 1.11344*t8403;
  t8566 = 0.02159*t8337;
  t8567 = t8562 + t8564 + t8565 + t8566;
  t8568 = t8536*t8567*t8540;
  t8800 = -1.*t8438*t8273;
  t8801 = -1.*t8436*t8277;
  t8803 = 1.11344*t8678;
  t8804 = 0.02159*t8447;
  t8805 = t8800 + t8801 + t8803 + t8804;
  t8807 = t8805*t8221*t8540;
  t8810 = -1.*t8462*t8273;
  t8811 = -1.*t8456*t8277;
  t8813 = 1.11344*t8697;
  t8815 = 0.02159*t8471;
  t8816 = t8810 + t8811 + t8813 + t8815;
  t8817 = t8536*t8816*t8540;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=-0.25*t3721*Power(t5571,2)*var2[8] + 0.5*t5661*(2.*t3022 + 2.*t3618*t5537 + 2.*Power(t5537,2) + 2.*t3015*(-0.049*t48 - 1.*t48*t496 + t5940 + t5946 + t2537*t6034 + t2783*t6070 - 1.11344*(-1.*t2394*t6034 + t2091*t6070) - 0.02159*(t2091*t6034 + t2394*t6070) + 0.09*t632 + t632*t824))*var2[8] - 0.25*t3721*t5571*t7578*var2[9] + 0.5*t5661*t7661*var2[9] - 0.25*t3721*t4845*t5571*var2[13] + 0.5*t5661*t6623*var2[13];
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=-0.25*t3721*t5571*t7578*var2[8] + 0.5*t5661*t7661*var2[8] - 0.25*t3721*Power(t7578,2)*var2[9] + 0.5*t5661*(2.*Power(t7421,2) + 2.*Power(t7563,2) + 2.*t3618*(t4993 + t5020 + 2.*t2049*t6715 + 2.*t1305*t6747 + t3292*t6747 + t7463 + t632*t7781 + t2049*t7802 + t2783*t7804 + t2537*t7820 - 0.02159*(t2394*t7804 + t2091*t7820) - 1.11344*(t2091*t7804 - 1.*t2394*t7820)) + 2.*t3015*(t5940 + t5946 + 2.*t1305*t6715 + 2.*t5018*t6747 + t6752 + t7638 + t48*t7781 + t1305*t7802 + t2537*t7875 + t2783*t7887 - 1.11344*(-1.*t2394*t7875 + t2091*t7887) - 0.02159*(t2091*t7875 + t2394*t7887)))*var2[9] - 0.25*t3721*t4845*t7578*var2[13] + 0.5*t5661*t7768*var2[13];
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=-0.25*t3721*t4845*t5571*var2[8] + 0.5*t5661*t6623*var2[8] - 0.25*t3721*t4845*t7578*var2[9] + 0.5*t5661*t7768*var2[9] - 0.25*t3721*Power(t4845,2)*var2[13] + 0.5*t5661*(2.*Power(t4328,2) + 2.*Power(t4748,2) + 2.*t3015*(-1.11344*(t2394*t2680 - 1.*t2091*t2882) + t2882*t3835 - 0.02159*t4289 + t2680*t8016) + 2.*t3618*(-1.11344*(-1.*t2091*t3362 + t2394*t3377) + t3362*t3835 - 0.02159*t4490 + t3377*t8016))*var2[13];
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=-0.25*t8271*Power(t8342,2)*var2[16] + 0.5*t8350*(2.*t8225 + 2.*t8268*t8339 + 2.*Power(t8339,2) + 2.*t8221*(t8355 + t8356 + t8357 + t8358 + t8360 + t8361 + t8193*t8363 + t8203*t8366 - 1.11344*t8370 - 0.02159*t8376))*var2[16] - 0.25*t8271*t8342*t8480*var2[17] + 0.5*t8350*t8497*var2[17] - 0.25*t8271*t8301*t8342*var2[21] + 0.5*t8350*t8410*var2[21];
  p_output1[149]=(t8339*t8522*t8540 + t8221*t8540*t8582 + t8522*t8540*t8582 - 1.*t8221*t8522*t8569*t8584 - 1.*t8536*t8569*t8582*t8584 + t8536*t8540*(t8094 + t8103 + t8129 + t8135 - 1.*t8193*t8363 - 1.*t8203*t8366 + 1.11344*t8370 + 0.02159*t8376 + t8592 + t8593))*var2[16] + (t8627 + t8339*t8540*t8631 - 1.*t8221*t8569*t8584*t8631 + t8522*t8540*t8642 - 1.*t8536*t8569*t8584*t8642 + t8643)*var2[17] + (t8510*t8522*t8540 + t8541 + t8339*t8540*t8559 + t8568 - 1.*t8510*t8536*t8569*t8584 - 1.*t8221*t8559*t8569*t8584)*var2[21];
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=-0.25*t8271*t8342*t8480*var2[16] + 0.5*t8350*t8497*var2[16] - 0.25*t8271*Power(t8480,2)*var2[17] + 0.5*t8350*(2.*Power(t8450,2) + 2.*Power(t8474,2) + 2.*t8268*(t8314 + t8318 + 2.*t8174*t8427 + 2.*t8163*t8433 + t8240*t8433 + t8453 + t8098*t8726 + t8174*t8737 + t8193*t8745 + t8203*t8747 - 0.02159*t8753 - 1.11344*t8761) + 2.*t8221*(t8360 + t8361 + 2.*t8163*t8427 + 2.*t8317*t8433 + t8434 + t8484 + t8089*t8726 + t8163*t8737 + t8193*t8771 + t8203*t8775 - 1.11344*t8780 - 0.02159*t8787))*var2[17] - 0.25*t8271*t8301*t8480*var2[21] + 0.5*t8350*t8708*var2[21];
  p_output1[158]=(t8474*t8522*t8540 + t8627 + t8540*t8582*t8631 + t8643 - 1.*t8221*t8522*t8569*t8824 - 1.*t8536*t8569*t8582*t8824)*var2[16] + (t8474*t8540*t8631 + t8540*t8631*t8642 + t8221*t8540*(-2.*t8174*t8427 - 2.*t8163*t8433 - 1.*t8240*t8433 + t8573 + t8574 + t8635 - 1.*t8098*t8726 - 1.*t8174*t8737 - 1.*t8193*t8745 - 1.*t8203*t8747 + 0.02159*t8753 + 1.11344*t8761) + t8536*t8540*(t8424 - 2.*t8163*t8427 - 2.*t8317*t8433 + t8592 + t8593 + t8630 - 1.*t8089*t8726 - 1.*t8163*t8737 - 1.*t8193*t8771 - 1.*t8203*t8775 + 1.11344*t8780 + 0.02159*t8787) - 1.*t8221*t8569*t8631*t8824 - 1.*t8536*t8569*t8642*t8824)*var2[17] + (t8474*t8540*t8559 + t8510*t8540*t8631 + t8807 + t8817 - 1.*t8510*t8536*t8569*t8824 - 1.*t8221*t8559*t8569*t8824)*var2[21];
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=-0.25*t8271*t8301*t8342*var2[16] + 0.5*t8350*t8410*var2[16] - 0.25*t8271*t8301*t8480*var2[17] + 0.5*t8350*t8708*var2[17] - 0.25*t8271*Power(t8301,2)*var2[21] + 0.5*t8350*(2.*Power(t8284,2) + 2.*Power(t8298,2) + 2.*t8221*(t8198*t8277 - 0.02159*t8282 + t8180*t8902 - 1.11344*t8907) + 2.*t8268*(t8250*t8277 - 0.02159*t8292 + t8247*t8902 - 1.11344*t8920))*var2[21];
  p_output1[194]=(t8284*t8522*t8540 + t8541 + t8568 + t8540*t8559*t8582 - 1.*t8221*t8522*t8569*t8941 - 1.*t8536*t8569*t8582*t8941)*var2[16] + (t8284*t8540*t8631 + t8540*t8559*t8642 + t8807 + t8817 - 1.*t8221*t8569*t8631*t8941 - 1.*t8536*t8569*t8642*t8941)*var2[17] + (t8284*t8540*t8559 + t8510*t8540*t8559 + t8536*t8540*(-1.*t8198*t8277 + 0.02159*t8282 - 1.*t8180*t8902 + 1.11344*t8907) + t8221*t8540*(-1.*t8250*t8277 + 0.02159*t8292 - 1.*t8247*t8902 + 1.11344*t8920) - 1.*t8510*t8536*t8569*t8941 - 1.*t8221*t8559*t8569*t8941)*var2[21];
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=1.;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=1.;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=1.;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0.5*t5571*t5661;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0.5*t5661*t7578;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0.5*t4845*t5661;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=1.;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=1.;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0.5*t8342*t8350;
  p_output1[347]=t8221*t8522*t8540 + t8536*t8540*t8582;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0.5*t8350*t8480;
  p_output1[356]=t8221*t8540*t8631 + t8536*t8540*t8642;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0.5*t8301*t8350;
  p_output1[392]=t8510*t8536*t8540 + t8221*t8540*t8559;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=-1.;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 44, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void DLfya_LeftStanceActual_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




