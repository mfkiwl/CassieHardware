/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:54 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "DLfya_LeftStanceActual.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t78;
  double t126;
  double t244;
  double t348;
  double t447;
  double t505;
  double t590;
  double t644;
  double t653;
  double t667;
  double t704;
  double t749;
  double t927;
  double t949;
  double t966;
  double t1244;
  double t1292;
  double t1338;
  double t1379;
  double t1450;
  double t1483;
  double t1490;
  double t1595;
  double t1603;
  double t1664;
  double t1798;
  double t1837;
  double t1839;
  double t564;
  double t571;
  double t582;
  double t432;
  double t464;
  double t471;
  double t1124;
  double t1183;
  double t1211;
  double t720;
  double t752;
  double t860;
  double t1768;
  double t1775;
  double t1797;
  double t2234;
  double t2252;
  double t2279;
  double t1486;
  double t1586;
  double t1589;
  double t2311;
  double t2342;
  double t2403;
  double t2413;
  double t2419;
  double t1872;
  double t1879;
  double t1901;
  double t96;
  double t477;
  double t563;
  double t587;
  double t1111;
  double t1357;
  double t1719;
  double t1852;
  double t1926;
  double t1962;
  double t2014;
  double t2020;
  double t2036;
  double t2098;
  double t2135;
  double t2136;
  double t2141;
  double t2223;
  double t2287;
  double t2291;
  double t2375;
  double t2420;
  double t2447;
  double t2514;
  double t2526;
  double t2537;
  double t2578;
  double t2667;
  double t2767;
  double t2775;
  double t2784;
  double t2956;
  double t2989;
  double t2885;
  double t2896;
  double t2904;
  double t3463;
  double t3530;
  double t3540;
  double t3580;
  double t3581;
  double t3590;
  double t3651;
  double t3696;
  double t2125;
  double t2839;
  double t2849;
  double t2852;
  double t3396;
  double t3408;
  double t3412;
  double t3415;
  double t3432;
  double t3444;
  double t3572;
  double t3634;
  double t3706;
  double t3735;
  double t3756;
  double t3761;
  double t3811;
  double t3821;
  double t3859;
  double t3873;
  double t3876;
  double t3884;
  double t3923;
  double t3927;
  double t4256;
  double t4266;
  double t4305;
  double t4312;
  double t4035;
  double t2939;
  double t2994;
  double t3012;
  double t3026;
  double t3074;
  double t3082;
  double t3147;
  double t3167;
  double t3225;
  double t3237;
  double t3249;
  double t3270;
  double t3271;
  double t3299;
  double t3364;
  double t3365;
  double t5042;
  double t5072;
  double t4700;
  double t4712;
  double t4871;
  double t4694;
  double t4695;
  double t4999;
  double t5013;
  double t5033;
  double t4957;
  double t4965;
  double t5145;
  double t5207;
  double t4699;
  double t4907;
  double t4966;
  double t5036;
  double t5071;
  double t5076;
  double t5078;
  double t5080;
  double t5089;
  double t5090;
  double t5112;
  double t5118;
  double t5122;
  double t5124;
  double t5127;
  double t4206;
  double t4222;
  double t5131;
  double t5134;
  double t5135;
  double t5139;
  double t5146;
  double t5216;
  double t5243;
  double t5264;
  double t5300;
  double t5302;
  double t5319;
  double t5321;
  double t5337;
  double t5338;
  double t5340;
  double t3173;
  double t3388;
  double t3395;
  double t5129;
  double t5351;
  double t5356;
  double t5365;
  double t5380;
  double t5385;
  double t5388;
  double t5391;
  double t5392;
  double t5397;
  double t5398;
  double t5402;
  double t5404;
  double t5583;
  double t5585;
  double t5589;
  double t5590;
  double t5548;
  double t5554;
  double t5560;
  double t5571;
  double t5574;
  double t5576;
  double t5751;
  double t5752;
  double t5759;
  double t5770;
  double t5856;
  double t5858;
  double t5860;
  double t4569;
  double t4576;
  double t4601;
  double t4613;
  double t4615;
  double t4629;
  double t4650;
  double t4658;
  double t4660;
  double t4662;
  double t4666;
  double t4673;
  double t4692;
  double t5455;
  double t5456;
  double t5458;
  double t5462;
  double t5480;
  double t5481;
  double t5490;
  double t5491;
  double t5493;
  double t5499;
  double t5504;
  double t5508;
  double t5509;
  double t5510;
  double t5511;
  double t5513;
  double t5515;
  double t5518;
  double t5522;
  double t5526;
  double t5527;
  double t5935;
  double t5937;
  double t5941;
  double t5942;
  double t5944;
  double t5953;
  double t5980;
  double t5986;
  double t5990;
  double t5991;
  double t5995;
  double t5999;
  double t6012;
  double t6015;
  double t6024;
  double t6032;
  double t6034;
  double t6045;
  double t6054;
  double t6055;
  double t6059;
  double t6061;
  double t6069;
  double t6071;
  double t6073;
  double t6051;
  double t6052;
  double t6053;
  double t5952;
  double t5954;
  double t5958;
  double t5966;
  double t5970;
  double t5977;
  double t6026;
  double t6027;
  double t6030;
  double t5998;
  double t6002;
  double t6009;
  double t6119;
  double t6120;
  double t6121;
  double t6060;
  double t6064;
  double t6065;
  double t6075;
  double t6078;
  double t6080;
  double t6127;
  double t6128;
  double t6130;
  double t6133;
  double t6134;
  double t6087;
  double t6088;
  double t6089;
  double t5936;
  double t5940;
  double t5964;
  double t5978;
  double t6025;
  double t6046;
  double t6068;
  double t6086;
  double t6090;
  double t6091;
  double t6092;
  double t6096;
  double t6103;
  double t6106;
  double t6110;
  double t6112;
  double t6113;
  double t6118;
  double t6124;
  double t6125;
  double t6131;
  double t6135;
  double t6136;
  double t6137;
  double t6138;
  double t6139;
  double t6141;
  double t6142;
  double t6143;
  double t6144;
  double t6146;
  double t6158;
  double t6159;
  double t6164;
  double t6166;
  double t6167;
  double t6205;
  double t6208;
  double t6209;
  double t6211;
  double t6213;
  double t6219;
  double t6220;
  double t6221;
  double t6109;
  double t6151;
  double t6152;
  double t6153;
  double t6195;
  double t6197;
  double t6198;
  double t6202;
  double t6203;
  double t6204;
  double t6210;
  double t6215;
  double t6222;
  double t6225;
  double t6226;
  double t6229;
  double t6230;
  double t6232;
  double t6233;
  double t6234;
  double t6236;
  double t6238;
  double t6240;
  double t6242;
  double t6266;
  double t6267;
  double t6262;
  double t6263;
  double t6248;
  double t6163;
  double t6168;
  double t6169;
  double t6170;
  double t6171;
  double t6173;
  double t6174;
  double t6175;
  double t6177;
  double t6178;
  double t6179;
  double t6182;
  double t6183;
  double t6185;
  double t6186;
  double t6188;
  double t6349;
  double t6352;
  double t6324;
  double t6327;
  double t6329;
  double t6331;
  double t6334;
  double t6345;
  double t6346;
  double t6347;
  double t6341;
  double t6342;
  double t6381;
  double t6384;
  double t6328;
  double t6337;
  double t6343;
  double t6348;
  double t6351;
  double t6353;
  double t6354;
  double t6355;
  double t6357;
  double t6358;
  double t6359;
  double t6361;
  double t6364;
  double t6369;
  double t6370;
  double t6259;
  double t6260;
  double t6373;
  double t6377;
  double t6379;
  double t6380;
  double t6382;
  double t6385;
  double t6386;
  double t6387;
  double t6390;
  double t6391;
  double t6392;
  double t6393;
  double t6394;
  double t6395;
  double t6398;
  double t6251;
  double t6253;
  double t6255;
  double t6257;
  double t6422;
  double t6423;
  double t6425;
  double t6428;
  double t6430;
  double t6432;
  double t6433;
  double t6436;
  double t6439;
  double t6440;
  double t6441;
  double t6442;
  double t6444;
  double t6445;
  double t6448;
  double t6449;
  double t6450;
  double t6451;
  double t6453;
  double t6454;
  double t6455;
  double t6457;
  double t6461;
  double t6305;
  double t6307;
  double t6308;
  double t6465;
  double t6467;
  double t6468;
  double t6471;
  double t6473;
  double t6483;
  double t6485;
  double t6487;
  double t6489;
  double t6491;
  double t6492;
  double t6494;
  double t6495;
  double t6496;
  double t6497;
  double t6499;
  double t6270;
  double t6271;
  double t6274;
  double t6279;
  double t6280;
  double t6281;
  double t6509;
  double t6510;
  double t6407;
  double t6408;
  double t6531;
  double t6532;
  double t6533;
  double t6534;
  double t6542;
  double t6543;
  double t6544;
  double t6547;
  double t6548;
  double t6551;
  double t6552;
  double t6553;
  double t6554;
  double t6538;
  double t6539;
  double t6540;
  double t6176;
  double t6190;
  double t6194;
  double t6371;
  double t6401;
  double t6402;
  double t6405;
  double t6409;
  double t6410;
  double t6411;
  double t6412;
  double t6413;
  double t6414;
  double t6415;
  double t6629;
  double t6631;
  double t6632;
  double t6636;
  double t6612;
  double t6614;
  double t6616;
  double t6624;
  double t6625;
  double t6626;
  double t6669;
  double t6665;
  double t6666;
  double t6667;
  double t6576;
  double t6578;
  double t6579;
  double t6592;
  double t6593;
  double t6594;
  double t6713;
  double t6715;
  double t6716;
  double t6528;
  double t6529;
  double t6536;
  double t6537;
  double t6555;
  double t6640;
  double t6643;
  double t6644;
  double t6647;
  double t6649;
  double t6651;
  double t6672;
  double t6673;
  double t6674;
  double t6676;
  double t6677;
  double t6679;
  double t6785;
  double t6787;
  double t6788;
  double t6300;
  double t6301;
  double t6302;
  double t6303;
  double t6304;
  double t6309;
  double t6310;
  double t6313;
  double t6315;
  double t6316;
  double t6574;
  double t6575;
  double t6580;
  double t6582;
  double t6583;
  double t6584;
  double t6585;
  double t6586;
  double t6587;
  double t6588;
  double t6595;
  double t6596;
  double t6597;
  double t6598;
  double t6602;
  double t6849;
  double t6851;
  double t6852;
  double t6793;
  double t6794;
  double t6795;
  double t6815;
  double t6816;
  double t6818;
  double t6462;
  double t6475;
  double t6476;
  double t6478;
  double t6479;
  double t6480;
  double t6482;
  double t6694;
  double t6695;
  double t6696;
  double t6697;
  double t6698;
  double t6699;
  double t6703;
  double t6704;
  double t6705;
  double t6708;
  double t6710;
  double t6711;
  t78 = Cos(var1[8]);
  t126 = Cos(var1[9]);
  t244 = -1.*t126;
  t348 = 1. + t244;
  t447 = Sin(var1[9]);
  t505 = Sin(var1[8]);
  t590 = -1.*var1[9];
  t644 = 0.226893 + t590;
  t653 = Cos(t644);
  t667 = -1.*t653;
  t704 = 1. + t667;
  t749 = Sin(t644);
  t927 = -1.*t78*t447;
  t949 = -1.*t126*t505;
  t966 = t927 + t949;
  t1244 = t126*t78;
  t1292 = -1.*t447*t505;
  t1338 = t1244 + t1292;
  t1379 = Cos(var1[13]);
  t1450 = -1.*t1379;
  t1483 = 1. + t1450;
  t1490 = Sin(var1[13]);
  t1595 = t749*t966;
  t1603 = t653*t1338;
  t1664 = t1595 + t1603;
  t1798 = t653*t966;
  t1837 = -1.*t749*t1338;
  t1839 = t1798 + t1837;
  t564 = -0.21*t348;
  t571 = 0.049*t447;
  t582 = t564 + t571;
  t432 = -0.049*t348;
  t464 = -0.21*t447;
  t471 = t432 + t464;
  t1124 = 0.01841*t704;
  t1183 = -0.70544*t749;
  t1211 = t1124 + t1183;
  t720 = -0.70544*t704;
  t752 = -0.01841*t749;
  t860 = t720 + t752;
  t1768 = -1.11344*t1483;
  t1775 = 0.02159*t1490;
  t1797 = t1768 + t1775;
  t2234 = t78*t447;
  t2252 = t126*t505;
  t2279 = t2234 + t2252;
  t1486 = -0.02159*t1483;
  t1586 = -1.11344*t1490;
  t1589 = t1486 + t1586;
  t2311 = -1.*t749*t2279;
  t2342 = t2311 + t1603;
  t2403 = t653*t2279;
  t2413 = t749*t1338;
  t2419 = t2403 + t2413;
  t1872 = -1.*t1490*t1664;
  t1879 = t1379*t1839;
  t1901 = t1872 + t1879;
  t96 = 0.049*t78;
  t477 = t78*t471;
  t563 = -0.09*t505;
  t587 = -1.*t582*t505;
  t1111 = t860*t966;
  t1357 = t1211*t1338;
  t1719 = t1589*t1664;
  t1852 = t1797*t1839;
  t1926 = -1.11344*t1901;
  t1962 = t1379*t1664;
  t2014 = t1490*t1839;
  t2020 = t1962 + t2014;
  t2036 = -0.02159*t2020;
  t2098 = t96 + t477 + t563 + t587 + t1111 + t1357 + t1719 + t1852 + t1926 + t2036;
  t2135 = 0.09*t78;
  t2136 = t78*t582;
  t2141 = 0.049*t505;
  t2223 = t471*t505;
  t2287 = t1211*t2279;
  t2291 = t860*t1338;
  t2375 = t1797*t2342;
  t2420 = t1589*t2419;
  t2447 = t1490*t2342;
  t2514 = t1379*t2419;
  t2526 = t2447 + t2514;
  t2537 = -0.02159*t2526;
  t2578 = t1379*t2342;
  t2667 = -1.*t1490*t2419;
  t2767 = t2578 + t2667;
  t2775 = -1.11344*t2767;
  t2784 = t2135 + t2136 + t2141 + t2223 + t2287 + t2291 + t2375 + t2420 + t2537 + t2775;
  t2956 = 0.02159*t1379;
  t2989 = t2956 + t1586;
  t2885 = -1.11344*t1379;
  t2896 = -0.02159*t1490;
  t2904 = t2885 + t2896;
  t3463 = -1.*t126*t78;
  t3530 = t447*t505;
  t3540 = t3463 + t3530;
  t3580 = -1.*t749*t966;
  t3581 = t653*t3540;
  t3590 = t3580 + t3581;
  t3651 = t749*t3540;
  t3696 = t1798 + t3651;
  t2125 = Power(t2098,2);
  t2839 = Power(t2784,2);
  t2849 = 0.00002025 + t2125 + t2839;
  t2852 = Power(t2849,-1.5);
  t3396 = 2.*t2098*t2784;
  t3408 = -0.09*t78;
  t3412 = -1.*t78*t582;
  t3415 = -0.049*t505;
  t3432 = -1.*t471*t505;
  t3444 = t1211*t966;
  t3572 = t860*t3540;
  t3634 = t1797*t3590;
  t3706 = t1589*t3696;
  t3735 = t1490*t3590;
  t3756 = t1379*t3696;
  t3761 = t3735 + t3756;
  t3811 = -0.02159*t3761;
  t3821 = t1379*t3590;
  t3859 = -1.*t1490*t3696;
  t3873 = t3821 + t3859;
  t3876 = -1.11344*t3873;
  t3884 = t3408 + t3412 + t3415 + t3432 + t3444 + t3572 + t3634 + t3706 + t3811 + t3876;
  t3923 = 2.*t2098*t3884;
  t3927 = t3396 + t3923;
  t4256 = t749*t2279;
  t4266 = t4256 + t3581;
  t4305 = -1.*t749*t3540;
  t4312 = t2403 + t4305;
  t4035 = 1/Sqrt(t2849);
  t2939 = t2904*t1664;
  t2994 = t2989*t1839;
  t3012 = -0.02159*t1901;
  t3026 = -1.*t1379*t1664;
  t3074 = -1.*t1490*t1839;
  t3082 = t3026 + t3074;
  t3147 = -1.11344*t3082;
  t3167 = t2939 + t2994 + t3012 + t3147;
  t3225 = t2989*t2342;
  t3237 = t2904*t2419;
  t3249 = -1.*t1490*t2342;
  t3270 = -1.*t1379*t2419;
  t3271 = t3249 + t3270;
  t3299 = -1.11344*t3271;
  t3364 = -0.02159*t2767;
  t3365 = t3225 + t3237 + t3299 + t3364;
  t5042 = t1798 + t2403;
  t5072 = t1595 + t4256;
  t4700 = -0.21*t126;
  t4712 = -0.049*t447;
  t4871 = t4700 + t4712;
  t4694 = 0.049*t126;
  t4695 = t4694 + t464;
  t4999 = 0.01841*t653;
  t5013 = 0.70544*t749;
  t5033 = t4999 + t5013;
  t4957 = 0.70544*t653;
  t4965 = t4957 + t752;
  t5145 = t1603 + t3581;
  t5207 = t2413 + t3651;
  t4699 = t78*t4695;
  t4907 = t4871*t505;
  t4966 = t4965*t2279;
  t5036 = t5033*t1338;
  t5071 = t1797*t5042;
  t5076 = t1589*t5072;
  t5078 = t1490*t5042;
  t5080 = t1379*t5072;
  t5089 = t5078 + t5080;
  t5090 = -0.02159*t5089;
  t5112 = t1379*t5042;
  t5118 = -1.*t1490*t5072;
  t5122 = t5112 + t5118;
  t5124 = -1.11344*t5122;
  t5127 = t4699 + t4907 + t1111 + t4966 + t1357 + t5036 + t5071 + t5076 + t5090 + t5124;
  t4206 = t860*t2279;
  t4222 = t1211*t3540;
  t5131 = t78*t4871;
  t5134 = -1.*t4695*t505;
  t5135 = t5033*t966;
  t5139 = t4965*t1338;
  t5146 = t1797*t5145;
  t5216 = t1589*t5207;
  t5243 = t1490*t5145;
  t5264 = t1379*t5207;
  t5300 = t5243 + t5264;
  t5302 = -0.02159*t5300;
  t5319 = t1379*t5145;
  t5321 = -1.*t1490*t5207;
  t5337 = t5319 + t5321;
  t5338 = -1.11344*t5337;
  t5340 = t5131 + t5134 + t3444 + t5135 + t5139 + t3572 + t5146 + t5216 + t5302 + t5338;
  t3173 = 2.*t3167*t2098;
  t3388 = 2.*t2784*t3365;
  t3395 = t3173 + t3388;
  t5129 = 2.*t5127*t2784;
  t5351 = 2.*t2098*t5340;
  t5356 = t5129 + t5351;
  t5365 = 2.*t5127*t2098;
  t5380 = -1.*t78*t4695;
  t5385 = -1.*t4871*t505;
  t5388 = t4965*t966;
  t5391 = t5033*t3540;
  t5392 = t5380 + t5385 + t5388 + t4206 + t4222 + t5391 + t5071 + t5076 + t5090 + t5124;
  t5397 = 2.*t5392*t2098;
  t5398 = 2.*t2784*t5340;
  t5402 = 2.*t3884*t5340;
  t5404 = t5365 + t5397 + t5398 + t5402;
  t5583 = t1595 + t4256 + t1603 + t3581;
  t5585 = -1.*t653*t966;
  t5589 = -1.*t653*t2279;
  t5590 = t5585 + t5589 + t2413 + t3651;
  t5548 = -0.049*t126;
  t5554 = 0.21*t447;
  t5560 = t5548 + t5554;
  t5571 = -0.70544*t653;
  t5574 = 0.01841*t749;
  t5576 = t5571 + t5574;
  t5751 = -1.*t653*t1338;
  t5752 = -1.*t653*t3540;
  t5759 = t1595 + t4256 + t5751 + t5752;
  t5770 = t1798 + t2403 + t2413 + t3651;
  t5856 = -0.02159*t1379;
  t5858 = 1.11344*t1490;
  t5860 = t5856 + t5858;
  t4569 = 2.*t3167*t2784;
  t4576 = 2.*t2098*t3365;
  t4601 = 2.*t3167*t3884;
  t4613 = t2989*t3590;
  t4615 = t2904*t3696;
  t4629 = -1.*t1490*t3590;
  t4650 = -1.*t1379*t3696;
  t4658 = t4629 + t4650;
  t4660 = -1.11344*t4658;
  t4662 = -0.02159*t3873;
  t4666 = t4613 + t4615 + t4660 + t4662;
  t4673 = 2.*t2098*t4666;
  t4692 = t4569 + t4576 + t4601 + t4673;
  t5455 = t2989*t5042;
  t5456 = t2904*t5072;
  t5458 = -1.*t1490*t5042;
  t5462 = -1.*t1379*t5072;
  t5480 = t5458 + t5462;
  t5481 = -1.11344*t5480;
  t5490 = -0.02159*t5122;
  t5491 = t5455 + t5456 + t5481 + t5490;
  t5493 = 2.*t5491*t2784;
  t5499 = 2.*t5127*t3365;
  t5504 = 2.*t3167*t5340;
  t5508 = t2989*t5145;
  t5509 = t2904*t5207;
  t5510 = -1.*t1490*t5145;
  t5511 = -1.*t1379*t5207;
  t5513 = t5510 + t5511;
  t5515 = -1.11344*t5513;
  t5518 = -0.02159*t5337;
  t5522 = t5508 + t5509 + t5515 + t5518;
  t5526 = 2.*t2098*t5522;
  t5527 = t5493 + t5499 + t5504 + t5526;
  t5935 = Cos(var1[16]);
  t5937 = Sin(var1[16]);
  t5941 = Cos(var1[17]);
  t5942 = -1.*t5941;
  t5944 = 1. + t5942;
  t5953 = Sin(var1[17]);
  t5980 = -1.*var1[17];
  t5986 = 0.226893 + t5980;
  t5990 = Cos(t5986);
  t5991 = -1.*t5990;
  t5995 = 1. + t5991;
  t5999 = Sin(t5986);
  t6012 = -1.*t5941*t5937;
  t6015 = -1.*t5935*t5953;
  t6024 = t6012 + t6015;
  t6032 = t5935*t5941;
  t6034 = -1.*t5937*t5953;
  t6045 = t6032 + t6034;
  t6054 = Cos(var1[21]);
  t6055 = -1.*t6054;
  t6059 = 1. + t6055;
  t6061 = Sin(var1[21]);
  t6069 = t5990*t6024;
  t6071 = -1.*t5999*t6045;
  t6073 = t6069 + t6071;
  t6051 = t5999*t6024;
  t6052 = t5990*t6045;
  t6053 = t6051 + t6052;
  t5952 = -0.049*t5944;
  t5954 = -0.21*t5953;
  t5958 = t5952 + t5954;
  t5966 = -0.21*t5944;
  t5970 = 0.049*t5953;
  t5977 = t5966 + t5970;
  t6026 = 0.01841*t5995;
  t6027 = -0.70544*t5999;
  t6030 = t6026 + t6027;
  t5998 = -0.70544*t5995;
  t6002 = -0.01841*t5999;
  t6009 = t5998 + t6002;
  t6119 = t5941*t5937;
  t6120 = t5935*t5953;
  t6121 = t6119 + t6120;
  t6060 = -0.02159*t6059;
  t6064 = -1.11344*t6061;
  t6065 = t6060 + t6064;
  t6075 = -1.11344*t6059;
  t6078 = 0.02159*t6061;
  t6080 = t6075 + t6078;
  t6127 = t5990*t6121;
  t6128 = t5999*t6045;
  t6130 = t6127 + t6128;
  t6133 = -1.*t5999*t6121;
  t6134 = t6133 + t6052;
  t6087 = t6054*t6073;
  t6088 = -1.*t6053*t6061;
  t6089 = t6087 + t6088;
  t5936 = 0.049*t5935;
  t5940 = -0.09*t5937;
  t5964 = t5935*t5958;
  t5978 = -1.*t5937*t5977;
  t6025 = t6009*t6024;
  t6046 = t6030*t6045;
  t6068 = t6053*t6065;
  t6086 = t6073*t6080;
  t6090 = -1.11344*t6089;
  t6091 = t6054*t6053;
  t6092 = t6073*t6061;
  t6096 = t6091 + t6092;
  t6103 = -0.02159*t6096;
  t6106 = t5936 + t5940 + t5964 + t5978 + t6025 + t6046 + t6068 + t6086 + t6090 + t6103;
  t6110 = 0.09*t5935;
  t6112 = 0.049*t5937;
  t6113 = t5937*t5958;
  t6118 = t5935*t5977;
  t6124 = t6030*t6121;
  t6125 = t6009*t6045;
  t6131 = t6130*t6065;
  t6135 = t6134*t6080;
  t6136 = t6054*t6130;
  t6137 = t6134*t6061;
  t6138 = t6136 + t6137;
  t6139 = -0.02159*t6138;
  t6141 = t6054*t6134;
  t6142 = -1.*t6130*t6061;
  t6143 = t6141 + t6142;
  t6144 = -1.11344*t6143;
  t6146 = t6110 + t6112 + t6113 + t6118 + t6124 + t6125 + t6131 + t6135 + t6139 + t6144;
  t6158 = 0.02159*t6054;
  t6159 = t6158 + t6064;
  t6164 = -1.11344*t6054;
  t6166 = -0.02159*t6061;
  t6167 = t6164 + t6166;
  t6205 = -1.*t5935*t5941;
  t6208 = t5937*t5953;
  t6209 = t6205 + t6208;
  t6211 = t5999*t6209;
  t6213 = t6069 + t6211;
  t6219 = -1.*t5999*t6024;
  t6220 = t5990*t6209;
  t6221 = t6219 + t6220;
  t6109 = Power(t6106,2);
  t6151 = Power(t6146,2);
  t6152 = 0.00002025 + t6109 + t6151;
  t6153 = Power(t6152,-1.5);
  t6195 = 2.*t6106*t6146;
  t6197 = -0.09*t5935;
  t6198 = -0.049*t5937;
  t6202 = -1.*t5937*t5958;
  t6203 = -1.*t5935*t5977;
  t6204 = t6030*t6024;
  t6210 = t6009*t6209;
  t6215 = t6213*t6065;
  t6222 = t6221*t6080;
  t6225 = t6054*t6213;
  t6226 = t6221*t6061;
  t6229 = t6225 + t6226;
  t6230 = -0.02159*t6229;
  t6232 = t6054*t6221;
  t6233 = -1.*t6213*t6061;
  t6234 = t6232 + t6233;
  t6236 = -1.11344*t6234;
  t6238 = t6197 + t6198 + t6202 + t6203 + t6204 + t6210 + t6215 + t6222 + t6230 + t6236;
  t6240 = 2.*t6106*t6238;
  t6242 = t6195 + t6240;
  t6266 = -1.*t5999*t6209;
  t6267 = t6127 + t6266;
  t6262 = t5999*t6121;
  t6263 = t6262 + t6220;
  t6248 = 1/Sqrt(t6152);
  t6163 = t6073*t6159;
  t6168 = t6053*t6167;
  t6169 = -0.02159*t6089;
  t6170 = -1.*t6054*t6053;
  t6171 = -1.*t6073*t6061;
  t6173 = t6170 + t6171;
  t6174 = -1.11344*t6173;
  t6175 = t6163 + t6168 + t6169 + t6174;
  t6177 = t6134*t6159;
  t6178 = t6130*t6167;
  t6179 = -1.*t6054*t6130;
  t6182 = -1.*t6134*t6061;
  t6183 = t6179 + t6182;
  t6185 = -1.11344*t6183;
  t6186 = -0.02159*t6143;
  t6188 = t6177 + t6178 + t6185 + t6186;
  t6349 = t6051 + t6262;
  t6352 = t6069 + t6127;
  t6324 = 0.049*t5941;
  t6327 = t6324 + t5954;
  t6329 = -0.21*t5941;
  t6331 = -0.049*t5953;
  t6334 = t6329 + t6331;
  t6345 = 0.01841*t5990;
  t6346 = 0.70544*t5999;
  t6347 = t6345 + t6346;
  t6341 = 0.70544*t5990;
  t6342 = t6341 + t6002;
  t6381 = t6128 + t6211;
  t6384 = t6052 + t6220;
  t6328 = t5935*t6327;
  t6337 = t5937*t6334;
  t6343 = t6342*t6121;
  t6348 = t6347*t6045;
  t6351 = t6349*t6065;
  t6353 = t6352*t6080;
  t6354 = t6054*t6349;
  t6355 = t6352*t6061;
  t6357 = t6354 + t6355;
  t6358 = -0.02159*t6357;
  t6359 = t6054*t6352;
  t6361 = -1.*t6349*t6061;
  t6364 = t6359 + t6361;
  t6369 = -1.11344*t6364;
  t6370 = t6328 + t6337 + t6025 + t6343 + t6046 + t6348 + t6351 + t6353 + t6358 + t6369;
  t6259 = t6009*t6121;
  t6260 = t6030*t6209;
  t6373 = -1.*t5937*t6327;
  t6377 = t5935*t6334;
  t6379 = t6347*t6024;
  t6380 = t6342*t6045;
  t6382 = t6381*t6065;
  t6385 = t6384*t6080;
  t6386 = t6054*t6381;
  t6387 = t6384*t6061;
  t6390 = t6386 + t6387;
  t6391 = -0.02159*t6390;
  t6392 = t6054*t6384;
  t6393 = -1.*t6381*t6061;
  t6394 = t6392 + t6393;
  t6395 = -1.11344*t6394;
  t6398 = t6373 + t6377 + t6204 + t6379 + t6380 + t6210 + t6382 + t6385 + t6391 + t6395;
  t6251 = -0.049*t5935;
  t6253 = 0.09*t5937;
  t6255 = -1.*t5935*t5958;
  t6257 = t5937*t5977;
  t6422 = -1.*t6073*t6159;
  t6423 = -1.*t6053*t6167;
  t6425 = 0.02159*t6089;
  t6428 = 1.11344*t6173;
  t6430 = t6422 + t6423 + t6425 + t6428;
  t6432 = -1.*t6009*t6024;
  t6433 = -1.*t6030*t6045;
  t6436 = -1.*t6053*t6065;
  t6439 = -1.*t6073*t6080;
  t6440 = 1.11344*t6089;
  t6441 = 0.02159*t6096;
  t6442 = t6251 + t6253 + t6255 + t6257 + t6432 + t6433 + t6436 + t6439 + t6440 + t6441;
  t6444 = Power(t6442,2);
  t6445 = -1.*t6030*t6121;
  t6448 = -1.*t6009*t6045;
  t6449 = -1.*t6130*t6065;
  t6450 = -1.*t6134*t6080;
  t6451 = 0.02159*t6138;
  t6453 = 1.11344*t6143;
  t6454 = t6197 + t6198 + t6202 + t6203 + t6445 + t6448 + t6449 + t6450 + t6451 + t6453;
  t6455 = Power(t6454,2);
  t6457 = t6444 + t6455;
  t6461 = 1/t6457;
  t6305 = -1.*t6054*t6213;
  t6307 = -1.*t6221*t6061;
  t6308 = t6305 + t6307;
  t6465 = -1.*t6134*t6159;
  t6467 = -1.*t6130*t6167;
  t6468 = 1.11344*t6183;
  t6471 = 0.02159*t6143;
  t6473 = t6465 + t6467 + t6468 + t6471;
  t6483 = Power(t6457,-2);
  t6485 = 2.*t6442*t6454;
  t6487 = -1.*t6030*t6024;
  t6489 = -1.*t6009*t6209;
  t6491 = -1.*t6213*t6065;
  t6492 = -1.*t6221*t6080;
  t6494 = 0.02159*t6229;
  t6495 = 1.11344*t6234;
  t6496 = t6110 + t6112 + t6113 + t6118 + t6487 + t6489 + t6491 + t6492 + t6494 + t6495;
  t6497 = 2.*t6442*t6496;
  t6499 = t6485 + t6497;
  t6270 = t6054*t6267;
  t6271 = -1.*t6263*t6061;
  t6274 = t6270 + t6271;
  t6279 = t6054*t6263;
  t6280 = t6267*t6061;
  t6281 = t6279 + t6280;
  t6509 = -1.*t6009*t6121;
  t6510 = -1.*t6030*t6209;
  t6407 = -1.*t5935*t6327;
  t6408 = -1.*t5937*t6334;
  t6531 = -1.*t6349*t6065;
  t6532 = -1.*t6352*t6080;
  t6533 = 0.02159*t6357;
  t6534 = 1.11344*t6364;
  t6542 = t5937*t6327;
  t6543 = -1.*t5935*t6334;
  t6544 = -1.*t6347*t6024;
  t6547 = -1.*t6342*t6045;
  t6548 = -1.*t6381*t6065;
  t6551 = -1.*t6384*t6080;
  t6552 = 0.02159*t6390;
  t6553 = 1.11344*t6394;
  t6554 = t6542 + t6543 + t6487 + t6544 + t6547 + t6489 + t6548 + t6551 + t6552 + t6553;
  t6538 = -1.*t6342*t6121;
  t6539 = -1.*t6347*t6045;
  t6540 = t6407 + t6408 + t6432 + t6538 + t6433 + t6539 + t6531 + t6532 + t6533 + t6534;
  t6176 = 2.*t6175*t6106;
  t6190 = 2.*t6146*t6188;
  t6194 = t6176 + t6190;
  t6371 = 2.*t6370*t6146;
  t6401 = 2.*t6106*t6398;
  t6402 = t6371 + t6401;
  t6405 = 2.*t6370*t6106;
  t6409 = t6342*t6024;
  t6410 = t6347*t6209;
  t6411 = t6407 + t6408 + t6409 + t6259 + t6260 + t6410 + t6351 + t6353 + t6358 + t6369;
  t6412 = 2.*t6411*t6106;
  t6413 = 2.*t6146*t6398;
  t6414 = 2.*t6238*t6398;
  t6415 = t6405 + t6412 + t6413 + t6414;
  t6629 = -1.*t5990*t6024;
  t6631 = -1.*t5990*t6121;
  t6632 = t6629 + t6631 + t6128 + t6211;
  t6636 = t6051 + t6262 + t6052 + t6220;
  t6612 = -0.049*t5941;
  t6614 = 0.21*t5953;
  t6616 = t6612 + t6614;
  t6624 = -0.70544*t5990;
  t6625 = 0.01841*t5999;
  t6626 = t6624 + t6625;
  t6669 = t6069 + t6127 + t6128 + t6211;
  t6665 = -1.*t5990*t6045;
  t6666 = -1.*t5990*t6209;
  t6667 = t6051 + t6262 + t6665 + t6666;
  t6576 = -1.*t6054*t6349;
  t6578 = -1.*t6352*t6061;
  t6579 = t6576 + t6578;
  t6592 = -1.*t6054*t6381;
  t6593 = -1.*t6384*t6061;
  t6594 = t6592 + t6593;
  t6713 = 2.*t6540*t6454;
  t6715 = 2.*t6442*t6554;
  t6716 = t6713 + t6715;
  t6528 = -1.*t6342*t6024;
  t6529 = -1.*t6347*t6209;
  t6536 = t6328 + t6337 + t6528 + t6509 + t6510 + t6529 + t6531 + t6532 + t6533 + t6534;
  t6537 = t6536*t6454*t6461;
  t6555 = t6106*t6554*t6461;
  t6640 = t6054*t6632;
  t6643 = t6636*t6061;
  t6644 = t6640 + t6643;
  t6647 = t6054*t6636;
  t6649 = -1.*t6632*t6061;
  t6651 = t6647 + t6649;
  t6672 = t6054*t6669;
  t6673 = -1.*t6667*t6061;
  t6674 = t6672 + t6673;
  t6676 = t6054*t6667;
  t6677 = t6669*t6061;
  t6679 = t6676 + t6677;
  t6785 = -0.02159*t6054;
  t6787 = 1.11344*t6061;
  t6788 = t6785 + t6787;
  t6300 = 2.*t6175*t6146;
  t6301 = 2.*t6106*t6188;
  t6302 = 2.*t6175*t6238;
  t6303 = t6221*t6159;
  t6304 = t6213*t6167;
  t6309 = -1.11344*t6308;
  t6310 = -0.02159*t6234;
  t6313 = t6303 + t6304 + t6309 + t6310;
  t6315 = 2.*t6106*t6313;
  t6316 = t6300 + t6301 + t6302 + t6315;
  t6574 = t6352*t6159;
  t6575 = t6349*t6167;
  t6580 = -1.11344*t6579;
  t6582 = -0.02159*t6364;
  t6583 = t6574 + t6575 + t6580 + t6582;
  t6584 = 2.*t6583*t6146;
  t6585 = 2.*t6370*t6188;
  t6586 = 2.*t6175*t6398;
  t6587 = t6384*t6159;
  t6588 = t6381*t6167;
  t6595 = -1.11344*t6594;
  t6596 = -0.02159*t6394;
  t6597 = t6587 + t6588 + t6595 + t6596;
  t6598 = 2.*t6106*t6597;
  t6602 = t6584 + t6585 + t6586 + t6598;
  t6849 = 2.*t6430*t6442;
  t6851 = 2.*t6473*t6454;
  t6852 = t6849 + t6851;
  t6793 = -1.*t6054*t6073;
  t6794 = t6053*t6061;
  t6795 = t6793 + t6794;
  t6815 = -1.*t6054*t6134;
  t6816 = t6130*t6061;
  t6818 = t6815 + t6816;
  t6462 = t6430*t6106*t6461;
  t6475 = -1.*t6221*t6159;
  t6476 = -1.*t6213*t6167;
  t6478 = 1.11344*t6308;
  t6479 = 0.02159*t6234;
  t6480 = t6475 + t6476 + t6478 + t6479;
  t6482 = t6454*t6480*t6461;
  t6694 = -1.*t6352*t6159;
  t6695 = -1.*t6349*t6167;
  t6696 = 1.11344*t6579;
  t6697 = 0.02159*t6364;
  t6698 = t6694 + t6695 + t6696 + t6697;
  t6699 = t6698*t6106*t6461;
  t6703 = -1.*t6384*t6159;
  t6704 = -1.*t6381*t6167;
  t6705 = 1.11344*t6594;
  t6708 = 0.02159*t6394;
  t6710 = t6703 + t6704 + t6705 + t6708;
  t6711 = t6454*t6710*t6461;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=-0.25*t2852*Power(t3927,2)*var2[8] + 0.5*t4035*(2.*t2125 + 2.*t2784*t3884 + 2.*Power(t3884,2) + 2.*t2098*(t4206 + t4222 + t1589*t4266 + t1797*t4312 - 1.11344*(-1.*t1490*t4266 + t1379*t4312) - 0.02159*(t1379*t4266 + t1490*t4312) + 0.09*t505 + t505*t582 - 0.049*t78 - 1.*t471*t78))*var2[8] - 0.25*t2852*t3927*t5356*var2[9] + 0.5*t4035*t5404*var2[9] - 0.25*t2852*t3395*t3927*var2[13] + 0.5*t4035*t4692*var2[13];
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=-0.25*t2852*t3927*t5356*var2[8] + 0.5*t4035*t5404*var2[8] - 0.25*t2852*Power(t5356,2)*var2[9] + 0.5*t4035*(2.*Power(t5127,2) + 2.*Power(t5340,2) + 2.*t2784*(t3444 + t3572 + 2.*t1338*t4965 + t2279*t5033 + t5131 + t505*t5560 + t1338*t5576 + t1797*t5583 + t1589*t5590 - 0.02159*(t1490*t5583 + t1379*t5590) - 1.11344*(t1379*t5583 - 1.*t1490*t5590) + 2.*t5033*t966) + 2.*t2098*(t4206 + t4222 + 2.*t3540*t5033 + t5036 + t5385 + t1589*t5759 + t1797*t5770 - 1.11344*(-1.*t1490*t5759 + t1379*t5770) - 0.02159*(t1379*t5759 + t1490*t5770) + t5560*t78 + 2.*t4965*t966 + t5576*t966))*var2[9] - 0.25*t2852*t3395*t5356*var2[13] + 0.5*t4035*t5527*var2[13];
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=-0.25*t2852*t3395*t3927*var2[8] + 0.5*t4035*t4692*var2[8] - 0.25*t2852*t3395*t5356*var2[9] + 0.5*t4035*t5527*var2[9] - 0.25*t2852*Power(t3395,2)*var2[13] + 0.5*t4035*(2.*Power(t3167,2) + 2.*Power(t3365,2) + 2.*t2098*(-1.11344*(t1490*t1664 - 1.*t1379*t1839) + t1839*t2904 - 0.02159*t3082 + t1664*t5860) + 2.*t2784*(-1.11344*(-1.*t1379*t2342 + t1490*t2419) + t2342*t2904 - 0.02159*t3271 + t2419*t5860))*var2[13];
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=-0.25*t6153*Power(t6242,2)*var2[16] + 0.5*t6248*(2.*t6109 + 2.*t6146*t6238 + 2.*Power(t6238,2) + 2.*t6106*(t6251 + t6253 + t6255 + t6257 + t6259 + t6260 + t6065*t6263 + t6080*t6267 - 1.11344*t6274 - 0.02159*t6281))*var2[16] - 0.25*t6153*t6242*t6402*var2[17] + 0.5*t6248*t6415*var2[17] - 0.25*t6153*t6194*t6242*var2[21] + 0.5*t6248*t6316*var2[21];
  p_output1[149]=(t6238*t6442*t6461 + t6106*t6461*t6496 + t6442*t6461*t6496 - 1.*t6106*t6442*t6483*t6499 - 1.*t6454*t6483*t6496*t6499 + t6454*t6461*(t5936 + t5940 + t5964 + t5978 - 1.*t6065*t6263 - 1.*t6080*t6267 + 1.11344*t6274 + 0.02159*t6281 + t6509 + t6510))*var2[16] + (t6537 + t6238*t6461*t6540 - 1.*t6106*t6483*t6499*t6540 + t6442*t6461*t6554 - 1.*t6454*t6483*t6499*t6554 + t6555)*var2[17] + (t6430*t6442*t6461 + t6462 + t6238*t6461*t6473 + t6482 - 1.*t6430*t6454*t6483*t6499 - 1.*t6106*t6473*t6483*t6499)*var2[21];
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=-0.25*t6153*t6242*t6402*var2[16] + 0.5*t6248*t6415*var2[16] - 0.25*t6153*Power(t6402,2)*var2[17] + 0.5*t6248*(2.*Power(t6370,2) + 2.*Power(t6398,2) + 2.*t6146*(t6204 + t6210 + 2.*t6045*t6342 + 2.*t6024*t6347 + t6121*t6347 + t6377 + t5937*t6616 + t6045*t6626 + t6065*t6632 + t6080*t6636 - 0.02159*t6644 - 1.11344*t6651) + 2.*t6106*(t6259 + t6260 + 2.*t6024*t6342 + 2.*t6209*t6347 + t6348 + t6408 + t5935*t6616 + t6024*t6626 + t6065*t6667 + t6080*t6669 - 1.11344*t6674 - 0.02159*t6679))*var2[17] - 0.25*t6153*t6194*t6402*var2[21] + 0.5*t6248*t6602*var2[21];
  p_output1[158]=(t6398*t6442*t6461 + t6537 + t6461*t6496*t6540 + t6555 - 1.*t6106*t6442*t6483*t6716 - 1.*t6454*t6483*t6496*t6716)*var2[16] + (t6398*t6461*t6540 + t6461*t6540*t6554 + t6106*t6461*(-2.*t6045*t6342 - 2.*t6024*t6347 - 1.*t6121*t6347 + t6487 + t6489 + t6543 - 1.*t5937*t6616 - 1.*t6045*t6626 - 1.*t6065*t6632 - 1.*t6080*t6636 + 0.02159*t6644 + 1.11344*t6651) + t6454*t6461*(t6337 - 2.*t6024*t6342 - 2.*t6209*t6347 + t6509 + t6510 + t6539 - 1.*t5935*t6616 - 1.*t6024*t6626 - 1.*t6065*t6667 - 1.*t6080*t6669 + 1.11344*t6674 + 0.02159*t6679) - 1.*t6106*t6483*t6540*t6716 - 1.*t6454*t6483*t6554*t6716)*var2[17] + (t6398*t6461*t6473 + t6430*t6461*t6540 + t6699 + t6711 - 1.*t6430*t6454*t6483*t6716 - 1.*t6106*t6473*t6483*t6716)*var2[21];
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=-0.25*t6153*t6194*t6242*var2[16] + 0.5*t6248*t6316*var2[16] - 0.25*t6153*t6194*t6402*var2[17] + 0.5*t6248*t6602*var2[17] - 0.25*t6153*Power(t6194,2)*var2[21] + 0.5*t6248*(2.*Power(t6175,2) + 2.*Power(t6188,2) + 2.*t6106*(t6073*t6167 - 0.02159*t6173 + t6053*t6788 - 1.11344*t6795) + 2.*t6146*(t6134*t6167 - 0.02159*t6183 + t6130*t6788 - 1.11344*t6818))*var2[21];
  p_output1[194]=(t6175*t6442*t6461 + t6462 + t6482 + t6461*t6473*t6496 - 1.*t6106*t6442*t6483*t6852 - 1.*t6454*t6483*t6496*t6852)*var2[16] + (t6175*t6461*t6540 + t6461*t6473*t6554 + t6699 + t6711 - 1.*t6106*t6483*t6540*t6852 - 1.*t6454*t6483*t6554*t6852)*var2[17] + (t6175*t6461*t6473 + t6430*t6461*t6473 + t6454*t6461*(-1.*t6073*t6167 + 0.02159*t6173 - 1.*t6053*t6788 + 1.11344*t6795) + t6106*t6461*(-1.*t6134*t6167 + 0.02159*t6183 - 1.*t6130*t6788 + 1.11344*t6818) - 1.*t6430*t6454*t6483*t6852 - 1.*t6106*t6473*t6483*t6852)*var2[21];
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=1.;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=1.;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=1.;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0.5*t3927*t4035;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0.5*t4035*t5356;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0.5*t3395*t4035;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=1.;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=1.;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0.5*t6242*t6248;
  p_output1[347]=t6106*t6442*t6461 + t6454*t6461*t6496;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0.5*t6248*t6402;
  p_output1[356]=t6106*t6461*t6540 + t6454*t6461*t6554;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0.5*t6194*t6248;
  p_output1[392]=t6430*t6454*t6461 + t6106*t6461*t6473;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=-1.;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 44, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void DLfya_LeftStanceActual_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




