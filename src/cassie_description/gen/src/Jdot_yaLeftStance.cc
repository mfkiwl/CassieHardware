/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:53 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_yaLeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t19;
  double t107;
  double t124;
  double t172;
  double t200;
  double t397;
  double t634;
  double t671;
  double t711;
  double t737;
  double t825;
  double t886;
  double t897;
  double t899;
  double t903;
  double t1020;
  double t1092;
  double t1101;
  double t1125;
  double t1177;
  double t1318;
  double t1395;
  double t1502;
  double t1503;
  double t1573;
  double t1735;
  double t1759;
  double t1785;
  double t453;
  double t459;
  double t476;
  double t196;
  double t251;
  double t284;
  double t911;
  double t918;
  double t996;
  double t851;
  double t888;
  double t889;
  double t1618;
  double t1673;
  double t1720;
  double t2008;
  double t2017;
  double t2019;
  double t1368;
  double t1470;
  double t1474;
  double t2031;
  double t2037;
  double t2049;
  double t2087;
  double t2094;
  double t66;
  double t287;
  double t415;
  double t486;
  double t905;
  double t1120;
  double t1589;
  double t1798;
  double t1814;
  double t1830;
  double t1838;
  double t1842;
  double t1879;
  double t1898;
  double t1930;
  double t1937;
  double t1963;
  double t1975;
  double t1980;
  double t1982;
  double t1995;
  double t2021;
  double t2028;
  double t2044;
  double t2102;
  double t2104;
  double t2121;
  double t2122;
  double t2130;
  double t2135;
  double t2155;
  double t2161;
  double t2178;
  double t2198;
  double t2354;
  double t2373;
  double t2375;
  double t2384;
  double t2388;
  double t2389;
  double t2403;
  double t2407;
  double t1970;
  double t2210;
  double t2274;
  double t2278;
  double t2895;
  double t2915;
  double t2923;
  double t2737;
  double t2781;
  double t2782;
  double t2699;
  double t2705;
  double t2337;
  double t2854;
  double t2868;
  double t2884;
  double t2823;
  double t2833;
  double t2383;
  double t3177;
  double t3187;
  double t3368;
  double t3372;
  double t3298;
  double t3333;
  double t3357;
  double t3522;
  double t3510;
  double t3534;
  double t3526;
  double t3538;
  double t3544;
  double t3548;
  double t3557;
  double t3559;
  double t3561;
  double t3576;
  double t3496;
  double t3498;
  double t3605;
  double t3531;
  double t3584;
  double t3594;
  double t3507;
  double t3612;
  double t3614;
  double t3617;
  double t3640;
  double t3601;
  double t3622;
  double t3626;
  double t3502;
  double t3643;
  double t3644;
  double t3646;
  double t3659;
  double t3639;
  double t3648;
  double t3649;
  double t3491;
  double t3662;
  double t3665;
  double t3670;
  double t3737;
  double t3742;
  double t3746;
  double t3719;
  double t3721;
  double t3724;
  double t3736;
  double t3748;
  double t3769;
  double t3779;
  double t3783;
  double t3788;
  double t3825;
  double t3827;
  double t3835;
  double t3776;
  double t3798;
  double t3814;
  double t3885;
  double t3886;
  double t3898;
  double t3872;
  double t3873;
  double t3877;
  double t3880;
  double t3900;
  double t3909;
  double t3912;
  double t3914;
  double t3930;
  double t3971;
  double t3976;
  double t3977;
  double t3911;
  double t3942;
  double t3952;
  double t4046;
  double t4053;
  double t4056;
  double t4060;
  double t4065;
  double t4066;
  double t4058;
  double t4068;
  double t4072;
  double t4077;
  double t4085;
  double t4088;
  double t4075;
  double t4090;
  double t4098;
  double t4109;
  double t4114;
  double t4125;
  double t4166;
  double t4167;
  double t4170;
  double t4165;
  double t4183;
  double t4210;
  double t4235;
  double t4244;
  double t4258;
  double t4222;
  double t4271;
  double t4274;
  double t4294;
  double t4298;
  double t4300;
  double t4285;
  double t4301;
  double t4316;
  double t4323;
  double t4329;
  double t4331;
  double t3820;
  double t3840;
  double t3845;
  double t3848;
  double t3854;
  double t3859;
  double t3865;
  double t3866;
  double t3870;
  double t4319;
  double t4339;
  double t4340;
  double t4342;
  double t4352;
  double t4354;
  double t4367;
  double t4368;
  double t4371;
  double t4387;
  double t3658;
  double t3690;
  double t3694;
  double t3699;
  double t3700;
  double t3705;
  double t4393;
  double t4448;
  double t4451;
  double t4452;
  double t4431;
  double t4433;
  double t4442;
  double t4447;
  double t4468;
  double t4479;
  double t4490;
  double t4494;
  double t4496;
  double t4511;
  double t4515;
  double t4520;
  double t4488;
  double t4497;
  double t4498;
  double t4402;
  double t4407;
  double t4409;
  double t4414;
  double t4415;
  double t4426;
  double t4429;
  double t3697;
  double t3708;
  double t3711;
  double t4548;
  double t4549;
  double t4553;
  double t4562;
  double t4571;
  double t4578;
  double t4599;
  double t4601;
  double t4606;
  double t4554;
  double t4581;
  double t4587;
  double t4628;
  double t4633;
  double t4634;
  double t4635;
  double t4637;
  double t4639;
  double t4641;
  double t4642;
  double t4645;
  double t4640;
  double t4647;
  double t4649;
  double t4651;
  double t4652;
  double t4653;
  double t4405;
  double t4673;
  double t4682;
  double t4683;
  double t4684;
  double t4685;
  double t4687;
  double t4693;
  double t4694;
  double t4696;
  double t4690;
  double t4700;
  double t4701;
  double t4703;
  double t4704;
  double t4710;
  double t4543;
  double t4751;
  double t4752;
  double t4778;
  double t4781;
  double t4787;
  double t4788;
  double t4789;
  double t4800;
  double t4801;
  double t4803;
  double t4814;
  double t4817;
  double t4826;
  double t4828;
  double t4829;
  double t4807;
  double t4808;
  double t4810;
  double t4757;
  double t4759;
  double t4761;
  double t4769;
  double t4773;
  double t4776;
  double t4793;
  double t4794;
  double t4799;
  double t4782;
  double t4783;
  double t4785;
  double t4871;
  double t4872;
  double t4875;
  double t4818;
  double t4819;
  double t4820;
  double t4834;
  double t4836;
  double t4839;
  double t4885;
  double t4888;
  double t4889;
  double t4893;
  double t4894;
  double t4747;
  double t4750;
  double t4763;
  double t4777;
  double t4790;
  double t4804;
  double t4825;
  double t4840;
  double t4844;
  double t4845;
  double t4846;
  double t4851;
  double t4853;
  double t4855;
  double t4857;
  double t4859;
  double t4860;
  double t4862;
  double t4865;
  double t4866;
  double t4867;
  double t4879;
  double t4883;
  double t4890;
  double t4896;
  double t4897;
  double t4902;
  double t4904;
  double t4905;
  double t4906;
  double t4907;
  double t4908;
  double t4911;
  double t4912;
  double t4936;
  double t4938;
  double t4941;
  double t4944;
  double t4945;
  double t4948;
  double t4949;
  double t4953;
  double t4971;
  double t4972;
  double t4973;
  double t4974;
  double t4975;
  double t4976;
  double t4978;
  double t4979;
  double t4985;
  double t4991;
  double t4992;
  double t4924;
  double t4928;
  double t4930;
  double t4933;
  double t4997;
  double t5001;
  double t5002;
  double t5003;
  double t5005;
  double t5006;
  double t5009;
  double t4957;
  double t4958;
  double t4960;
  double t4962;
  double t4963;
  double t4964;
  double t4994;
  double t5010;
  double t5013;
  double t5015;
  double t5034;
  double t5036;
  double t5039;
  double t5042;
  double t5043;
  double t5045;
  double t5047;
  double t5054;
  double t5065;
  double t5067;
  double t5068;
  double t5044;
  double t5060;
  double t5063;
  double t5087;
  double t5088;
  double t5089;
  double t5090;
  double t5091;
  double t5106;
  double t5107;
  double t5108;
  double t5096;
  double t5112;
  double t5113;
  double t5118;
  double t5119;
  double t5120;
  double t5142;
  double t5143;
  double t5145;
  double t5146;
  double t5147;
  double t5151;
  double t5152;
  double t5153;
  double t5150;
  double t5154;
  double t5155;
  double t5159;
  double t5161;
  double t5166;
  double t4861;
  double t4913;
  double t4917;
  double t4918;
  double t5206;
  double t5208;
  double t5224;
  double t5188;
  double t5189;
  double t5192;
  double t5193;
  double t5194;
  double t4935;
  double t5202;
  double t5203;
  double t5204;
  double t5196;
  double t5198;
  double t4942;
  double t5255;
  double t5258;
  double t5229;
  double t5232;
  double t5233;
  double t5235;
  double t5236;
  double t5238;
  double t5017;
  double t5019;
  double t5262;
  double t5264;
  double t5265;
  double t5267;
  double t5268;
  double t5273;
  double t5335;
  double t5336;
  double t5337;
  double t5339;
  double t5341;
  double t5342;
  double t5344;
  double t5366;
  double t5368;
  double t5378;
  double t5384;
  double t5369;
  double t5371;
  double t5372;
  double t5399;
  double t5402;
  double t5404;
  double t5405;
  double t5407;
  double t5409;
  double t5410;
  double t5428;
  double t5432;
  double t5435;
  double t5439;
  double t5442;
  double t5464;
  double t5465;
  double t5466;
  double t5446;
  double t5449;
  double t5454;
  t19 = Cos(var1[8]);
  t107 = Cos(var1[9]);
  t124 = -1.*t107;
  t172 = 1. + t124;
  t200 = Sin(var1[9]);
  t397 = Sin(var1[8]);
  t634 = -1.*var1[9];
  t671 = 0.226893 + t634;
  t711 = Cos(t671);
  t737 = -1.*t711;
  t825 = 1. + t737;
  t886 = Sin(t671);
  t897 = -1.*t19*t200;
  t899 = -1.*t107*t397;
  t903 = t897 + t899;
  t1020 = t107*t19;
  t1092 = -1.*t200*t397;
  t1101 = t1020 + t1092;
  t1125 = Cos(var1[13]);
  t1177 = -1.*t1125;
  t1318 = 1. + t1177;
  t1395 = Sin(var1[13]);
  t1502 = t886*t903;
  t1503 = t711*t1101;
  t1573 = t1502 + t1503;
  t1735 = t711*t903;
  t1759 = -1.*t886*t1101;
  t1785 = t1735 + t1759;
  t453 = -0.21*t172;
  t459 = 0.049*t200;
  t476 = t453 + t459;
  t196 = -0.049*t172;
  t251 = -0.21*t200;
  t284 = t196 + t251;
  t911 = 0.01841*t825;
  t918 = -0.70544*t886;
  t996 = t911 + t918;
  t851 = -0.70544*t825;
  t888 = -0.01841*t886;
  t889 = t851 + t888;
  t1618 = -1.11344*t1318;
  t1673 = 0.02159*t1395;
  t1720 = t1618 + t1673;
  t2008 = t19*t200;
  t2017 = t107*t397;
  t2019 = t2008 + t2017;
  t1368 = -0.02159*t1318;
  t1470 = -1.11344*t1395;
  t1474 = t1368 + t1470;
  t2031 = -1.*t886*t2019;
  t2037 = t2031 + t1503;
  t2049 = t711*t2019;
  t2087 = t886*t1101;
  t2094 = t2049 + t2087;
  t66 = 0.049*t19;
  t287 = t19*t284;
  t415 = -0.09*t397;
  t486 = -1.*t476*t397;
  t905 = t889*t903;
  t1120 = t996*t1101;
  t1589 = t1474*t1573;
  t1798 = t1720*t1785;
  t1814 = -1.*t1395*t1573;
  t1830 = t1125*t1785;
  t1838 = t1814 + t1830;
  t1842 = -1.11344*t1838;
  t1879 = t1125*t1573;
  t1898 = t1395*t1785;
  t1930 = t1879 + t1898;
  t1937 = -0.02159*t1930;
  t1963 = t66 + t287 + t415 + t486 + t905 + t1120 + t1589 + t1798 + t1842 + t1937;
  t1975 = 0.09*t19;
  t1980 = t19*t476;
  t1982 = 0.049*t397;
  t1995 = t284*t397;
  t2021 = t996*t2019;
  t2028 = t889*t1101;
  t2044 = t1720*t2037;
  t2102 = t1474*t2094;
  t2104 = t1395*t2037;
  t2121 = t1125*t2094;
  t2122 = t2104 + t2121;
  t2130 = -0.02159*t2122;
  t2135 = t1125*t2037;
  t2155 = -1.*t1395*t2094;
  t2161 = t2135 + t2155;
  t2178 = -1.11344*t2161;
  t2198 = t1975 + t1980 + t1982 + t1995 + t2021 + t2028 + t2044 + t2102 + t2130 + t2178;
  t2354 = -1.*t107*t19;
  t2373 = t200*t397;
  t2375 = t2354 + t2373;
  t2384 = -1.*t886*t903;
  t2388 = t711*t2375;
  t2389 = t2384 + t2388;
  t2403 = t886*t2375;
  t2407 = t1735 + t2403;
  t1970 = Power(t1963,2);
  t2210 = Power(t2198,2);
  t2274 = 0.00002025 + t1970 + t2210;
  t2278 = 1/Sqrt(t2274);
  t2895 = t1735 + t2049;
  t2915 = t886*t2019;
  t2923 = t1502 + t2915;
  t2737 = -0.21*t107;
  t2781 = -0.049*t200;
  t2782 = t2737 + t2781;
  t2699 = 0.049*t107;
  t2705 = t2699 + t251;
  t2337 = t996*t903;
  t2854 = 0.01841*t711;
  t2868 = 0.70544*t886;
  t2884 = t2854 + t2868;
  t2823 = 0.70544*t711;
  t2833 = t2823 + t888;
  t2383 = t889*t2375;
  t3177 = t1503 + t2388;
  t3187 = t2087 + t2403;
  t3368 = 0.02159*t1125;
  t3372 = t3368 + t1470;
  t3298 = -1.11344*t1125;
  t3333 = -0.02159*t1395;
  t3357 = t3298 + t3333;
  t3522 = Cos(var1[4]);
  t3510 = Cos(var1[14]);
  t3534 = Cos(var1[16]);
  t3526 = Sin(var1[16]);
  t3538 = Sin(var1[14]);
  t3544 = Sin(var1[15]);
  t3548 = t3522*t3538*t3544;
  t3557 = Cos(var1[15]);
  t3559 = Sin(var1[4]);
  t3561 = -1.*t3557*t3559;
  t3576 = t3548 + t3561;
  t3496 = -1.*var1[17];
  t3498 = 0.226893 + t3496;
  t3605 = Cos(var1[17]);
  t3531 = t3510*t3522*t3526;
  t3584 = t3534*t3576;
  t3594 = t3531 + t3584;
  t3507 = Sin(var1[17]);
  t3612 = t3510*t3534*t3522;
  t3614 = -1.*t3526*t3576;
  t3617 = t3612 + t3614;
  t3640 = Cos(t3498);
  t3601 = -1.*t3507*t3594;
  t3622 = t3605*t3617;
  t3626 = t3601 + t3622;
  t3502 = Sin(t3498);
  t3643 = t3605*t3594;
  t3644 = t3507*t3617;
  t3646 = t3643 + t3644;
  t3659 = Cos(var1[21]);
  t3639 = t3502*t3626;
  t3648 = t3640*t3646;
  t3649 = t3639 + t3648;
  t3491 = Sin(var1[21]);
  t3662 = t3640*t3626;
  t3665 = -1.*t3502*t3646;
  t3670 = t3662 + t3665;
  t3737 = t3510*t3534*t3544;
  t3742 = -1.*t3538*t3526;
  t3746 = t3737 + t3742;
  t3719 = -1.*t3534*t3538;
  t3721 = -1.*t3510*t3544*t3526;
  t3724 = t3719 + t3721;
  t3736 = t3605*t3724;
  t3748 = -1.*t3746*t3507;
  t3769 = t3736 + t3748;
  t3779 = t3605*t3746;
  t3783 = t3724*t3507;
  t3788 = t3779 + t3783;
  t3825 = t3502*t3769;
  t3827 = t3640*t3788;
  t3835 = t3825 + t3827;
  t3776 = t3640*t3769;
  t3798 = -1.*t3502*t3788;
  t3814 = t3776 + t3798;
  t3885 = -1.*t3534*t3538*t3544;
  t3886 = -1.*t3510*t3526;
  t3898 = t3885 + t3886;
  t3872 = -1.*t3510*t3534;
  t3873 = t3538*t3544*t3526;
  t3877 = t3872 + t3873;
  t3880 = t3605*t3877;
  t3900 = -1.*t3898*t3507;
  t3909 = t3880 + t3900;
  t3912 = t3605*t3898;
  t3914 = t3877*t3507;
  t3930 = t3912 + t3914;
  t3971 = t3502*t3909;
  t3976 = t3640*t3930;
  t3977 = t3971 + t3976;
  t3911 = t3640*t3909;
  t3942 = -1.*t3502*t3930;
  t3952 = t3911 + t3942;
  t4046 = t3510*t3534*t3544*t3559;
  t4053 = -1.*t3538*t3526*t3559;
  t4056 = t4046 + t4053;
  t4060 = -1.*t3534*t3538*t3559;
  t4065 = -1.*t3510*t3544*t3526*t3559;
  t4066 = t4060 + t4065;
  t4058 = -1.*t3507*t4056;
  t4068 = t3605*t4066;
  t4072 = t4058 + t4068;
  t4077 = t3605*t4056;
  t4085 = t3507*t4066;
  t4088 = t4077 + t4085;
  t4075 = t3502*t4072;
  t4090 = t3640*t4088;
  t4098 = t4075 + t4090;
  t4109 = t3640*t4072;
  t4114 = -1.*t3502*t4088;
  t4125 = t4109 + t4114;
  t4166 = t3557*t3522;
  t4167 = t3538*t3544*t3559;
  t4170 = t4166 + t4167;
  t4165 = t3510*t3526*t3559;
  t4183 = t3534*t4170;
  t4210 = t4165 + t4183;
  t4235 = t3510*t3534*t3559;
  t4244 = -1.*t3526*t4170;
  t4258 = t4235 + t4244;
  t4222 = -1.*t3507*t4210;
  t4271 = t3605*t4258;
  t4274 = t4222 + t4271;
  t4294 = t3605*t4210;
  t4298 = t3507*t4258;
  t4300 = t4294 + t4298;
  t4285 = t3502*t4274;
  t4301 = t3640*t4300;
  t4316 = t4285 + t4301;
  t4323 = t3640*t4274;
  t4329 = -1.*t3502*t4300;
  t4331 = t4323 + t4329;
  t3820 = t3659*t3814;
  t3840 = -1.*t3835*t3491;
  t3845 = t3820 + t3840;
  t3848 = 0.766044*t3845;
  t3854 = t3659*t3835;
  t3859 = t3814*t3491;
  t3865 = t3854 + t3859;
  t3866 = 0.642788*t3865;
  t3870 = t3848 + t3866;
  t4319 = -1.*t3491*t4316;
  t4339 = t3659*t4331;
  t4340 = t4319 + t4339;
  t4342 = 0.766044*t4340;
  t4352 = t3659*t4316;
  t4354 = t3491*t4331;
  t4367 = t4352 + t4354;
  t4368 = 0.642788*t4367;
  t4371 = t4342 + t4368;
  t4387 = Power(t3870,2);
  t3658 = -1.*t3491*t3649;
  t3690 = t3659*t3670;
  t3694 = t3658 + t3690;
  t3699 = t3659*t3649;
  t3700 = t3491*t3670;
  t3705 = t3699 + t3700;
  t4393 = Power(t4371,2);
  t4448 = t3510*t3534*t3522*t3544;
  t4451 = -1.*t3522*t3538*t3526;
  t4452 = t4448 + t4451;
  t4431 = -1.*t3534*t3522*t3538;
  t4433 = -1.*t3510*t3522*t3544*t3526;
  t4442 = t4431 + t4433;
  t4447 = t3605*t4442;
  t4468 = -1.*t4452*t3507;
  t4479 = t4447 + t4468;
  t4490 = t3605*t4452;
  t4494 = t4442*t3507;
  t4496 = t4490 + t4494;
  t4511 = t3502*t4479;
  t4515 = t3640*t4496;
  t4520 = t4511 + t4515;
  t4488 = t3640*t4479;
  t4497 = -1.*t3502*t4496;
  t4498 = t4488 + t4497;
  t4402 = t4387 + t4393;
  t4407 = -0.766044*t3694;
  t4409 = -0.642788*t3705;
  t4414 = t4407 + t4409;
  t4415 = Power(t4414,2);
  t4426 = t4387 + t4415 + t4393;
  t4429 = 1/t4426;
  t3697 = 0.766044*t3694;
  t3708 = 0.642788*t3705;
  t3711 = t3697 + t3708;
  t4548 = -1.*t3510*t3557*t3605*t3526;
  t4549 = -1.*t3510*t3557*t3534*t3507;
  t4553 = t4548 + t4549;
  t4562 = t3510*t3557*t3534*t3605;
  t4571 = -1.*t3510*t3557*t3526*t3507;
  t4578 = t4562 + t4571;
  t4599 = t3502*t4553;
  t4601 = t3640*t4578;
  t4606 = t4599 + t4601;
  t4554 = t3640*t4553;
  t4581 = -1.*t3502*t4578;
  t4587 = t4554 + t4581;
  t4628 = -1.*t3522*t3544;
  t4633 = t3557*t3538*t3559;
  t4634 = t4628 + t4633;
  t4635 = -1.*t3605*t3526*t4634;
  t4637 = -1.*t3534*t3507*t4634;
  t4639 = t4635 + t4637;
  t4641 = t3534*t3605*t4634;
  t4642 = -1.*t3526*t3507*t4634;
  t4645 = t4641 + t4642;
  t4640 = t3502*t4639;
  t4647 = t3640*t4645;
  t4649 = t4640 + t4647;
  t4651 = t3640*t4639;
  t4652 = -1.*t3502*t4645;
  t4653 = t4651 + t4652;
  t4405 = 1/Sqrt(t4402);
  t4673 = t3557*t3522*t3538;
  t4682 = t3544*t3559;
  t4683 = t4673 + t4682;
  t4684 = -1.*t3605*t3526*t4683;
  t4685 = -1.*t3534*t3507*t4683;
  t4687 = t4684 + t4685;
  t4693 = t3534*t3605*t4683;
  t4694 = -1.*t3526*t3507*t4683;
  t4696 = t4693 + t4694;
  t4690 = t3502*t4687;
  t4700 = t3640*t4696;
  t4701 = t4690 + t4700;
  t4703 = t3640*t4687;
  t4704 = -1.*t3502*t4696;
  t4710 = t4703 + t4704;
  t4543 = Sqrt(t4402);
  t4751 = -1.*t3605;
  t4752 = 1. + t4751;
  t4778 = -1.*t3640;
  t4781 = 1. + t4778;
  t4787 = -1.*t3605*t3526;
  t4788 = -1.*t3534*t3507;
  t4789 = t4787 + t4788;
  t4800 = t3534*t3605;
  t4801 = -1.*t3526*t3507;
  t4803 = t4800 + t4801;
  t4814 = -1.*t3659;
  t4817 = 1. + t4814;
  t4826 = t3640*t4789;
  t4828 = -1.*t3502*t4803;
  t4829 = t4826 + t4828;
  t4807 = t3502*t4789;
  t4808 = t3640*t4803;
  t4810 = t4807 + t4808;
  t4757 = -0.049*t4752;
  t4759 = -0.21*t3507;
  t4761 = t4757 + t4759;
  t4769 = -0.21*t4752;
  t4773 = 0.049*t3507;
  t4776 = t4769 + t4773;
  t4793 = 0.01841*t4781;
  t4794 = -0.70544*t3502;
  t4799 = t4793 + t4794;
  t4782 = -0.70544*t4781;
  t4783 = -0.01841*t3502;
  t4785 = t4782 + t4783;
  t4871 = t3605*t3526;
  t4872 = t3534*t3507;
  t4875 = t4871 + t4872;
  t4818 = -0.02159*t4817;
  t4819 = -1.11344*t3491;
  t4820 = t4818 + t4819;
  t4834 = -1.11344*t4817;
  t4836 = 0.02159*t3491;
  t4839 = t4834 + t4836;
  t4885 = t3640*t4875;
  t4888 = t3502*t4803;
  t4889 = t4885 + t4888;
  t4893 = -1.*t3502*t4875;
  t4894 = t4893 + t4808;
  t4747 = 0.049*t3534;
  t4750 = -0.09*t3526;
  t4763 = t3534*t4761;
  t4777 = -1.*t3526*t4776;
  t4790 = t4785*t4789;
  t4804 = t4799*t4803;
  t4825 = t4810*t4820;
  t4840 = t4829*t4839;
  t4844 = t3659*t4829;
  t4845 = -1.*t4810*t3491;
  t4846 = t4844 + t4845;
  t4851 = -1.11344*t4846;
  t4853 = t3659*t4810;
  t4855 = t4829*t3491;
  t4857 = t4853 + t4855;
  t4859 = -0.02159*t4857;
  t4860 = t4747 + t4750 + t4763 + t4777 + t4790 + t4804 + t4825 + t4840 + t4851 + t4859;
  t4862 = 0.09*t3534;
  t4865 = 0.049*t3526;
  t4866 = t3526*t4761;
  t4867 = t3534*t4776;
  t4879 = t4799*t4875;
  t4883 = t4785*t4803;
  t4890 = t4889*t4820;
  t4896 = t4894*t4839;
  t4897 = t3659*t4889;
  t4902 = t4894*t3491;
  t4904 = t4897 + t4902;
  t4905 = -0.02159*t4904;
  t4906 = t3659*t4894;
  t4907 = -1.*t4889*t3491;
  t4908 = t4906 + t4907;
  t4911 = -1.11344*t4908;
  t4912 = t4862 + t4865 + t4866 + t4867 + t4879 + t4883 + t4890 + t4896 + t4905 + t4911;
  t4936 = -1.*t3534*t3605;
  t4938 = t3526*t3507;
  t4941 = t4936 + t4938;
  t4944 = t3502*t4941;
  t4945 = t4826 + t4944;
  t4948 = -1.*t3502*t4789;
  t4949 = t3640*t4941;
  t4953 = t4948 + t4949;
  t4971 = -0.049*t3534;
  t4972 = 0.09*t3526;
  t4973 = -1.*t3534*t4761;
  t4974 = t3526*t4776;
  t4975 = -1.*t4785*t4789;
  t4976 = -1.*t4799*t4803;
  t4978 = -1.*t4810*t4820;
  t4979 = -1.*t4829*t4839;
  t4985 = 1.11344*t4846;
  t4991 = 0.02159*t4857;
  t4992 = t4971 + t4972 + t4973 + t4974 + t4975 + t4976 + t4978 + t4979 + t4985 + t4991;
  t4924 = -0.09*t3534;
  t4928 = -0.049*t3526;
  t4930 = -1.*t3526*t4761;
  t4933 = -1.*t3534*t4776;
  t4997 = -1.*t4799*t4875;
  t5001 = -1.*t4785*t4803;
  t5002 = -1.*t4889*t4820;
  t5003 = -1.*t4894*t4839;
  t5005 = 0.02159*t4904;
  t5006 = 1.11344*t4908;
  t5009 = t4924 + t4928 + t4930 + t4933 + t4997 + t5001 + t5002 + t5003 + t5005 + t5006;
  t4957 = t3659*t4945;
  t4958 = t4953*t3491;
  t4960 = t4957 + t4958;
  t4962 = t3659*t4953;
  t4963 = -1.*t4945*t3491;
  t4964 = t4962 + t4963;
  t4994 = Power(t4992,2);
  t5010 = Power(t5009,2);
  t5013 = t4994 + t5010;
  t5015 = 1/t5013;
  t5034 = -1.*t3510*t3534*t3544;
  t5036 = t3538*t3526;
  t5039 = t5034 + t5036;
  t5042 = t5039*t3507;
  t5043 = t3736 + t5042;
  t5045 = t3605*t5039;
  t5047 = -1.*t3724*t3507;
  t5054 = t5045 + t5047;
  t5065 = -1.*t3502*t5043;
  t5067 = t3640*t5054;
  t5068 = t5065 + t5067;
  t5044 = t3640*t5043;
  t5060 = t3502*t5054;
  t5063 = t5044 + t5060;
  t5087 = -1.*t3510*t3526*t3559;
  t5088 = -1.*t3534*t4170;
  t5089 = t5087 + t5088;
  t5090 = t3507*t5089;
  t5091 = t5090 + t4271;
  t5106 = t3605*t5089;
  t5107 = -1.*t3507*t4258;
  t5108 = t5106 + t5107;
  t5096 = -1.*t3502*t5091;
  t5112 = t3640*t5108;
  t5113 = t5096 + t5112;
  t5118 = t3640*t5091;
  t5119 = t3502*t5108;
  t5120 = t5118 + t5119;
  t5142 = -1.*t3510*t3522*t3526;
  t5143 = -1.*t3534*t3576;
  t5145 = t5142 + t5143;
  t5146 = t3507*t5145;
  t5147 = t5146 + t3622;
  t5151 = t3605*t5145;
  t5152 = -1.*t3507*t3617;
  t5153 = t5151 + t5152;
  t5150 = -1.*t3502*t5147;
  t5154 = t3640*t5153;
  t5155 = t5150 + t5154;
  t5159 = t3640*t5147;
  t5161 = t3502*t5153;
  t5166 = t5159 + t5161;
  t4861 = Power(t4860,2);
  t4913 = Power(t4912,2);
  t4917 = 0.00002025 + t4861 + t4913;
  t4918 = 1/Sqrt(t4917);
  t5206 = t3502*t4875;
  t5208 = t4807 + t5206;
  t5224 = t4826 + t4885;
  t5188 = 0.049*t3605;
  t5189 = t5188 + t4759;
  t5192 = -0.21*t3605;
  t5193 = -0.049*t3507;
  t5194 = t5192 + t5193;
  t4935 = t4799*t4789;
  t5202 = 0.01841*t3640;
  t5203 = 0.70544*t3502;
  t5204 = t5202 + t5203;
  t5196 = 0.70544*t3640;
  t5198 = t5196 + t4783;
  t4942 = t4785*t4941;
  t5255 = t4888 + t4944;
  t5258 = t4808 + t4949;
  t5229 = t3659*t5208;
  t5232 = t5224*t3491;
  t5233 = t5229 + t5232;
  t5235 = t3659*t5224;
  t5236 = -1.*t5208*t3491;
  t5238 = t5235 + t5236;
  t5017 = -1.*t4799*t4789;
  t5019 = -1.*t4785*t4941;
  t5262 = t3659*t5255;
  t5264 = t5258*t3491;
  t5265 = t5262 + t5264;
  t5267 = t3659*t5258;
  t5268 = -1.*t5255*t3491;
  t5273 = t5267 + t5268;
  t5335 = -1.*t3605*t3594;
  t5336 = t5335 + t5152;
  t5337 = t3640*t5336;
  t5339 = t5337 + t3648;
  t5341 = t3502*t5336;
  t5342 = t3502*t3646;
  t5344 = t5341 + t5342;
  t5366 = -1.*t3605*t3746;
  t5368 = t5366 + t5047;
  t5378 = t3640*t5368;
  t5384 = t5378 + t3827;
  t5369 = t3502*t5368;
  t5371 = t3502*t3788;
  t5372 = t5369 + t5371;
  t5399 = -1.*t3605*t4210;
  t5402 = t5399 + t5107;
  t5404 = t3640*t5402;
  t5405 = t5404 + t4301;
  t5407 = t3502*t5402;
  t5409 = t3502*t4300;
  t5410 = t5407 + t5409;
  t5428 = 0.02159*t3659;
  t5432 = t5428 + t4819;
  t5435 = -1.11344*t3659;
  t5439 = -0.02159*t3491;
  t5442 = t5435 + t5439;
  t5464 = -1.*t3659*t4889;
  t5465 = -1.*t4894*t3491;
  t5466 = t5464 + t5465;
  t5446 = -1.*t3659*t4810;
  t5449 = -1.*t4829*t3491;
  t5454 = t5446 + t5449;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=1.;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0.5*t2278*(2.*t1963*t2198 + 2.*t1963*(-0.09*t19 + t2337 + t2383 + t1720*t2389 + t1474*t2407 - 0.02159*(t1395*t2389 + t1125*t2407) - 1.11344*(t1125*t2389 - 1.*t1395*t2407) - 0.049*t397 - 1.*t284*t397 - 1.*t19*t476));
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0.5*t2278*(2.*t1963*(t2337 + t2383 + t19*t2782 + t1101*t2833 + t1720*t3177 + t1474*t3187 - 0.02159*(t1395*t3177 + t1125*t3187) - 1.11344*(t1125*t3177 - 1.*t1395*t3187) - 1.*t2705*t397 + t2884*t903) + 2.*t2198*(t1120 + t19*t2705 + t2019*t2833 + t1101*t2884 + t1720*t2895 + t1474*t2923 - 0.02159*(t1395*t2895 + t1125*t2923) - 1.11344*(t1125*t2895 - 1.*t1395*t2923) + t2782*t397 + t905));
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.5*t2278*(2.*t1963*(-1.11344*(-1.*t1125*t1573 - 1.*t1395*t1785) - 0.02159*t1838 + t1573*t3357 + t1785*t3372) + 2.*t2198*(-1.11344*(-1.*t1395*t2037 - 1.*t1125*t2094) - 0.02159*t2161 + t2094*t3357 + t2037*t3372));
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=1.;
  p_output1[52]=0;
  p_output1[53]=0.5*t3711*(2.*t3870*(0.766044*(t3659*t3952 - 1.*t3491*t3977) + 0.642788*(t3491*t3952 + t3659*t3977)) + 2.*(0.642788*(t3659*t4098 + t3491*t4125) + 0.766044*(-1.*t3491*t4098 + t3659*t4125))*t4371)*t4405*t4429 + t4429*(-0.766044*(t3659*t4498 - 1.*t3491*t4520) - 0.642788*(t3491*t4498 + t3659*t4520))*t4543;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=1.;
  p_output1[62]=0.5*t3711*t4405*t4429*(2.*t3870*(0.766044*(t3659*t4587 - 1.*t3491*t4606) + 0.642788*(t3491*t4587 + t3659*t4606)) + 2.*t4371*(0.642788*(t3659*t4649 + t3491*t4653) + 0.766044*(-1.*t3491*t4649 + t3659*t4653))) + t4429*t4543*(-0.642788*(t3659*t4701 + t3491*t4710) - 0.766044*(-1.*t3491*t4701 + t3659*t4710));
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0.5*t4918*(2.*t4860*t4912 + 2.*t4860*(t4924 + t4928 + t4930 + t4933 + t4935 + t4942 + t4820*t4945 + t4839*t4953 - 0.02159*t4960 - 1.11344*t4964));
  p_output1[68]=t4860*t4992*t5015 + t5009*t5015*(t4862 + t4865 + t4866 + t4867 - 1.*t4820*t4945 - 1.*t4839*t4953 + 0.02159*t4960 + 1.11344*t4964 + t5017 + t5019);
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0.5*t3711*t4405*t4429*(2.*t3870*(0.642788*(t3659*t5063 + t3491*t5068) + 0.766044*(-1.*t3491*t5063 + t3659*t5068)) + 2.*t4371*(0.766044*(t3659*t5113 - 1.*t3491*t5120) + 0.642788*(t3491*t5113 + t3659*t5120))) + t4429*t4543*(-0.766044*(t3659*t5155 - 1.*t3491*t5166) - 0.642788*(t3491*t5155 + t3659*t5166));
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0.5*t4918*(2.*t4912*(t4790 + t4804 + t3534*t5189 + t3526*t5194 + t4875*t5198 + t4803*t5204 + t4820*t5208 + t4839*t5224 - 0.02159*t5233 - 1.11344*t5238) + 2.*t4860*(t4935 + t4942 - 1.*t3526*t5189 + t3534*t5194 + t4803*t5198 + t4789*t5204 + t4820*t5255 + t4839*t5258 - 0.02159*t5265 - 1.11344*t5273));
  p_output1[77]=t4860*t5015*(t4975 + t4976 - 1.*t3534*t5189 - 1.*t3526*t5194 - 1.*t4875*t5198 - 1.*t4803*t5204 - 1.*t4820*t5208 - 1.*t4839*t5224 + 0.02159*t5233 + 1.11344*t5238) + t5009*t5015*(t5017 + t5019 + t3526*t5189 - 1.*t3534*t5194 - 1.*t4803*t5198 - 1.*t4789*t5204 - 1.*t4820*t5255 - 1.*t4839*t5258 + 0.02159*t5265 + 1.11344*t5273);
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=t4429*t4543*(-0.766044*(t3659*t5339 - 1.*t3491*t5344) - 0.642788*(t3491*t5339 + t3659*t5344)) + 0.5*t3711*t4405*t4429*(2.*t3870*(0.642788*(t3659*t5372 + t3491*t5384) + 0.766044*(-1.*t3491*t5372 + t3659*t5384)) + 2.*t4371*(0.766044*(t3659*t5405 - 1.*t3491*t5410) + 0.642788*(t3491*t5405 + t3659*t5410)));
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0.5*t4918*(2.*t4860*(-0.02159*t4846 + t4829*t5432 + t4810*t5442 - 1.11344*t5454) + 2.*t4912*(-0.02159*t4908 + t4894*t5432 + t4889*t5442 - 1.11344*t5466));
  p_output1[86]=t5009*t5015*(0.02159*t4846 - 1.*t4829*t5432 - 1.*t4810*t5442 + 1.11344*t5454) + t4860*t5015*(0.02159*t4908 - 1.*t4894*t5432 - 1.*t4889*t5442 + 1.11344*t5466);
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0.5*t3711*(2.*(0.766044*(-1.*t3491*t3814 - 1.*t3659*t3835) + 0.642788*t3845)*t3870 + 2.*(0.766044*(-1.*t3659*t4316 - 1.*t3491*t4331) + 0.642788*t4340)*t4371)*t4405*t4429 + (-0.766044*(-1.*t3649*t3659 - 1.*t3491*t3670) - 0.642788*t3694)*t4429*t4543;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 10, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_yaLeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




