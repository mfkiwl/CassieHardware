/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:19:34 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_yaLeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t191;
  double t252;
  double t455;
  double t456;
  double t514;
  double t606;
  double t820;
  double t844;
  double t891;
  double t971;
  double t1012;
  double t1085;
  double t1114;
  double t1142;
  double t1150;
  double t1251;
  double t1334;
  double t1401;
  double t2008;
  double t2076;
  double t2087;
  double t2223;
  double t2430;
  double t2442;
  double t2511;
  double t2756;
  double t2759;
  double t2770;
  double t724;
  double t749;
  double t786;
  double t483;
  double t567;
  double t590;
  double t1167;
  double t1168;
  double t1243;
  double t1019;
  double t1108;
  double t1111;
  double t2624;
  double t2667;
  double t2723;
  double t3102;
  double t3124;
  double t3184;
  double t2164;
  double t2405;
  double t2409;
  double t3237;
  double t3244;
  double t3330;
  double t3376;
  double t3384;
  double t200;
  double t594;
  double t642;
  double t816;
  double t1157;
  double t1436;
  double t2533;
  double t2785;
  double t2786;
  double t2800;
  double t2826;
  double t2827;
  double t2846;
  double t2884;
  double t2909;
  double t2934;
  double t2940;
  double t2965;
  double t2968;
  double t3005;
  double t3099;
  double t3234;
  double t3235;
  double t3297;
  double t3408;
  double t3414;
  double t3415;
  double t3419;
  double t3420;
  double t3457;
  double t3461;
  double t3486;
  double t3501;
  double t3505;
  double t3677;
  double t3683;
  double t3686;
  double t3688;
  double t3689;
  double t3694;
  double t3820;
  double t3845;
  double t2961;
  double t3506;
  double t3509;
  double t3517;
  double t4273;
  double t4356;
  double t4379;
  double t4025;
  double t4028;
  double t4035;
  double t4017;
  double t4018;
  double t3653;
  double t4153;
  double t4177;
  double t4187;
  double t4088;
  double t4114;
  double t3687;
  double t4753;
  double t4765;
  double t5023;
  double t5027;
  double t4997;
  double t5009;
  double t5016;
  double t5337;
  double t5318;
  double t5356;
  double t5339;
  double t5362;
  double t5363;
  double t5367;
  double t5368;
  double t5370;
  double t5373;
  double t5390;
  double t5250;
  double t5261;
  double t5488;
  double t5343;
  double t5391;
  double t5393;
  double t5294;
  double t5527;
  double t5565;
  double t5573;
  double t5698;
  double t5475;
  double t5604;
  double t5606;
  double t5284;
  double t5721;
  double t5722;
  double t5731;
  double t5796;
  double t5692;
  double t5754;
  double t5772;
  double t5243;
  double t5803;
  double t5806;
  double t5807;
  double t5892;
  double t5894;
  double t5916;
  double t5866;
  double t5888;
  double t5890;
  double t5891;
  double t5918;
  double t5922;
  double t5934;
  double t5946;
  double t5956;
  double t5973;
  double t5975;
  double t5977;
  double t5924;
  double t5960;
  double t5967;
  double t6072;
  double t6075;
  double t6078;
  double t6062;
  double t6063;
  double t6066;
  double t6070;
  double t6080;
  double t6081;
  double t6086;
  double t6087;
  double t6093;
  double t6108;
  double t6111;
  double t6112;
  double t6083;
  double t6098;
  double t6100;
  double t6143;
  double t6146;
  double t6147;
  double t6159;
  double t6160;
  double t6167;
  double t6152;
  double t6175;
  double t6178;
  double t6180;
  double t6181;
  double t6183;
  double t6179;
  double t6184;
  double t6185;
  double t6187;
  double t6189;
  double t6190;
  double t6208;
  double t6210;
  double t6214;
  double t6200;
  double t6218;
  double t6221;
  double t6229;
  double t6239;
  double t6240;
  double t6227;
  double t6244;
  double t6260;
  double t6283;
  double t6286;
  double t6287;
  double t6270;
  double t6291;
  double t6299;
  double t6328;
  double t6334;
  double t6336;
  double t5969;
  double t5982;
  double t5995;
  double t5999;
  double t6005;
  double t6009;
  double t6016;
  double t6029;
  double t6045;
  double t6314;
  double t6337;
  double t6338;
  double t6339;
  double t6340;
  double t6345;
  double t6347;
  double t6354;
  double t6355;
  double t6374;
  double t5775;
  double t5817;
  double t5818;
  double t5825;
  double t5837;
  double t5851;
  double t6381;
  double t6421;
  double t6425;
  double t6429;
  double t6406;
  double t6407;
  double t6413;
  double t6416;
  double t6436;
  double t6444;
  double t6452;
  double t6456;
  double t6457;
  double t6464;
  double t6465;
  double t6469;
  double t6447;
  double t6461;
  double t6462;
  double t6385;
  double t6390;
  double t6391;
  double t6393;
  double t6394;
  double t6395;
  double t6397;
  double t5822;
  double t5853;
  double t5854;
  double t6510;
  double t6511;
  double t6519;
  double t6537;
  double t6539;
  double t6542;
  double t6564;
  double t6566;
  double t6567;
  double t6530;
  double t6544;
  double t6556;
  double t6602;
  double t6605;
  double t6609;
  double t6613;
  double t6616;
  double t6619;
  double t6623;
  double t6630;
  double t6631;
  double t6621;
  double t6632;
  double t6639;
  double t6644;
  double t6645;
  double t6650;
  double t6386;
  double t6683;
  double t6684;
  double t6686;
  double t6687;
  double t6691;
  double t6700;
  double t6715;
  double t6719;
  double t6727;
  double t6703;
  double t6728;
  double t6729;
  double t6731;
  double t6732;
  double t6734;
  double t6502;
  double t6760;
  double t6764;
  double t6785;
  double t6787;
  double t6803;
  double t6807;
  double t6811;
  double t6826;
  double t6828;
  double t6829;
  double t6838;
  double t6839;
  double t6865;
  double t6869;
  double t6873;
  double t6832;
  double t6833;
  double t6834;
  double t6772;
  double t6774;
  double t6775;
  double t6777;
  double t6778;
  double t6782;
  double t6819;
  double t6824;
  double t6825;
  double t6788;
  double t6795;
  double t6799;
  double t6919;
  double t6923;
  double t6924;
  double t6840;
  double t6845;
  double t6849;
  double t6874;
  double t6875;
  double t6877;
  double t6933;
  double t6939;
  double t6940;
  double t6945;
  double t6957;
  double t6758;
  double t6759;
  double t6776;
  double t6783;
  double t6815;
  double t6831;
  double t6861;
  double t6878;
  double t6879;
  double t6880;
  double t6881;
  double t6882;
  double t6886;
  double t6894;
  double t6895;
  double t6896;
  double t6898;
  double t6903;
  double t6907;
  double t6908;
  double t6911;
  double t6928;
  double t6929;
  double t6941;
  double t6961;
  double t6973;
  double t6975;
  double t6982;
  double t6996;
  double t7014;
  double t7017;
  double t7039;
  double t7065;
  double t7070;
  double t7110;
  double t7124;
  double t7132;
  double t7150;
  double t7156;
  double t7177;
  double t7190;
  double t7195;
  double t7272;
  double t7275;
  double t7293;
  double t7299;
  double t7303;
  double t7310;
  double t7314;
  double t7317;
  double t7319;
  double t7320;
  double t7322;
  double t7086;
  double t7102;
  double t7106;
  double t7107;
  double t7337;
  double t7338;
  double t7340;
  double t7348;
  double t7367;
  double t7370;
  double t7374;
  double t7201;
  double t7204;
  double t7216;
  double t7222;
  double t7227;
  double t7228;
  double t7334;
  double t7375;
  double t7378;
  double t7381;
  double t7416;
  double t7417;
  double t7419;
  double t7421;
  double t7424;
  double t7426;
  double t7427;
  double t7430;
  double t7446;
  double t7449;
  double t7450;
  double t7425;
  double t7431;
  double t7439;
  double t7469;
  double t7471;
  double t7473;
  double t7476;
  double t7477;
  double t7482;
  double t7485;
  double t7489;
  double t7481;
  double t7497;
  double t7498;
  double t7501;
  double t7505;
  double t7506;
  double t7530;
  double t7531;
  double t7534;
  double t7536;
  double t7542;
  double t7548;
  double t7549;
  double t7551;
  double t7546;
  double t7554;
  double t7555;
  double t7559;
  double t7560;
  double t7562;
  double t6899;
  double t7071;
  double t7073;
  double t7078;
  double t7612;
  double t7614;
  double t7619;
  double t7583;
  double t7584;
  double t7587;
  double t7591;
  double t7594;
  double t7108;
  double t7605;
  double t7607;
  double t7609;
  double t7599;
  double t7600;
  double t7140;
  double t7652;
  double t7654;
  double t7625;
  double t7631;
  double t7633;
  double t7638;
  double t7639;
  double t7640;
  double t7384;
  double t7385;
  double t7658;
  double t7661;
  double t7662;
  double t7666;
  double t7668;
  double t7669;
  double t7723;
  double t7725;
  double t7726;
  double t7728;
  double t7730;
  double t7731;
  double t7734;
  double t7751;
  double t7753;
  double t7758;
  double t7759;
  double t7754;
  double t7755;
  double t7756;
  double t7775;
  double t7776;
  double t7778;
  double t7779;
  double t7781;
  double t7784;
  double t7785;
  double t7812;
  double t7813;
  double t7818;
  double t7819;
  double t7825;
  double t7843;
  double t7845;
  double t7848;
  double t7830;
  double t7831;
  double t7832;
  t191 = Cos(var1[8]);
  t252 = Cos(var1[9]);
  t455 = -1.*t252;
  t456 = 1. + t455;
  t514 = Sin(var1[9]);
  t606 = Sin(var1[8]);
  t820 = -1.*var1[9];
  t844 = 0.226893 + t820;
  t891 = Cos(t844);
  t971 = -1.*t891;
  t1012 = 1. + t971;
  t1085 = Sin(t844);
  t1114 = -1.*t191*t514;
  t1142 = -1.*t252*t606;
  t1150 = t1114 + t1142;
  t1251 = t252*t191;
  t1334 = -1.*t514*t606;
  t1401 = t1251 + t1334;
  t2008 = Cos(var1[13]);
  t2076 = -1.*t2008;
  t2087 = 1. + t2076;
  t2223 = Sin(var1[13]);
  t2430 = t1085*t1150;
  t2442 = t891*t1401;
  t2511 = t2430 + t2442;
  t2756 = t891*t1150;
  t2759 = -1.*t1085*t1401;
  t2770 = t2756 + t2759;
  t724 = -0.21*t456;
  t749 = 0.049*t514;
  t786 = t724 + t749;
  t483 = -0.049*t456;
  t567 = -0.21*t514;
  t590 = t483 + t567;
  t1167 = 0.01841*t1012;
  t1168 = -0.70544*t1085;
  t1243 = t1167 + t1168;
  t1019 = -0.70544*t1012;
  t1108 = -0.01841*t1085;
  t1111 = t1019 + t1108;
  t2624 = -1.11344*t2087;
  t2667 = 0.02159*t2223;
  t2723 = t2624 + t2667;
  t3102 = t191*t514;
  t3124 = t252*t606;
  t3184 = t3102 + t3124;
  t2164 = -0.02159*t2087;
  t2405 = -1.11344*t2223;
  t2409 = t2164 + t2405;
  t3237 = -1.*t1085*t3184;
  t3244 = t3237 + t2442;
  t3330 = t891*t3184;
  t3376 = t1085*t1401;
  t3384 = t3330 + t3376;
  t200 = 0.049*t191;
  t594 = t191*t590;
  t642 = -0.09*t606;
  t816 = -1.*t786*t606;
  t1157 = t1111*t1150;
  t1436 = t1243*t1401;
  t2533 = t2409*t2511;
  t2785 = t2723*t2770;
  t2786 = -1.*t2223*t2511;
  t2800 = t2008*t2770;
  t2826 = t2786 + t2800;
  t2827 = -1.11344*t2826;
  t2846 = t2008*t2511;
  t2884 = t2223*t2770;
  t2909 = t2846 + t2884;
  t2934 = -0.02159*t2909;
  t2940 = t200 + t594 + t642 + t816 + t1157 + t1436 + t2533 + t2785 + t2827 + t2934;
  t2965 = 0.09*t191;
  t2968 = t191*t786;
  t3005 = 0.049*t606;
  t3099 = t590*t606;
  t3234 = t1243*t3184;
  t3235 = t1111*t1401;
  t3297 = t2723*t3244;
  t3408 = t2409*t3384;
  t3414 = t2223*t3244;
  t3415 = t2008*t3384;
  t3419 = t3414 + t3415;
  t3420 = -0.02159*t3419;
  t3457 = t2008*t3244;
  t3461 = -1.*t2223*t3384;
  t3486 = t3457 + t3461;
  t3501 = -1.11344*t3486;
  t3505 = t2965 + t2968 + t3005 + t3099 + t3234 + t3235 + t3297 + t3408 + t3420 + t3501;
  t3677 = -1.*t252*t191;
  t3683 = t514*t606;
  t3686 = t3677 + t3683;
  t3688 = -1.*t1085*t1150;
  t3689 = t891*t3686;
  t3694 = t3688 + t3689;
  t3820 = t1085*t3686;
  t3845 = t2756 + t3820;
  t2961 = Power(t2940,2);
  t3506 = Power(t3505,2);
  t3509 = 0.00002025 + t2961 + t3506;
  t3517 = 1/Sqrt(t3509);
  t4273 = t2756 + t3330;
  t4356 = t1085*t3184;
  t4379 = t2430 + t4356;
  t4025 = -0.21*t252;
  t4028 = -0.049*t514;
  t4035 = t4025 + t4028;
  t4017 = 0.049*t252;
  t4018 = t4017 + t567;
  t3653 = t1243*t1150;
  t4153 = 0.01841*t891;
  t4177 = 0.70544*t1085;
  t4187 = t4153 + t4177;
  t4088 = 0.70544*t891;
  t4114 = t4088 + t1108;
  t3687 = t1111*t3686;
  t4753 = t2442 + t3689;
  t4765 = t3376 + t3820;
  t5023 = 0.02159*t2008;
  t5027 = t5023 + t2405;
  t4997 = -1.11344*t2008;
  t5009 = -0.02159*t2223;
  t5016 = t4997 + t5009;
  t5337 = Cos(var1[4]);
  t5318 = Cos(var1[14]);
  t5356 = Cos(var1[16]);
  t5339 = Sin(var1[16]);
  t5362 = Sin(var1[14]);
  t5363 = Sin(var1[15]);
  t5367 = t5337*t5362*t5363;
  t5368 = Cos(var1[15]);
  t5370 = Sin(var1[4]);
  t5373 = -1.*t5368*t5370;
  t5390 = t5367 + t5373;
  t5250 = -1.*var1[17];
  t5261 = 0.226893 + t5250;
  t5488 = Cos(var1[17]);
  t5343 = t5318*t5337*t5339;
  t5391 = t5356*t5390;
  t5393 = t5343 + t5391;
  t5294 = Sin(var1[17]);
  t5527 = t5318*t5356*t5337;
  t5565 = -1.*t5339*t5390;
  t5573 = t5527 + t5565;
  t5698 = Cos(t5261);
  t5475 = -1.*t5294*t5393;
  t5604 = t5488*t5573;
  t5606 = t5475 + t5604;
  t5284 = Sin(t5261);
  t5721 = t5488*t5393;
  t5722 = t5294*t5573;
  t5731 = t5721 + t5722;
  t5796 = Cos(var1[21]);
  t5692 = t5284*t5606;
  t5754 = t5698*t5731;
  t5772 = t5692 + t5754;
  t5243 = Sin(var1[21]);
  t5803 = t5698*t5606;
  t5806 = -1.*t5284*t5731;
  t5807 = t5803 + t5806;
  t5892 = t5318*t5356*t5363;
  t5894 = -1.*t5362*t5339;
  t5916 = t5892 + t5894;
  t5866 = -1.*t5356*t5362;
  t5888 = -1.*t5318*t5363*t5339;
  t5890 = t5866 + t5888;
  t5891 = t5488*t5890;
  t5918 = -1.*t5916*t5294;
  t5922 = t5891 + t5918;
  t5934 = t5488*t5916;
  t5946 = t5890*t5294;
  t5956 = t5934 + t5946;
  t5973 = t5284*t5922;
  t5975 = t5698*t5956;
  t5977 = t5973 + t5975;
  t5924 = t5698*t5922;
  t5960 = -1.*t5284*t5956;
  t5967 = t5924 + t5960;
  t6072 = -1.*t5356*t5362*t5363;
  t6075 = -1.*t5318*t5339;
  t6078 = t6072 + t6075;
  t6062 = -1.*t5318*t5356;
  t6063 = t5362*t5363*t5339;
  t6066 = t6062 + t6063;
  t6070 = t5488*t6066;
  t6080 = -1.*t6078*t5294;
  t6081 = t6070 + t6080;
  t6086 = t5488*t6078;
  t6087 = t6066*t5294;
  t6093 = t6086 + t6087;
  t6108 = t5284*t6081;
  t6111 = t5698*t6093;
  t6112 = t6108 + t6111;
  t6083 = t5698*t6081;
  t6098 = -1.*t5284*t6093;
  t6100 = t6083 + t6098;
  t6143 = t5318*t5356*t5363*t5370;
  t6146 = -1.*t5362*t5339*t5370;
  t6147 = t6143 + t6146;
  t6159 = -1.*t5356*t5362*t5370;
  t6160 = -1.*t5318*t5363*t5339*t5370;
  t6167 = t6159 + t6160;
  t6152 = -1.*t5294*t6147;
  t6175 = t5488*t6167;
  t6178 = t6152 + t6175;
  t6180 = t5488*t6147;
  t6181 = t5294*t6167;
  t6183 = t6180 + t6181;
  t6179 = t5284*t6178;
  t6184 = t5698*t6183;
  t6185 = t6179 + t6184;
  t6187 = t5698*t6178;
  t6189 = -1.*t5284*t6183;
  t6190 = t6187 + t6189;
  t6208 = t5368*t5337;
  t6210 = t5362*t5363*t5370;
  t6214 = t6208 + t6210;
  t6200 = t5318*t5339*t5370;
  t6218 = t5356*t6214;
  t6221 = t6200 + t6218;
  t6229 = t5318*t5356*t5370;
  t6239 = -1.*t5339*t6214;
  t6240 = t6229 + t6239;
  t6227 = -1.*t5294*t6221;
  t6244 = t5488*t6240;
  t6260 = t6227 + t6244;
  t6283 = t5488*t6221;
  t6286 = t5294*t6240;
  t6287 = t6283 + t6286;
  t6270 = t5284*t6260;
  t6291 = t5698*t6287;
  t6299 = t6270 + t6291;
  t6328 = t5698*t6260;
  t6334 = -1.*t5284*t6287;
  t6336 = t6328 + t6334;
  t5969 = t5796*t5967;
  t5982 = -1.*t5977*t5243;
  t5995 = t5969 + t5982;
  t5999 = 0.766044*t5995;
  t6005 = t5796*t5977;
  t6009 = t5967*t5243;
  t6016 = t6005 + t6009;
  t6029 = 0.642788*t6016;
  t6045 = t5999 + t6029;
  t6314 = -1.*t5243*t6299;
  t6337 = t5796*t6336;
  t6338 = t6314 + t6337;
  t6339 = 0.766044*t6338;
  t6340 = t5796*t6299;
  t6345 = t5243*t6336;
  t6347 = t6340 + t6345;
  t6354 = 0.642788*t6347;
  t6355 = t6339 + t6354;
  t6374 = Power(t6045,2);
  t5775 = -1.*t5243*t5772;
  t5817 = t5796*t5807;
  t5818 = t5775 + t5817;
  t5825 = t5796*t5772;
  t5837 = t5243*t5807;
  t5851 = t5825 + t5837;
  t6381 = Power(t6355,2);
  t6421 = t5318*t5356*t5337*t5363;
  t6425 = -1.*t5337*t5362*t5339;
  t6429 = t6421 + t6425;
  t6406 = -1.*t5356*t5337*t5362;
  t6407 = -1.*t5318*t5337*t5363*t5339;
  t6413 = t6406 + t6407;
  t6416 = t5488*t6413;
  t6436 = -1.*t6429*t5294;
  t6444 = t6416 + t6436;
  t6452 = t5488*t6429;
  t6456 = t6413*t5294;
  t6457 = t6452 + t6456;
  t6464 = t5284*t6444;
  t6465 = t5698*t6457;
  t6469 = t6464 + t6465;
  t6447 = t5698*t6444;
  t6461 = -1.*t5284*t6457;
  t6462 = t6447 + t6461;
  t6385 = t6374 + t6381;
  t6390 = -0.766044*t5818;
  t6391 = -0.642788*t5851;
  t6393 = t6390 + t6391;
  t6394 = Power(t6393,2);
  t6395 = t6374 + t6394 + t6381;
  t6397 = 1/t6395;
  t5822 = 0.766044*t5818;
  t5853 = 0.642788*t5851;
  t5854 = t5822 + t5853;
  t6510 = -1.*t5318*t5368*t5488*t5339;
  t6511 = -1.*t5318*t5368*t5356*t5294;
  t6519 = t6510 + t6511;
  t6537 = t5318*t5368*t5356*t5488;
  t6539 = -1.*t5318*t5368*t5339*t5294;
  t6542 = t6537 + t6539;
  t6564 = t5284*t6519;
  t6566 = t5698*t6542;
  t6567 = t6564 + t6566;
  t6530 = t5698*t6519;
  t6544 = -1.*t5284*t6542;
  t6556 = t6530 + t6544;
  t6602 = -1.*t5337*t5363;
  t6605 = t5368*t5362*t5370;
  t6609 = t6602 + t6605;
  t6613 = -1.*t5488*t5339*t6609;
  t6616 = -1.*t5356*t5294*t6609;
  t6619 = t6613 + t6616;
  t6623 = t5356*t5488*t6609;
  t6630 = -1.*t5339*t5294*t6609;
  t6631 = t6623 + t6630;
  t6621 = t5284*t6619;
  t6632 = t5698*t6631;
  t6639 = t6621 + t6632;
  t6644 = t5698*t6619;
  t6645 = -1.*t5284*t6631;
  t6650 = t6644 + t6645;
  t6386 = 1/Sqrt(t6385);
  t6683 = t5368*t5337*t5362;
  t6684 = t5363*t5370;
  t6686 = t6683 + t6684;
  t6687 = -1.*t5488*t5339*t6686;
  t6691 = -1.*t5356*t5294*t6686;
  t6700 = t6687 + t6691;
  t6715 = t5356*t5488*t6686;
  t6719 = -1.*t5339*t5294*t6686;
  t6727 = t6715 + t6719;
  t6703 = t5284*t6700;
  t6728 = t5698*t6727;
  t6729 = t6703 + t6728;
  t6731 = t5698*t6700;
  t6732 = -1.*t5284*t6727;
  t6734 = t6731 + t6732;
  t6502 = Sqrt(t6385);
  t6760 = -1.*t5488;
  t6764 = 1. + t6760;
  t6785 = -1.*t5698;
  t6787 = 1. + t6785;
  t6803 = -1.*t5488*t5339;
  t6807 = -1.*t5356*t5294;
  t6811 = t6803 + t6807;
  t6826 = t5356*t5488;
  t6828 = -1.*t5339*t5294;
  t6829 = t6826 + t6828;
  t6838 = -1.*t5796;
  t6839 = 1. + t6838;
  t6865 = t5698*t6811;
  t6869 = -1.*t5284*t6829;
  t6873 = t6865 + t6869;
  t6832 = t5284*t6811;
  t6833 = t5698*t6829;
  t6834 = t6832 + t6833;
  t6772 = -0.049*t6764;
  t6774 = -0.21*t5294;
  t6775 = t6772 + t6774;
  t6777 = -0.21*t6764;
  t6778 = 0.049*t5294;
  t6782 = t6777 + t6778;
  t6819 = 0.01841*t6787;
  t6824 = -0.70544*t5284;
  t6825 = t6819 + t6824;
  t6788 = -0.70544*t6787;
  t6795 = -0.01841*t5284;
  t6799 = t6788 + t6795;
  t6919 = t5488*t5339;
  t6923 = t5356*t5294;
  t6924 = t6919 + t6923;
  t6840 = -0.02159*t6839;
  t6845 = -1.11344*t5243;
  t6849 = t6840 + t6845;
  t6874 = -1.11344*t6839;
  t6875 = 0.02159*t5243;
  t6877 = t6874 + t6875;
  t6933 = t5698*t6924;
  t6939 = t5284*t6829;
  t6940 = t6933 + t6939;
  t6945 = -1.*t5284*t6924;
  t6957 = t6945 + t6833;
  t6758 = 0.049*t5356;
  t6759 = -0.09*t5339;
  t6776 = t5356*t6775;
  t6783 = -1.*t5339*t6782;
  t6815 = t6799*t6811;
  t6831 = t6825*t6829;
  t6861 = t6834*t6849;
  t6878 = t6873*t6877;
  t6879 = t5796*t6873;
  t6880 = -1.*t6834*t5243;
  t6881 = t6879 + t6880;
  t6882 = -1.11344*t6881;
  t6886 = t5796*t6834;
  t6894 = t6873*t5243;
  t6895 = t6886 + t6894;
  t6896 = -0.02159*t6895;
  t6898 = t6758 + t6759 + t6776 + t6783 + t6815 + t6831 + t6861 + t6878 + t6882 + t6896;
  t6903 = 0.09*t5356;
  t6907 = 0.049*t5339;
  t6908 = t5339*t6775;
  t6911 = t5356*t6782;
  t6928 = t6825*t6924;
  t6929 = t6799*t6829;
  t6941 = t6940*t6849;
  t6961 = t6957*t6877;
  t6973 = t5796*t6940;
  t6975 = t6957*t5243;
  t6982 = t6973 + t6975;
  t6996 = -0.02159*t6982;
  t7014 = t5796*t6957;
  t7017 = -1.*t6940*t5243;
  t7039 = t7014 + t7017;
  t7065 = -1.11344*t7039;
  t7070 = t6903 + t6907 + t6908 + t6911 + t6928 + t6929 + t6941 + t6961 + t6996 + t7065;
  t7110 = -1.*t5356*t5488;
  t7124 = t5339*t5294;
  t7132 = t7110 + t7124;
  t7150 = t5284*t7132;
  t7156 = t6865 + t7150;
  t7177 = -1.*t5284*t6811;
  t7190 = t5698*t7132;
  t7195 = t7177 + t7190;
  t7272 = -0.049*t5356;
  t7275 = 0.09*t5339;
  t7293 = -1.*t5356*t6775;
  t7299 = t5339*t6782;
  t7303 = -1.*t6799*t6811;
  t7310 = -1.*t6825*t6829;
  t7314 = -1.*t6834*t6849;
  t7317 = -1.*t6873*t6877;
  t7319 = 1.11344*t6881;
  t7320 = 0.02159*t6895;
  t7322 = t7272 + t7275 + t7293 + t7299 + t7303 + t7310 + t7314 + t7317 + t7319 + t7320;
  t7086 = -0.09*t5356;
  t7102 = -0.049*t5339;
  t7106 = -1.*t5339*t6775;
  t7107 = -1.*t5356*t6782;
  t7337 = -1.*t6825*t6924;
  t7338 = -1.*t6799*t6829;
  t7340 = -1.*t6940*t6849;
  t7348 = -1.*t6957*t6877;
  t7367 = 0.02159*t6982;
  t7370 = 1.11344*t7039;
  t7374 = t7086 + t7102 + t7106 + t7107 + t7337 + t7338 + t7340 + t7348 + t7367 + t7370;
  t7201 = t5796*t7156;
  t7204 = t7195*t5243;
  t7216 = t7201 + t7204;
  t7222 = t5796*t7195;
  t7227 = -1.*t7156*t5243;
  t7228 = t7222 + t7227;
  t7334 = Power(t7322,2);
  t7375 = Power(t7374,2);
  t7378 = t7334 + t7375;
  t7381 = 1/t7378;
  t7416 = -1.*t5318*t5356*t5363;
  t7417 = t5362*t5339;
  t7419 = t7416 + t7417;
  t7421 = t7419*t5294;
  t7424 = t5891 + t7421;
  t7426 = t5488*t7419;
  t7427 = -1.*t5890*t5294;
  t7430 = t7426 + t7427;
  t7446 = -1.*t5284*t7424;
  t7449 = t5698*t7430;
  t7450 = t7446 + t7449;
  t7425 = t5698*t7424;
  t7431 = t5284*t7430;
  t7439 = t7425 + t7431;
  t7469 = -1.*t5318*t5339*t5370;
  t7471 = -1.*t5356*t6214;
  t7473 = t7469 + t7471;
  t7476 = t5294*t7473;
  t7477 = t7476 + t6244;
  t7482 = t5488*t7473;
  t7485 = -1.*t5294*t6240;
  t7489 = t7482 + t7485;
  t7481 = -1.*t5284*t7477;
  t7497 = t5698*t7489;
  t7498 = t7481 + t7497;
  t7501 = t5698*t7477;
  t7505 = t5284*t7489;
  t7506 = t7501 + t7505;
  t7530 = -1.*t5318*t5337*t5339;
  t7531 = -1.*t5356*t5390;
  t7534 = t7530 + t7531;
  t7536 = t5294*t7534;
  t7542 = t7536 + t5604;
  t7548 = t5488*t7534;
  t7549 = -1.*t5294*t5573;
  t7551 = t7548 + t7549;
  t7546 = -1.*t5284*t7542;
  t7554 = t5698*t7551;
  t7555 = t7546 + t7554;
  t7559 = t5698*t7542;
  t7560 = t5284*t7551;
  t7562 = t7559 + t7560;
  t6899 = Power(t6898,2);
  t7071 = Power(t7070,2);
  t7073 = 0.00002025 + t6899 + t7071;
  t7078 = 1/Sqrt(t7073);
  t7612 = t5284*t6924;
  t7614 = t6832 + t7612;
  t7619 = t6865 + t6933;
  t7583 = 0.049*t5488;
  t7584 = t7583 + t6774;
  t7587 = -0.21*t5488;
  t7591 = -0.049*t5294;
  t7594 = t7587 + t7591;
  t7108 = t6825*t6811;
  t7605 = 0.01841*t5698;
  t7607 = 0.70544*t5284;
  t7609 = t7605 + t7607;
  t7599 = 0.70544*t5698;
  t7600 = t7599 + t6795;
  t7140 = t6799*t7132;
  t7652 = t6939 + t7150;
  t7654 = t6833 + t7190;
  t7625 = t5796*t7614;
  t7631 = t7619*t5243;
  t7633 = t7625 + t7631;
  t7638 = t5796*t7619;
  t7639 = -1.*t7614*t5243;
  t7640 = t7638 + t7639;
  t7384 = -1.*t6825*t6811;
  t7385 = -1.*t6799*t7132;
  t7658 = t5796*t7652;
  t7661 = t7654*t5243;
  t7662 = t7658 + t7661;
  t7666 = t5796*t7654;
  t7668 = -1.*t7652*t5243;
  t7669 = t7666 + t7668;
  t7723 = -1.*t5488*t5393;
  t7725 = t7723 + t7549;
  t7726 = t5698*t7725;
  t7728 = t7726 + t5754;
  t7730 = t5284*t7725;
  t7731 = t5284*t5731;
  t7734 = t7730 + t7731;
  t7751 = -1.*t5488*t5916;
  t7753 = t7751 + t7427;
  t7758 = t5698*t7753;
  t7759 = t7758 + t5975;
  t7754 = t5284*t7753;
  t7755 = t5284*t5956;
  t7756 = t7754 + t7755;
  t7775 = -1.*t5488*t6221;
  t7776 = t7775 + t7485;
  t7778 = t5698*t7776;
  t7779 = t7778 + t6291;
  t7781 = t5284*t7776;
  t7784 = t5284*t6287;
  t7785 = t7781 + t7784;
  t7812 = 0.02159*t5796;
  t7813 = t7812 + t6845;
  t7818 = -1.11344*t5796;
  t7819 = -0.02159*t5243;
  t7825 = t7818 + t7819;
  t7843 = -1.*t5796*t6940;
  t7845 = -1.*t6957*t5243;
  t7848 = t7843 + t7845;
  t7830 = -1.*t5796*t6834;
  t7831 = -1.*t6873*t5243;
  t7832 = t7830 + t7831;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=1.;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0.5*t3517*(2.*t2940*t3505 + 2.*t2940*(-0.09*t191 + t3653 + t3687 + t2723*t3694 + t2409*t3845 - 0.02159*(t2223*t3694 + t2008*t3845) - 1.11344*(t2008*t3694 - 1.*t2223*t3845) - 0.049*t606 - 1.*t590*t606 - 1.*t191*t786));
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0.5*t3517*(2.*t2940*(t3653 + t3687 + t191*t4035 + t1401*t4114 + t1150*t4187 + t2723*t4753 + t2409*t4765 - 0.02159*(t2223*t4753 + t2008*t4765) - 1.11344*(t2008*t4753 - 1.*t2223*t4765) - 1.*t4018*t606) + 2.*t3505*(t1157 + t1436 + t191*t4018 + t3184*t4114 + t1401*t4187 + t2723*t4273 + t2409*t4379 - 0.02159*(t2223*t4273 + t2008*t4379) - 1.11344*(t2008*t4273 - 1.*t2223*t4379) + t4035*t606));
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.5*t3517*(2.*t2940*(-1.11344*(-1.*t2008*t2511 - 1.*t2223*t2770) - 0.02159*t2826 + t2511*t5016 + t2770*t5027) + 2.*t3505*(-1.11344*(-1.*t2223*t3244 - 1.*t2008*t3384) - 0.02159*t3486 + t3384*t5016 + t3244*t5027));
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=1.;
  p_output1[52]=0;
  p_output1[53]=0.5*t5854*(2.*t6045*(0.766044*(t5796*t6100 - 1.*t5243*t6112) + 0.642788*(t5243*t6100 + t5796*t6112)) + 2.*(0.642788*(t5796*t6185 + t5243*t6190) + 0.766044*(-1.*t5243*t6185 + t5796*t6190))*t6355)*t6386*t6397 + t6397*(-0.766044*(t5796*t6462 - 1.*t5243*t6469) - 0.642788*(t5243*t6462 + t5796*t6469))*t6502;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=1.;
  p_output1[62]=0.5*t5854*t6386*t6397*(2.*t6045*(0.766044*(t5796*t6556 - 1.*t5243*t6567) + 0.642788*(t5243*t6556 + t5796*t6567)) + 2.*t6355*(0.642788*(t5796*t6639 + t5243*t6650) + 0.766044*(-1.*t5243*t6639 + t5796*t6650))) + t6397*t6502*(-0.642788*(t5796*t6729 + t5243*t6734) - 0.766044*(-1.*t5243*t6729 + t5796*t6734));
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0.5*t7078*(2.*t6898*t7070 + 2.*t6898*(t7086 + t7102 + t7106 + t7107 + t7108 + t7140 + t6849*t7156 + t6877*t7195 - 0.02159*t7216 - 1.11344*t7228));
  p_output1[68]=t6898*t7322*t7381 + t7374*t7381*(t6903 + t6907 + t6908 + t6911 - 1.*t6849*t7156 - 1.*t6877*t7195 + 0.02159*t7216 + 1.11344*t7228 + t7384 + t7385);
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0.5*t5854*t6386*t6397*(2.*t6045*(0.642788*(t5796*t7439 + t5243*t7450) + 0.766044*(-1.*t5243*t7439 + t5796*t7450)) + 2.*t6355*(0.766044*(t5796*t7498 - 1.*t5243*t7506) + 0.642788*(t5243*t7498 + t5796*t7506))) + t6397*t6502*(-0.766044*(t5796*t7555 - 1.*t5243*t7562) - 0.642788*(t5243*t7555 + t5796*t7562));
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0.5*t7078*(2.*t7070*(t6815 + t6831 + t5356*t7584 + t5339*t7594 + t6924*t7600 + t6829*t7609 + t6849*t7614 + t6877*t7619 - 0.02159*t7633 - 1.11344*t7640) + 2.*t6898*(t7108 + t7140 - 1.*t5339*t7584 + t5356*t7594 + t6829*t7600 + t6811*t7609 + t6849*t7652 + t6877*t7654 - 0.02159*t7662 - 1.11344*t7669));
  p_output1[77]=t6898*t7381*(t7303 + t7310 - 1.*t5356*t7584 - 1.*t5339*t7594 - 1.*t6924*t7600 - 1.*t6829*t7609 - 1.*t6849*t7614 - 1.*t6877*t7619 + 0.02159*t7633 + 1.11344*t7640) + t7374*t7381*(t7384 + t7385 + t5339*t7584 - 1.*t5356*t7594 - 1.*t6829*t7600 - 1.*t6811*t7609 - 1.*t6849*t7652 - 1.*t6877*t7654 + 0.02159*t7662 + 1.11344*t7669);
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=t6397*t6502*(-0.766044*(t5796*t7728 - 1.*t5243*t7734) - 0.642788*(t5243*t7728 + t5796*t7734)) + 0.5*t5854*t6386*t6397*(2.*t6045*(0.642788*(t5796*t7756 + t5243*t7759) + 0.766044*(-1.*t5243*t7756 + t5796*t7759)) + 2.*t6355*(0.766044*(t5796*t7779 - 1.*t5243*t7785) + 0.642788*(t5243*t7779 + t5796*t7785)));
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0.5*t7078*(2.*t6898*(-0.02159*t6881 + t6873*t7813 + t6834*t7825 - 1.11344*t7832) + 2.*t7070*(-0.02159*t7039 + t6957*t7813 + t6940*t7825 - 1.11344*t7848));
  p_output1[86]=t7374*t7381*(0.02159*t6881 - 1.*t6873*t7813 - 1.*t6834*t7825 + 1.11344*t7832) + t6898*t7381*(0.02159*t7039 - 1.*t6957*t7813 - 1.*t6940*t7825 + 1.11344*t7848);
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0.5*t5854*(2.*(0.766044*(-1.*t5243*t5967 - 1.*t5796*t5977) + 0.642788*t5995)*t6045 + 2.*(0.766044*(-1.*t5796*t6299 - 1.*t5243*t6336) + 0.642788*t6338)*t6355)*t6386*t6397 + (-0.766044*(-1.*t5772*t5796 - 1.*t5243*t5807) - 0.642788*t5818)*t6397*t6502;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 10, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_yaLeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




