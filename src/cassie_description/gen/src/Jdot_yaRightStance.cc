/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:53 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_yaRightStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t424;
  double t602;
  double t287;
  double t289;
  double t312;
  double t419;
  double t448;
  double t457;
  double t460;
  double t541;
  double t626;
  double t149;
  double t192;
  double t829;
  double t566;
  double t636;
  double t671;
  double t262;
  double t832;
  double t839;
  double t841;
  double t1020;
  double t812;
  double t849;
  double t889;
  double t219;
  double t1056;
  double t1108;
  double t1109;
  double t1153;
  double t996;
  double t1117;
  double t1131;
  double t15;
  double t1174;
  double t1179;
  double t1207;
  double t1272;
  double t1277;
  double t1346;
  double t1382;
  double t1502;
  double t1503;
  double t1370;
  double t1586;
  double t1589;
  double t1798;
  double t1827;
  double t1830;
  double t1735;
  double t1879;
  double t1898;
  double t1931;
  double t1974;
  double t1980;
  double t2073;
  double t2087;
  double t2089;
  double t2104;
  double t2121;
  double t2135;
  double t2102;
  double t2200;
  double t2287;
  double t2292;
  double t2297;
  double t2301;
  double t2291;
  double t2311;
  double t2323;
  double t2342;
  double t2351;
  double t2373;
  double t2456;
  double t2481;
  double t2489;
  double t2535;
  double t2555;
  double t2567;
  double t2531;
  double t2568;
  double t2576;
  double t2595;
  double t2611;
  double t2631;
  double t2578;
  double t2636;
  double t2637;
  double t2658;
  double t2660;
  double t2677;
  double t2792;
  double t2839;
  double t2846;
  double t2849;
  double t2859;
  double t2894;
  double t2904;
  double t2915;
  double t2917;
  double t2898;
  double t2939;
  double t2956;
  double t3012;
  double t3026;
  double t3049;
  double t2989;
  double t3051;
  double t3063;
  double t3092;
  double t3103;
  double t3112;
  double t1906;
  double t1995;
  double t2005;
  double t2008;
  double t2017;
  double t2021;
  double t2028;
  double t2044;
  double t2049;
  double t3088;
  double t3121;
  double t3131;
  double t3158;
  double t3167;
  double t3170;
  double t3172;
  double t3181;
  double t3194;
  double t3206;
  double t1152;
  double t1210;
  double t1213;
  double t1241;
  double t1243;
  double t1250;
  double t3208;
  double t3269;
  double t3275;
  double t3281;
  double t3285;
  double t3288;
  double t3364;
  double t3284;
  double t3408;
  double t3411;
  double t3416;
  double t3421;
  double t3424;
  double t3415;
  double t3426;
  double t3430;
  double t3435;
  double t3436;
  double t3439;
  double t3209;
  double t3220;
  double t3235;
  double t3245;
  double t3251;
  double t3256;
  double t3262;
  double t1233;
  double t1260;
  double t1265;
  double t3521;
  double t3531;
  double t3532;
  double t3572;
  double t3584;
  double t3602;
  double t3548;
  double t3612;
  double t3615;
  double t3626;
  double t3639;
  double t3643;
  double t3736;
  double t3737;
  double t3769;
  double t3776;
  double t3779;
  double t3780;
  double t3784;
  double t3793;
  double t3796;
  double t3783;
  double t3801;
  double t3806;
  double t3820;
  double t3825;
  double t3827;
  double t3214;
  double t3914;
  double t3923;
  double t3943;
  double t3949;
  double t3954;
  double t3961;
  double t3976;
  double t3979;
  double t3992;
  double t3971;
  double t3998;
  double t4004;
  double t4016;
  double t4019;
  double t4025;
  double t3483;
  double t4090;
  double t4099;
  double t4150;
  double t4152;
  double t4166;
  double t4167;
  double t4183;
  double t4271;
  double t4274;
  double t4285;
  double t4295;
  double t4298;
  double t4352;
  double t4354;
  double t4364;
  double t4394;
  double t4402;
  double t4412;
  double t4129;
  double t4134;
  double t4135;
  double t4100;
  double t4109;
  double t4118;
  double t4219;
  double t4225;
  double t4235;
  double t4154;
  double t4164;
  double t4165;
  double t4381;
  double t4387;
  double t4393;
  double t4515;
  double t4523;
  double t4528;
  double t4301;
  double t4323;
  double t4339;
  double t4535;
  double t4539;
  double t4542;
  double t4544;
  double t4545;
  double t4085;
  double t4126;
  double t4128;
  double t4140;
  double t4211;
  double t4294;
  double t4380;
  double t4414;
  double t4415;
  double t4424;
  double t4426;
  double t4430;
  double t4442;
  double t4447;
  double t4448;
  double t4449;
  double t4479;
  double t4490;
  double t4494;
  double t4499;
  double t4511;
  double t4533;
  double t4534;
  double t4540;
  double t4553;
  double t4554;
  double t4562;
  double t4596;
  double t4599;
  double t4601;
  double t4607;
  double t4609;
  double t4611;
  double t4612;
  double t4647;
  double t4650;
  double t4651;
  double t4655;
  double t4656;
  double t4657;
  double t4660;
  double t4661;
  double t4720;
  double t4726;
  double t4729;
  double t4733;
  double t4739;
  double t4740;
  double t4741;
  double t4742;
  double t4743;
  double t4744;
  double t4763;
  double t4627;
  double t4633;
  double t4639;
  double t4640;
  double t4807;
  double t4808;
  double t4825;
  double t4826;
  double t4840;
  double t4844;
  double t4853;
  double t4663;
  double t4666;
  double t4671;
  double t4682;
  double t4687;
  double t4690;
  double t4800;
  double t4855;
  double t4871;
  double t4872;
  double t4920;
  double t4921;
  double t4938;
  double t4944;
  double t4947;
  double t4954;
  double t4956;
  double t4957;
  double t4949;
  double t4958;
  double t4961;
  double t4965;
  double t4966;
  double t4967;
  double t5016;
  double t5021;
  double t5022;
  double t5024;
  double t5025;
  double t5028;
  double t5030;
  double t5033;
  double t5027;
  double t5036;
  double t5039;
  double t5042;
  double t5044;
  double t5045;
  double t5081;
  double t5086;
  double t5089;
  double t5090;
  double t5106;
  double t5112;
  double t5117;
  double t5118;
  double t5108;
  double t5119;
  double t5121;
  double t5123;
  double t5124;
  double t5126;
  double t4488;
  double t4616;
  double t4617;
  double t4622;
  double t5187;
  double t5195;
  double t5200;
  double t5159;
  double t5161;
  double t5167;
  double t5153;
  double t5154;
  double t4641;
  double t5178;
  double t5180;
  double t5181;
  double t5170;
  double t5172;
  double t4654;
  double t5253;
  double t5260;
  double t5206;
  double t5211;
  double t5221;
  double t5229;
  double t5232;
  double t5234;
  double t4883;
  double t4885;
  double t5264;
  double t5266;
  double t5267;
  double t5279;
  double t5280;
  double t5281;
  double t5336;
  double t5337;
  double t5340;
  double t5341;
  double t5347;
  double t5349;
  double t5350;
  double t5375;
  double t5378;
  double t5385;
  double t5386;
  double t5391;
  double t5392;
  double t5395;
  double t5412;
  double t5413;
  double t5414;
  double t5416;
  double t5418;
  double t5420;
  double t5421;
  double t5478;
  double t5479;
  double t5467;
  double t5471;
  double t5473;
  double t5500;
  double t5501;
  double t5502;
  double t5483;
  double t5484;
  double t5485;
  double t5591;
  double t5601;
  double t5606;
  double t5615;
  double t5617;
  double t5620;
  double t5633;
  double t5635;
  double t5636;
  double t5638;
  double t5639;
  double t5654;
  double t5660;
  double t5662;
  double t5664;
  double t5690;
  double t5693;
  double t5694;
  double t5707;
  double t5708;
  double t5709;
  double t5715;
  double t5728;
  double t5730;
  double t5735;
  double t5697;
  double t5699;
  double t5702;
  double t5619;
  double t5623;
  double t5624;
  double t5626;
  double t5627;
  double t5628;
  double t5672;
  double t5674;
  double t5680;
  double t5648;
  double t5656;
  double t5658;
  double t5773;
  double t5775;
  double t5776;
  double t5714;
  double t5717;
  double t5719;
  double t5744;
  double t5745;
  double t5746;
  double t5785;
  double t5789;
  double t5793;
  double t5799;
  double t5800;
  double t5598;
  double t5604;
  double t5625;
  double t5629;
  double t5666;
  double t5695;
  double t5726;
  double t5747;
  double t5752;
  double t5753;
  double t5754;
  double t5755;
  double t5759;
  double t5761;
  double t5762;
  double t5765;
  double t5766;
  double t5768;
  double t5769;
  double t5770;
  double t5771;
  double t5781;
  double t5783;
  double t5794;
  double t5801;
  double t5802;
  double t5803;
  double t5806;
  double t5809;
  double t5810;
  double t5813;
  double t5815;
  double t5817;
  double t5821;
  double t5845;
  double t5847;
  double t5848;
  double t5850;
  double t5852;
  double t5855;
  double t5856;
  double t5857;
  double t5767;
  double t5822;
  double t5823;
  double t5824;
  double t5919;
  double t5921;
  double t5927;
  double t5890;
  double t5895;
  double t5897;
  double t5899;
  double t5901;
  double t5843;
  double t5910;
  double t5913;
  double t5916;
  double t5906;
  double t5908;
  double t5849;
  double t5992;
  double t5997;
  double t6035;
  double t6041;
  double t6047;
  double t6048;
  double t6049;
  t424 = Cos(var1[4]);
  t602 = Cos(var1[6]);
  t287 = Cos(var1[8]);
  t289 = Cos(var1[7]);
  t312 = Sin(var1[4]);
  t419 = -1.*t289*t312;
  t448 = Sin(var1[6]);
  t457 = Sin(var1[7]);
  t460 = t424*t448*t457;
  t541 = t419 + t460;
  t626 = Sin(var1[8]);
  t149 = -1.*var1[9];
  t192 = 0.226893 + t149;
  t829 = Cos(var1[9]);
  t566 = t287*t541;
  t636 = t424*t602*t626;
  t671 = t566 + t636;
  t262 = Sin(var1[9]);
  t832 = t424*t602*t287;
  t839 = -1.*t541*t626;
  t841 = t832 + t839;
  t1020 = Cos(t192);
  t812 = -1.*t262*t671;
  t849 = t829*t841;
  t889 = t812 + t849;
  t219 = Sin(t192);
  t1056 = t829*t671;
  t1108 = t262*t841;
  t1109 = t1056 + t1108;
  t1153 = Cos(var1[13]);
  t996 = t219*t889;
  t1117 = t1020*t1109;
  t1131 = t996 + t1117;
  t15 = Sin(var1[13]);
  t1174 = t1020*t889;
  t1179 = -1.*t219*t1109;
  t1207 = t1174 + t1179;
  t1272 = t602*t287*t457;
  t1277 = -1.*t448*t626;
  t1346 = t1272 + t1277;
  t1382 = -1.*t287*t448;
  t1502 = -1.*t602*t457*t626;
  t1503 = t1382 + t1502;
  t1370 = -1.*t262*t1346;
  t1586 = t829*t1503;
  t1589 = t1370 + t1586;
  t1798 = t829*t1346;
  t1827 = t262*t1503;
  t1830 = t1798 + t1827;
  t1735 = t219*t1589;
  t1879 = t1020*t1830;
  t1898 = t1735 + t1879;
  t1931 = t1020*t1589;
  t1974 = -1.*t219*t1830;
  t1980 = t1931 + t1974;
  t2073 = -1.*t287*t448*t457;
  t2087 = -1.*t602*t626;
  t2089 = t2073 + t2087;
  t2104 = -1.*t602*t287;
  t2121 = t448*t457*t626;
  t2135 = t2104 + t2121;
  t2102 = -1.*t262*t2089;
  t2200 = t829*t2135;
  t2287 = t2102 + t2200;
  t2292 = t829*t2089;
  t2297 = t262*t2135;
  t2301 = t2292 + t2297;
  t2291 = t219*t2287;
  t2311 = t1020*t2301;
  t2323 = t2291 + t2311;
  t2342 = t1020*t2287;
  t2351 = -1.*t219*t2301;
  t2373 = t2342 + t2351;
  t2456 = t602*t287*t312*t457;
  t2481 = -1.*t312*t448*t626;
  t2489 = t2456 + t2481;
  t2535 = -1.*t287*t312*t448;
  t2555 = -1.*t602*t312*t457*t626;
  t2567 = t2535 + t2555;
  t2531 = -1.*t262*t2489;
  t2568 = t829*t2567;
  t2576 = t2531 + t2568;
  t2595 = t829*t2489;
  t2611 = t262*t2567;
  t2631 = t2595 + t2611;
  t2578 = t219*t2576;
  t2636 = t1020*t2631;
  t2637 = t2578 + t2636;
  t2658 = t1020*t2576;
  t2660 = -1.*t219*t2631;
  t2677 = t2658 + t2660;
  t2792 = t424*t289;
  t2839 = t312*t448*t457;
  t2846 = t2792 + t2839;
  t2849 = t287*t2846;
  t2859 = t602*t312*t626;
  t2894 = t2849 + t2859;
  t2904 = t602*t287*t312;
  t2915 = -1.*t2846*t626;
  t2917 = t2904 + t2915;
  t2898 = -1.*t262*t2894;
  t2939 = t829*t2917;
  t2956 = t2898 + t2939;
  t3012 = t829*t2894;
  t3026 = t262*t2917;
  t3049 = t3012 + t3026;
  t2989 = t219*t2956;
  t3051 = t1020*t3049;
  t3063 = t2989 + t3051;
  t3092 = t1020*t2956;
  t3103 = -1.*t219*t3049;
  t3112 = t3092 + t3103;
  t1906 = -1.*t15*t1898;
  t1995 = t1153*t1980;
  t2005 = t1906 + t1995;
  t2008 = 0.766044*t2005;
  t2017 = t1153*t1898;
  t2021 = t15*t1980;
  t2028 = t2017 + t2021;
  t2044 = 0.642788*t2028;
  t2049 = t2008 + t2044;
  t3088 = -1.*t15*t3063;
  t3121 = t1153*t3112;
  t3131 = t3088 + t3121;
  t3158 = 0.766044*t3131;
  t3167 = t1153*t3063;
  t3170 = t15*t3112;
  t3172 = t3167 + t3170;
  t3181 = 0.642788*t3172;
  t3194 = t3158 + t3181;
  t3206 = Power(t2049,2);
  t1152 = -1.*t15*t1131;
  t1210 = t1153*t1207;
  t1213 = t1152 + t1210;
  t1241 = t1153*t1131;
  t1243 = t15*t1207;
  t1250 = t1241 + t1243;
  t3208 = Power(t3194,2);
  t3269 = t424*t602*t287*t457;
  t3275 = -1.*t424*t448*t626;
  t3281 = t3269 + t3275;
  t3285 = -1.*t424*t287*t448;
  t3288 = -1.*t424*t602*t457*t626;
  t3364 = t3285 + t3288;
  t3284 = -1.*t262*t3281;
  t3408 = t829*t3364;
  t3411 = t3284 + t3408;
  t3416 = t829*t3281;
  t3421 = t262*t3364;
  t3424 = t3416 + t3421;
  t3415 = t219*t3411;
  t3426 = t1020*t3424;
  t3430 = t3415 + t3426;
  t3435 = t1020*t3411;
  t3436 = -1.*t219*t3424;
  t3439 = t3435 + t3436;
  t3209 = t3206 + t3208;
  t3220 = -0.766044*t1213;
  t3235 = -0.642788*t1250;
  t3245 = t3220 + t3235;
  t3251 = Power(t3245,2);
  t3256 = t3206 + t3251 + t3208;
  t3262 = 1/t3256;
  t1233 = 0.766044*t1213;
  t1260 = 0.642788*t1250;
  t1265 = t1233 + t1260;
  t3521 = -1.*t602*t289*t287*t262;
  t3531 = -1.*t829*t602*t289*t626;
  t3532 = t3521 + t3531;
  t3572 = t829*t602*t289*t287;
  t3584 = -1.*t602*t289*t262*t626;
  t3602 = t3572 + t3584;
  t3548 = t219*t3532;
  t3612 = t1020*t3602;
  t3615 = t3548 + t3612;
  t3626 = t1020*t3532;
  t3639 = -1.*t219*t3602;
  t3643 = t3626 + t3639;
  t3736 = t289*t312*t448;
  t3737 = -1.*t424*t457;
  t3769 = t3736 + t3737;
  t3776 = -1.*t287*t262*t3769;
  t3779 = -1.*t829*t3769*t626;
  t3780 = t3776 + t3779;
  t3784 = t829*t287*t3769;
  t3793 = -1.*t262*t3769*t626;
  t3796 = t3784 + t3793;
  t3783 = t219*t3780;
  t3801 = t1020*t3796;
  t3806 = t3783 + t3801;
  t3820 = t1020*t3780;
  t3825 = -1.*t219*t3796;
  t3827 = t3820 + t3825;
  t3214 = 1/Sqrt(t3209);
  t3914 = t424*t289*t448;
  t3923 = t312*t457;
  t3943 = t3914 + t3923;
  t3949 = -1.*t287*t262*t3943;
  t3954 = -1.*t829*t3943*t626;
  t3961 = t3949 + t3954;
  t3976 = t829*t287*t3943;
  t3979 = -1.*t262*t3943*t626;
  t3992 = t3976 + t3979;
  t3971 = t219*t3961;
  t3998 = t1020*t3992;
  t4004 = t3971 + t3998;
  t4016 = t1020*t3961;
  t4019 = -1.*t219*t3992;
  t4025 = t4016 + t4019;
  t3483 = Sqrt(t3209);
  t4090 = -1.*t829;
  t4099 = 1. + t4090;
  t4150 = -1.*t1020;
  t4152 = 1. + t4150;
  t4166 = -1.*t287*t262;
  t4167 = -1.*t829*t626;
  t4183 = t4166 + t4167;
  t4271 = t829*t287;
  t4274 = -1.*t262*t626;
  t4285 = t4271 + t4274;
  t4295 = -1.*t1153;
  t4298 = 1. + t4295;
  t4352 = t219*t4183;
  t4354 = t1020*t4285;
  t4364 = t4352 + t4354;
  t4394 = t1020*t4183;
  t4402 = -1.*t219*t4285;
  t4412 = t4394 + t4402;
  t4129 = -0.21*t4099;
  t4134 = 0.049*t262;
  t4135 = t4129 + t4134;
  t4100 = -0.049*t4099;
  t4109 = -0.21*t262;
  t4118 = t4100 + t4109;
  t4219 = 0.01841*t4152;
  t4225 = -0.70544*t219;
  t4235 = t4219 + t4225;
  t4154 = -0.70544*t4152;
  t4164 = -0.01841*t219;
  t4165 = t4154 + t4164;
  t4381 = -1.11344*t4298;
  t4387 = 0.02159*t15;
  t4393 = t4381 + t4387;
  t4515 = t287*t262;
  t4523 = t829*t626;
  t4528 = t4515 + t4523;
  t4301 = -0.02159*t4298;
  t4323 = -1.11344*t15;
  t4339 = t4301 + t4323;
  t4535 = -1.*t219*t4528;
  t4539 = t4535 + t4354;
  t4542 = t1020*t4528;
  t4544 = t219*t4285;
  t4545 = t4542 + t4544;
  t4085 = 0.049*t287;
  t4126 = t287*t4118;
  t4128 = -0.09*t626;
  t4140 = -1.*t4135*t626;
  t4211 = t4165*t4183;
  t4294 = t4235*t4285;
  t4380 = t4339*t4364;
  t4414 = t4393*t4412;
  t4415 = -1.*t15*t4364;
  t4424 = t1153*t4412;
  t4426 = t4415 + t4424;
  t4430 = -1.11344*t4426;
  t4442 = t1153*t4364;
  t4447 = t15*t4412;
  t4448 = t4442 + t4447;
  t4449 = -0.02159*t4448;
  t4479 = t4085 + t4126 + t4128 + t4140 + t4211 + t4294 + t4380 + t4414 + t4430 + t4449;
  t4490 = 0.09*t287;
  t4494 = t287*t4135;
  t4499 = 0.049*t626;
  t4511 = t4118*t626;
  t4533 = t4235*t4528;
  t4534 = t4165*t4285;
  t4540 = t4393*t4539;
  t4553 = t4339*t4545;
  t4554 = t15*t4539;
  t4562 = t1153*t4545;
  t4596 = t4554 + t4562;
  t4599 = -0.02159*t4596;
  t4601 = t1153*t4539;
  t4607 = -1.*t15*t4545;
  t4609 = t4601 + t4607;
  t4611 = -1.11344*t4609;
  t4612 = t4490 + t4494 + t4499 + t4511 + t4533 + t4534 + t4540 + t4553 + t4599 + t4611;
  t4647 = -1.*t829*t287;
  t4650 = t262*t626;
  t4651 = t4647 + t4650;
  t4655 = -1.*t219*t4183;
  t4656 = t1020*t4651;
  t4657 = t4655 + t4656;
  t4660 = t219*t4651;
  t4661 = t4394 + t4660;
  t4720 = -0.049*t287;
  t4726 = -1.*t287*t4118;
  t4729 = 0.09*t626;
  t4733 = t4135*t626;
  t4739 = -1.*t4165*t4183;
  t4740 = -1.*t4235*t4285;
  t4741 = -1.*t4339*t4364;
  t4742 = -1.*t4393*t4412;
  t4743 = 1.11344*t4426;
  t4744 = 0.02159*t4448;
  t4763 = t4720 + t4726 + t4729 + t4733 + t4739 + t4740 + t4741 + t4742 + t4743 + t4744;
  t4627 = -0.09*t287;
  t4633 = -1.*t287*t4135;
  t4639 = -0.049*t626;
  t4640 = -1.*t4118*t626;
  t4807 = -1.*t4235*t4528;
  t4808 = -1.*t4165*t4285;
  t4825 = -1.*t4393*t4539;
  t4826 = -1.*t4339*t4545;
  t4840 = 0.02159*t4596;
  t4844 = 1.11344*t4609;
  t4853 = t4627 + t4633 + t4639 + t4640 + t4807 + t4808 + t4825 + t4826 + t4840 + t4844;
  t4663 = t15*t4657;
  t4666 = t1153*t4661;
  t4671 = t4663 + t4666;
  t4682 = t1153*t4657;
  t4687 = -1.*t15*t4661;
  t4690 = t4682 + t4687;
  t4800 = Power(t4763,2);
  t4855 = Power(t4853,2);
  t4871 = t4800 + t4855;
  t4872 = 1/t4871;
  t4920 = -1.*t602*t287*t457;
  t4921 = t448*t626;
  t4938 = t4920 + t4921;
  t4944 = t262*t4938;
  t4947 = t4944 + t1586;
  t4954 = t829*t4938;
  t4956 = -1.*t262*t1503;
  t4957 = t4954 + t4956;
  t4949 = -1.*t219*t4947;
  t4958 = t1020*t4957;
  t4961 = t4949 + t4958;
  t4965 = t1020*t4947;
  t4966 = t219*t4957;
  t4967 = t4965 + t4966;
  t5016 = -1.*t287*t2846;
  t5021 = -1.*t602*t312*t626;
  t5022 = t5016 + t5021;
  t5024 = t262*t5022;
  t5025 = t5024 + t2939;
  t5028 = t829*t5022;
  t5030 = -1.*t262*t2917;
  t5033 = t5028 + t5030;
  t5027 = -1.*t219*t5025;
  t5036 = t1020*t5033;
  t5039 = t5027 + t5036;
  t5042 = t1020*t5025;
  t5044 = t219*t5033;
  t5045 = t5042 + t5044;
  t5081 = -1.*t287*t541;
  t5086 = -1.*t424*t602*t626;
  t5089 = t5081 + t5086;
  t5090 = t262*t5089;
  t5106 = t5090 + t849;
  t5112 = t829*t5089;
  t5117 = -1.*t262*t841;
  t5118 = t5112 + t5117;
  t5108 = -1.*t219*t5106;
  t5119 = t1020*t5118;
  t5121 = t5108 + t5119;
  t5123 = t1020*t5106;
  t5124 = t219*t5118;
  t5126 = t5123 + t5124;
  t4488 = Power(t4479,2);
  t4616 = Power(t4612,2);
  t4617 = 0.00002025 + t4488 + t4616;
  t4622 = 1/Sqrt(t4617);
  t5187 = t4394 + t4542;
  t5195 = t219*t4528;
  t5200 = t4352 + t5195;
  t5159 = -0.21*t829;
  t5161 = -0.049*t262;
  t5167 = t5159 + t5161;
  t5153 = 0.049*t829;
  t5154 = t5153 + t4109;
  t4641 = t4235*t4183;
  t5178 = 0.01841*t1020;
  t5180 = 0.70544*t219;
  t5181 = t5178 + t5180;
  t5170 = 0.70544*t1020;
  t5172 = t5170 + t4164;
  t4654 = t4165*t4651;
  t5253 = t4354 + t4656;
  t5260 = t4544 + t4660;
  t5206 = t15*t5187;
  t5211 = t1153*t5200;
  t5221 = t5206 + t5211;
  t5229 = t1153*t5187;
  t5232 = -1.*t15*t5200;
  t5234 = t5229 + t5232;
  t4883 = -1.*t4235*t4183;
  t4885 = -1.*t4165*t4651;
  t5264 = t15*t5253;
  t5266 = t1153*t5260;
  t5267 = t5264 + t5266;
  t5279 = t1153*t5253;
  t5280 = -1.*t15*t5260;
  t5281 = t5279 + t5280;
  t5336 = -1.*t829*t671;
  t5337 = t5336 + t5117;
  t5340 = t1020*t5337;
  t5341 = t5340 + t1117;
  t5347 = t219*t5337;
  t5349 = t219*t1109;
  t5350 = t5347 + t5349;
  t5375 = -1.*t829*t1346;
  t5378 = t5375 + t4956;
  t5385 = t1020*t5378;
  t5386 = t5385 + t1879;
  t5391 = t219*t5378;
  t5392 = t219*t1830;
  t5395 = t5391 + t5392;
  t5412 = -1.*t829*t2894;
  t5413 = t5412 + t5030;
  t5414 = t1020*t5413;
  t5416 = t5414 + t3051;
  t5418 = t219*t5413;
  t5420 = t219*t3049;
  t5421 = t5418 + t5420;
  t5478 = 0.02159*t1153;
  t5479 = t5478 + t4323;
  t5467 = -1.11344*t1153;
  t5471 = -0.02159*t15;
  t5473 = t5467 + t5471;
  t5500 = -1.*t15*t4539;
  t5501 = -1.*t1153*t4545;
  t5502 = t5500 + t5501;
  t5483 = -1.*t1153*t4364;
  t5484 = -1.*t15*t4412;
  t5485 = t5483 + t5484;
  t5591 = Cos(var1[16]);
  t5601 = Sin(var1[16]);
  t5606 = Cos(var1[17]);
  t5615 = -1.*t5606;
  t5617 = 1. + t5615;
  t5620 = Sin(var1[17]);
  t5633 = -1.*var1[17];
  t5635 = 0.226893 + t5633;
  t5636 = Cos(t5635);
  t5638 = -1.*t5636;
  t5639 = 1. + t5638;
  t5654 = Sin(t5635);
  t5660 = -1.*t5606*t5601;
  t5662 = -1.*t5591*t5620;
  t5664 = t5660 + t5662;
  t5690 = t5591*t5606;
  t5693 = -1.*t5601*t5620;
  t5694 = t5690 + t5693;
  t5707 = Cos(var1[21]);
  t5708 = -1.*t5707;
  t5709 = 1. + t5708;
  t5715 = Sin(var1[21]);
  t5728 = t5636*t5664;
  t5730 = -1.*t5654*t5694;
  t5735 = t5728 + t5730;
  t5697 = t5654*t5664;
  t5699 = t5636*t5694;
  t5702 = t5697 + t5699;
  t5619 = -0.049*t5617;
  t5623 = -0.21*t5620;
  t5624 = t5619 + t5623;
  t5626 = -0.21*t5617;
  t5627 = 0.049*t5620;
  t5628 = t5626 + t5627;
  t5672 = 0.01841*t5639;
  t5674 = -0.70544*t5654;
  t5680 = t5672 + t5674;
  t5648 = -0.70544*t5639;
  t5656 = -0.01841*t5654;
  t5658 = t5648 + t5656;
  t5773 = t5606*t5601;
  t5775 = t5591*t5620;
  t5776 = t5773 + t5775;
  t5714 = -0.02159*t5709;
  t5717 = -1.11344*t5715;
  t5719 = t5714 + t5717;
  t5744 = -1.11344*t5709;
  t5745 = 0.02159*t5715;
  t5746 = t5744 + t5745;
  t5785 = t5636*t5776;
  t5789 = t5654*t5694;
  t5793 = t5785 + t5789;
  t5799 = -1.*t5654*t5776;
  t5800 = t5799 + t5699;
  t5598 = 0.049*t5591;
  t5604 = -0.09*t5601;
  t5625 = t5591*t5624;
  t5629 = -1.*t5601*t5628;
  t5666 = t5658*t5664;
  t5695 = t5680*t5694;
  t5726 = t5702*t5719;
  t5747 = t5735*t5746;
  t5752 = t5707*t5735;
  t5753 = -1.*t5702*t5715;
  t5754 = t5752 + t5753;
  t5755 = -1.11344*t5754;
  t5759 = t5707*t5702;
  t5761 = t5735*t5715;
  t5762 = t5759 + t5761;
  t5765 = -0.02159*t5762;
  t5766 = t5598 + t5604 + t5625 + t5629 + t5666 + t5695 + t5726 + t5747 + t5755 + t5765;
  t5768 = 0.09*t5591;
  t5769 = 0.049*t5601;
  t5770 = t5601*t5624;
  t5771 = t5591*t5628;
  t5781 = t5680*t5776;
  t5783 = t5658*t5694;
  t5794 = t5793*t5719;
  t5801 = t5800*t5746;
  t5802 = t5707*t5793;
  t5803 = t5800*t5715;
  t5806 = t5802 + t5803;
  t5809 = -0.02159*t5806;
  t5810 = t5707*t5800;
  t5813 = -1.*t5793*t5715;
  t5815 = t5810 + t5813;
  t5817 = -1.11344*t5815;
  t5821 = t5768 + t5769 + t5770 + t5771 + t5781 + t5783 + t5794 + t5801 + t5809 + t5817;
  t5845 = -1.*t5591*t5606;
  t5847 = t5601*t5620;
  t5848 = t5845 + t5847;
  t5850 = t5654*t5848;
  t5852 = t5728 + t5850;
  t5855 = -1.*t5654*t5664;
  t5856 = t5636*t5848;
  t5857 = t5855 + t5856;
  t5767 = Power(t5766,2);
  t5822 = Power(t5821,2);
  t5823 = 0.00002025 + t5767 + t5822;
  t5824 = 1/Sqrt(t5823);
  t5919 = t5654*t5776;
  t5921 = t5697 + t5919;
  t5927 = t5728 + t5785;
  t5890 = 0.049*t5606;
  t5895 = t5890 + t5623;
  t5897 = -0.21*t5606;
  t5899 = -0.049*t5620;
  t5901 = t5897 + t5899;
  t5843 = t5680*t5664;
  t5910 = 0.01841*t5636;
  t5913 = 0.70544*t5654;
  t5916 = t5910 + t5913;
  t5906 = 0.70544*t5636;
  t5908 = t5906 + t5656;
  t5849 = t5658*t5848;
  t5992 = t5789 + t5850;
  t5997 = t5699 + t5856;
  t6035 = 0.02159*t5707;
  t6041 = t6035 + t5717;
  t6047 = -1.11344*t5707;
  t6048 = -0.02159*t5715;
  t6049 = t6047 + t6048;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=1.;
  p_output1[7]=0;
  p_output1[8]=0.5*t1265*(2.*t2049*(0.766044*(-1.*t15*t2323 + t1153*t2373) + 0.642788*(t1153*t2323 + t15*t2373)) + 2.*(0.766044*(-1.*t15*t2637 + t1153*t2677) + 0.642788*(t1153*t2637 + t15*t2677))*t3194)*t3214*t3262 + t3262*(-0.766044*(-1.*t15*t3430 + t1153*t3439) - 0.642788*(t1153*t3430 + t15*t3439))*t3483;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=1.;
  p_output1[17]=0.5*t1265*t3214*t3262*(2.*t2049*(0.766044*(-1.*t15*t3615 + t1153*t3643) + 0.642788*(t1153*t3615 + t15*t3643)) + 2.*t3194*(0.766044*(-1.*t15*t3806 + t1153*t3827) + 0.642788*(t1153*t3806 + t15*t3827))) + t3262*t3483*(-0.766044*(-1.*t15*t4004 + t1153*t4025) - 0.642788*(t1153*t4004 + t15*t4025));
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0.5*t4622*(2.*t4479*t4612 + 2.*t4479*(t4627 + t4633 + t4639 + t4640 + t4641 + t4654 + t4393*t4657 + t4339*t4661 - 0.02159*t4671 - 1.11344*t4690));
  p_output1[23]=t4479*t4763*t4872 + t4853*t4872*(t4490 + t4494 + t4499 + t4511 - 1.*t4393*t4657 - 1.*t4339*t4661 + 0.02159*t4671 + 1.11344*t4690 + t4883 + t4885);
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0.5*t1265*t3214*t3262*(2.*t2049*(0.642788*(t15*t4961 + t1153*t4967) + 0.766044*(t1153*t4961 - 1.*t15*t4967)) + 2.*t3194*(0.642788*(t15*t5039 + t1153*t5045) + 0.766044*(t1153*t5039 - 1.*t15*t5045))) + t3262*t3483*(-0.642788*(t15*t5121 + t1153*t5126) - 0.766044*(t1153*t5121 - 1.*t15*t5126));
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0.5*t4622*(2.*t4479*(t4641 + t4654 + t287*t5167 + t4285*t5172 + t4183*t5181 + t4393*t5253 + t4339*t5260 - 0.02159*t5267 - 1.11344*t5281 - 1.*t5154*t626) + 2.*t4612*(t4211 + t4294 + t287*t5154 + t4528*t5172 + t4285*t5181 + t4393*t5187 + t4339*t5200 - 0.02159*t5221 - 1.11344*t5234 + t5167*t626));
  p_output1[32]=t4853*t4872*(t4883 + t4885 - 1.*t287*t5167 - 1.*t4285*t5172 - 1.*t4183*t5181 - 1.*t4393*t5253 - 1.*t4339*t5260 + 0.02159*t5267 + 1.11344*t5281 + t5154*t626) + t4479*t4872*(t4739 + t4740 - 1.*t287*t5154 - 1.*t4528*t5172 - 1.*t4285*t5181 - 1.*t4393*t5187 - 1.*t4339*t5200 + 0.02159*t5221 + 1.11344*t5234 - 1.*t5167*t626);
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=t3262*t3483*(-0.642788*(t15*t5341 + t1153*t5350) - 0.766044*(t1153*t5341 - 1.*t15*t5350)) + 0.5*t1265*t3214*t3262*(2.*t2049*(0.642788*(t15*t5386 + t1153*t5395) + 0.766044*(t1153*t5386 - 1.*t15*t5395)) + 2.*t3194*(0.642788*(t15*t5416 + t1153*t5421) + 0.766044*(t1153*t5416 - 1.*t15*t5421)));
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0.5*t4622*(2.*t4479*(-0.02159*t4426 + t4364*t5473 + t4412*t5479 - 1.11344*t5485) + 2.*t4612*(-0.02159*t4609 + t4545*t5473 + t4539*t5479 - 1.11344*t5502));
  p_output1[41]=t4853*t4872*(0.02159*t4426 - 1.*t4364*t5473 - 1.*t4412*t5479 + 1.11344*t5485) + t4479*t4872*(0.02159*t4609 - 1.*t4545*t5473 - 1.*t4539*t5479 + 1.11344*t5502);
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0.5*t1265*(2.*(0.766044*(-1.*t1153*t1898 - 1.*t15*t1980) + 0.642788*t2005)*t2049 + 2.*(0.766044*(-1.*t1153*t3063 - 1.*t15*t3112) + 0.642788*t3131)*t3194)*t3214*t3262 + (-0.642788*t1213 - 0.766044*(-1.*t1131*t1153 - 1.*t1207*t15))*t3262*t3483;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=1.;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0.5*t5824*(2.*t5766*t5821 + 2.*t5766*(-0.09*t5591 - 0.049*t5601 - 1.*t5601*t5624 - 1.*t5591*t5628 + t5843 + t5849 + t5719*t5852 + t5746*t5857 - 1.11344*(-1.*t5715*t5852 + t5707*t5857) - 0.02159*(t5707*t5852 + t5715*t5857)));
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0.5*t5824*(2.*t5821*(t5666 + t5695 + t5591*t5895 + t5601*t5901 + t5776*t5908 + t5694*t5916 + t5719*t5921 + t5746*t5927 - 1.11344*(-1.*t5715*t5921 + t5707*t5927) - 0.02159*(t5707*t5921 + t5715*t5927)) + 2.*t5766*(t5843 + t5849 - 1.*t5601*t5895 + t5591*t5901 + t5694*t5908 + t5664*t5916 + t5719*t5992 + t5746*t5997 - 1.11344*(-1.*t5715*t5992 + t5707*t5997) - 0.02159*(t5707*t5992 + t5715*t5997)));
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0.5*t5824*(2.*t5766*(-1.11344*(-1.*t5702*t5707 - 1.*t5715*t5735) - 0.02159*t5754 + t5735*t6041 + t5702*t6049) + 2.*t5821*(-1.11344*(-1.*t5707*t5793 - 1.*t5715*t5800) - 0.02159*t5815 + t5800*t6041 + t5793*t6049));
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 10, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_yaRightStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




