/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:19:35 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_yaRightStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t327;
  double t554;
  double t133;
  double t173;
  double t278;
  double t298;
  double t429;
  double t538;
  double t546;
  double t549;
  double t571;
  double t12;
  double t54;
  double t604;
  double t552;
  double t575;
  double t581;
  double t102;
  double t607;
  double t701;
  double t711;
  double t881;
  double t594;
  double t821;
  double t844;
  double t99;
  double t887;
  double t906;
  double t911;
  double t982;
  double t877;
  double t947;
  double t969;
  double t5;
  double t984;
  double t1032;
  double t1055;
  double t1208;
  double t1243;
  double t1251;
  double t1287;
  double t1351;
  double t1387;
  double t1257;
  double t1623;
  double t1624;
  double t1903;
  double t1999;
  double t2006;
  double t1888;
  double t2147;
  double t2149;
  double t2258;
  double t2391;
  double t2398;
  double t2609;
  double t2671;
  double t2693;
  double t2705;
  double t2717;
  double t2756;
  double t2697;
  double t2785;
  double t2797;
  double t2800;
  double t2846;
  double t2884;
  double t2799;
  double t2892;
  double t2901;
  double t2918;
  double t2928;
  double t2968;
  double t3039;
  double t3043;
  double t3079;
  double t3095;
  double t3099;
  double t3102;
  double t3085;
  double t3112;
  double t3124;
  double t3139;
  double t3167;
  double t3176;
  double t3132;
  double t3183;
  double t3187;
  double t3217;
  double t3230;
  double t3234;
  double t3297;
  double t3298;
  double t3310;
  double t3311;
  double t3322;
  double t3330;
  double t3338;
  double t3348;
  double t3361;
  double t3335;
  double t3362;
  double t3364;
  double t3368;
  double t3376;
  double t3385;
  double t3366;
  double t3408;
  double t3414;
  double t3426;
  double t3432;
  double t3447;
  double t2220;
  double t2416;
  double t2430;
  double t2439;
  double t2442;
  double t2487;
  double t2516;
  double t2533;
  double t2608;
  double t3415;
  double t3454;
  double t3457;
  double t3476;
  double t3484;
  double t3485;
  double t3514;
  double t3528;
  double t3577;
  double t3613;
  double t977;
  double t1111;
  double t1118;
  double t1159;
  double t1162;
  double t1169;
  double t3630;
  double t3848;
  double t3899;
  double t3902;
  double t3911;
  double t3953;
  double t3958;
  double t3903;
  double t3984;
  double t3986;
  double t3992;
  double t3998;
  double t4004;
  double t3991;
  double t4005;
  double t4007;
  double t4011;
  double t4021;
  double t4085;
  double t3683;
  double t3689;
  double t3690;
  double t3701;
  double t3754;
  double t3819;
  double t3820;
  double t1131;
  double t1177;
  double t1182;
  double t4243;
  double t4281;
  double t4282;
  double t4312;
  double t4336;
  double t4337;
  double t4311;
  double t4342;
  double t4345;
  double t4350;
  double t4356;
  double t4358;
  double t4554;
  double t4558;
  double t4626;
  double t4648;
  double t4664;
  double t4668;
  double t4727;
  double t4728;
  double t4731;
  double t4724;
  double t4748;
  double t4750;
  double t4769;
  double t4779;
  double t4798;
  double t3686;
  double t4993;
  double t5020;
  double t5032;
  double t5033;
  double t5048;
  double t5054;
  double t5074;
  double t5075;
  double t5079;
  double t5063;
  double t5082;
  double t5085;
  double t5159;
  double t5181;
  double t5189;
  double t4202;
  double t5285;
  double t5343;
  double t5604;
  double t5606;
  double t5720;
  double t5721;
  double t5722;
  double t5825;
  double t5837;
  double t5850;
  double t5891;
  double t5892;
  double t5934;
  double t5940;
  double t5944;
  double t6005;
  double t6009;
  double t6063;
  double t5487;
  double t5527;
  double t5539;
  double t5351;
  double t5367;
  double t5391;
  double t5803;
  double t5817;
  double t5819;
  double t5672;
  double t5681;
  double t5692;
  double t5969;
  double t5973;
  double t5975;
  double t6139;
  double t6140;
  double t6142;
  double t5895;
  double t5922;
  double t5924;
  double t6167;
  double t6175;
  double t6179;
  double t6180;
  double t6181;
  double t5261;
  double t5474;
  double t5480;
  double t5542;
  double t5754;
  double t5862;
  double t5946;
  double t6066;
  double t6070;
  double t6081;
  double t6083;
  double t6086;
  double t6087;
  double t6107;
  double t6108;
  double t6111;
  double t6127;
  double t6132;
  double t6135;
  double t6136;
  double t6137;
  double t6143;
  double t6156;
  double t6178;
  double t6184;
  double t6186;
  double t6187;
  double t6191;
  double t6193;
  double t6194;
  double t6195;
  double t6196;
  double t6197;
  double t6198;
  double t6283;
  double t6286;
  double t6291;
  double t6337;
  double t6340;
  double t6345;
  double t6363;
  double t6374;
  double t6447;
  double t6452;
  double t6456;
  double t6463;
  double t6464;
  double t6465;
  double t6471;
  double t6474;
  double t6479;
  double t6488;
  double t6489;
  double t6218;
  double t6229;
  double t6244;
  double t6260;
  double t6495;
  double t6501;
  double t6505;
  double t6506;
  double t6519;
  double t6530;
  double t6537;
  double t6385;
  double t6393;
  double t6394;
  double t6403;
  double t6404;
  double t6413;
  double t6493;
  double t6560;
  double t6564;
  double t6566;
  double t6619;
  double t6621;
  double t6623;
  double t6632;
  double t6643;
  double t6654;
  double t6655;
  double t6656;
  double t6644;
  double t6657;
  double t6659;
  double t6669;
  double t6671;
  double t6675;
  double t6731;
  double t6735;
  double t6736;
  double t6737;
  double t6738;
  double t6745;
  double t6749;
  double t6752;
  double t6740;
  double t6753;
  double t6756;
  double t6826;
  double t6832;
  double t6833;
  double t6932;
  double t6933;
  double t6939;
  double t6941;
  double t6961;
  double t6975;
  double t7014;
  double t7068;
  double t6973;
  double t7079;
  double t7124;
  double t7162;
  double t7190;
  double t7199;
  double t6131;
  double t6199;
  double t6200;
  double t6208;
  double t7425;
  double t7430;
  double t7431;
  double t7382;
  double t7390;
  double t7391;
  double t7334;
  double t7375;
  double t6270;
  double t7415;
  double t7417;
  double t7419;
  double t7400;
  double t7404;
  double t6328;
  double t7496;
  double t7499;
  double t7449;
  double t7451;
  double t7453;
  double t7460;
  double t7464;
  double t7465;
  double t6578;
  double t6580;
  double t7505;
  double t7507;
  double t7509;
  double t7513;
  double t7514;
  double t7517;
  double t7610;
  double t7612;
  double t7617;
  double t7622;
  double t7629;
  double t7631;
  double t7637;
  double t7656;
  double t7658;
  double t7661;
  double t7664;
  double t7670;
  double t7672;
  double t7673;
  double t7684;
  double t7686;
  double t7690;
  double t7692;
  double t7700;
  double t7704;
  double t7707;
  double t7743;
  double t7744;
  double t7735;
  double t7737;
  double t7739;
  double t7762;
  double t7763;
  double t7767;
  double t7750;
  double t7753;
  double t7754;
  double t7868;
  double t7874;
  double t7877;
  double t7879;
  double t7880;
  double t7883;
  double t7898;
  double t7903;
  double t7907;
  double t7912;
  double t7913;
  double t7916;
  double t7921;
  double t7923;
  double t7924;
  double t7934;
  double t7937;
  double t7940;
  double t7949;
  double t7953;
  double t7955;
  double t7959;
  double t7964;
  double t7965;
  double t7966;
  double t7944;
  double t7945;
  double t7946;
  double t7882;
  double t7884;
  double t7886;
  double t7892;
  double t7895;
  double t7896;
  double t7927;
  double t7929;
  double t7933;
  double t7915;
  double t7917;
  double t7920;
  double t8002;
  double t8003;
  double t8004;
  double t7958;
  double t7960;
  double t7961;
  double t7968;
  double t7969;
  double t7970;
  double t8011;
  double t8012;
  double t8014;
  double t8019;
  double t8020;
  double t7869;
  double t7876;
  double t7887;
  double t7897;
  double t7925;
  double t7941;
  double t7963;
  double t7973;
  double t7975;
  double t7978;
  double t7979;
  double t7984;
  double t7986;
  double t7988;
  double t7989;
  double t7990;
  double t7991;
  double t7996;
  double t7998;
  double t8000;
  double t8001;
  double t8008;
  double t8010;
  double t8016;
  double t8021;
  double t8023;
  double t8025;
  double t8026;
  double t8027;
  double t8029;
  double t8030;
  double t8031;
  double t8033;
  double t8034;
  double t8045;
  double t8046;
  double t8048;
  double t8051;
  double t8053;
  double t8065;
  double t8066;
  double t8068;
  double t7994;
  double t8035;
  double t8036;
  double t8037;
  double t8116;
  double t8120;
  double t8123;
  double t8090;
  double t8091;
  double t8095;
  double t8096;
  double t8097;
  double t8044;
  double t8104;
  double t8110;
  double t8111;
  double t8100;
  double t8101;
  double t8049;
  double t8147;
  double t8151;
  double t8178;
  double t8179;
  double t8181;
  double t8182;
  double t8183;
  t327 = Cos(var1[4]);
  t554 = Cos(var1[6]);
  t133 = Cos(var1[8]);
  t173 = Cos(var1[7]);
  t278 = Sin(var1[4]);
  t298 = -1.*t173*t278;
  t429 = Sin(var1[6]);
  t538 = Sin(var1[7]);
  t546 = t327*t429*t538;
  t549 = t298 + t546;
  t571 = Sin(var1[8]);
  t12 = -1.*var1[9];
  t54 = 0.226893 + t12;
  t604 = Cos(var1[9]);
  t552 = t133*t549;
  t575 = t327*t554*t571;
  t581 = t552 + t575;
  t102 = Sin(var1[9]);
  t607 = t327*t554*t133;
  t701 = -1.*t549*t571;
  t711 = t607 + t701;
  t881 = Cos(t54);
  t594 = -1.*t102*t581;
  t821 = t604*t711;
  t844 = t594 + t821;
  t99 = Sin(t54);
  t887 = t604*t581;
  t906 = t102*t711;
  t911 = t887 + t906;
  t982 = Cos(var1[13]);
  t877 = t99*t844;
  t947 = t881*t911;
  t969 = t877 + t947;
  t5 = Sin(var1[13]);
  t984 = t881*t844;
  t1032 = -1.*t99*t911;
  t1055 = t984 + t1032;
  t1208 = t554*t133*t538;
  t1243 = -1.*t429*t571;
  t1251 = t1208 + t1243;
  t1287 = -1.*t133*t429;
  t1351 = -1.*t554*t538*t571;
  t1387 = t1287 + t1351;
  t1257 = -1.*t102*t1251;
  t1623 = t604*t1387;
  t1624 = t1257 + t1623;
  t1903 = t604*t1251;
  t1999 = t102*t1387;
  t2006 = t1903 + t1999;
  t1888 = t99*t1624;
  t2147 = t881*t2006;
  t2149 = t1888 + t2147;
  t2258 = t881*t1624;
  t2391 = -1.*t99*t2006;
  t2398 = t2258 + t2391;
  t2609 = -1.*t133*t429*t538;
  t2671 = -1.*t554*t571;
  t2693 = t2609 + t2671;
  t2705 = -1.*t554*t133;
  t2717 = t429*t538*t571;
  t2756 = t2705 + t2717;
  t2697 = -1.*t102*t2693;
  t2785 = t604*t2756;
  t2797 = t2697 + t2785;
  t2800 = t604*t2693;
  t2846 = t102*t2756;
  t2884 = t2800 + t2846;
  t2799 = t99*t2797;
  t2892 = t881*t2884;
  t2901 = t2799 + t2892;
  t2918 = t881*t2797;
  t2928 = -1.*t99*t2884;
  t2968 = t2918 + t2928;
  t3039 = t554*t133*t278*t538;
  t3043 = -1.*t278*t429*t571;
  t3079 = t3039 + t3043;
  t3095 = -1.*t133*t278*t429;
  t3099 = -1.*t554*t278*t538*t571;
  t3102 = t3095 + t3099;
  t3085 = -1.*t102*t3079;
  t3112 = t604*t3102;
  t3124 = t3085 + t3112;
  t3139 = t604*t3079;
  t3167 = t102*t3102;
  t3176 = t3139 + t3167;
  t3132 = t99*t3124;
  t3183 = t881*t3176;
  t3187 = t3132 + t3183;
  t3217 = t881*t3124;
  t3230 = -1.*t99*t3176;
  t3234 = t3217 + t3230;
  t3297 = t327*t173;
  t3298 = t278*t429*t538;
  t3310 = t3297 + t3298;
  t3311 = t133*t3310;
  t3322 = t554*t278*t571;
  t3330 = t3311 + t3322;
  t3338 = t554*t133*t278;
  t3348 = -1.*t3310*t571;
  t3361 = t3338 + t3348;
  t3335 = -1.*t102*t3330;
  t3362 = t604*t3361;
  t3364 = t3335 + t3362;
  t3368 = t604*t3330;
  t3376 = t102*t3361;
  t3385 = t3368 + t3376;
  t3366 = t99*t3364;
  t3408 = t881*t3385;
  t3414 = t3366 + t3408;
  t3426 = t881*t3364;
  t3432 = -1.*t99*t3385;
  t3447 = t3426 + t3432;
  t2220 = -1.*t5*t2149;
  t2416 = t982*t2398;
  t2430 = t2220 + t2416;
  t2439 = 0.766044*t2430;
  t2442 = t982*t2149;
  t2487 = t5*t2398;
  t2516 = t2442 + t2487;
  t2533 = 0.642788*t2516;
  t2608 = t2439 + t2533;
  t3415 = -1.*t5*t3414;
  t3454 = t982*t3447;
  t3457 = t3415 + t3454;
  t3476 = 0.766044*t3457;
  t3484 = t982*t3414;
  t3485 = t5*t3447;
  t3514 = t3484 + t3485;
  t3528 = 0.642788*t3514;
  t3577 = t3476 + t3528;
  t3613 = Power(t2608,2);
  t977 = -1.*t5*t969;
  t1111 = t982*t1055;
  t1118 = t977 + t1111;
  t1159 = t982*t969;
  t1162 = t5*t1055;
  t1169 = t1159 + t1162;
  t3630 = Power(t3577,2);
  t3848 = t327*t554*t133*t538;
  t3899 = -1.*t327*t429*t571;
  t3902 = t3848 + t3899;
  t3911 = -1.*t327*t133*t429;
  t3953 = -1.*t327*t554*t538*t571;
  t3958 = t3911 + t3953;
  t3903 = -1.*t102*t3902;
  t3984 = t604*t3958;
  t3986 = t3903 + t3984;
  t3992 = t604*t3902;
  t3998 = t102*t3958;
  t4004 = t3992 + t3998;
  t3991 = t99*t3986;
  t4005 = t881*t4004;
  t4007 = t3991 + t4005;
  t4011 = t881*t3986;
  t4021 = -1.*t99*t4004;
  t4085 = t4011 + t4021;
  t3683 = t3613 + t3630;
  t3689 = -0.766044*t1118;
  t3690 = -0.642788*t1169;
  t3701 = t3689 + t3690;
  t3754 = Power(t3701,2);
  t3819 = t3613 + t3754 + t3630;
  t3820 = 1/t3819;
  t1131 = 0.766044*t1118;
  t1177 = 0.642788*t1169;
  t1182 = t1131 + t1177;
  t4243 = -1.*t554*t173*t133*t102;
  t4281 = -1.*t604*t554*t173*t571;
  t4282 = t4243 + t4281;
  t4312 = t604*t554*t173*t133;
  t4336 = -1.*t554*t173*t102*t571;
  t4337 = t4312 + t4336;
  t4311 = t99*t4282;
  t4342 = t881*t4337;
  t4345 = t4311 + t4342;
  t4350 = t881*t4282;
  t4356 = -1.*t99*t4337;
  t4358 = t4350 + t4356;
  t4554 = t173*t278*t429;
  t4558 = -1.*t327*t538;
  t4626 = t4554 + t4558;
  t4648 = -1.*t133*t102*t4626;
  t4664 = -1.*t604*t4626*t571;
  t4668 = t4648 + t4664;
  t4727 = t604*t133*t4626;
  t4728 = -1.*t102*t4626*t571;
  t4731 = t4727 + t4728;
  t4724 = t99*t4668;
  t4748 = t881*t4731;
  t4750 = t4724 + t4748;
  t4769 = t881*t4668;
  t4779 = -1.*t99*t4731;
  t4798 = t4769 + t4779;
  t3686 = 1/Sqrt(t3683);
  t4993 = t327*t173*t429;
  t5020 = t278*t538;
  t5032 = t4993 + t5020;
  t5033 = -1.*t133*t102*t5032;
  t5048 = -1.*t604*t5032*t571;
  t5054 = t5033 + t5048;
  t5074 = t604*t133*t5032;
  t5075 = -1.*t102*t5032*t571;
  t5079 = t5074 + t5075;
  t5063 = t99*t5054;
  t5082 = t881*t5079;
  t5085 = t5063 + t5082;
  t5159 = t881*t5054;
  t5181 = -1.*t99*t5079;
  t5189 = t5159 + t5181;
  t4202 = Sqrt(t3683);
  t5285 = -1.*t604;
  t5343 = 1. + t5285;
  t5604 = -1.*t881;
  t5606 = 1. + t5604;
  t5720 = -1.*t133*t102;
  t5721 = -1.*t604*t571;
  t5722 = t5720 + t5721;
  t5825 = t604*t133;
  t5837 = -1.*t102*t571;
  t5850 = t5825 + t5837;
  t5891 = -1.*t982;
  t5892 = 1. + t5891;
  t5934 = t99*t5722;
  t5940 = t881*t5850;
  t5944 = t5934 + t5940;
  t6005 = t881*t5722;
  t6009 = -1.*t99*t5850;
  t6063 = t6005 + t6009;
  t5487 = -0.21*t5343;
  t5527 = 0.049*t102;
  t5539 = t5487 + t5527;
  t5351 = -0.049*t5343;
  t5367 = -0.21*t102;
  t5391 = t5351 + t5367;
  t5803 = 0.01841*t5606;
  t5817 = -0.70544*t99;
  t5819 = t5803 + t5817;
  t5672 = -0.70544*t5606;
  t5681 = -0.01841*t99;
  t5692 = t5672 + t5681;
  t5969 = -1.11344*t5892;
  t5973 = 0.02159*t5;
  t5975 = t5969 + t5973;
  t6139 = t133*t102;
  t6140 = t604*t571;
  t6142 = t6139 + t6140;
  t5895 = -0.02159*t5892;
  t5922 = -1.11344*t5;
  t5924 = t5895 + t5922;
  t6167 = -1.*t99*t6142;
  t6175 = t6167 + t5940;
  t6179 = t881*t6142;
  t6180 = t99*t5850;
  t6181 = t6179 + t6180;
  t5261 = 0.049*t133;
  t5474 = t133*t5391;
  t5480 = -0.09*t571;
  t5542 = -1.*t5539*t571;
  t5754 = t5692*t5722;
  t5862 = t5819*t5850;
  t5946 = t5924*t5944;
  t6066 = t5975*t6063;
  t6070 = -1.*t5*t5944;
  t6081 = t982*t6063;
  t6083 = t6070 + t6081;
  t6086 = -1.11344*t6083;
  t6087 = t982*t5944;
  t6107 = t5*t6063;
  t6108 = t6087 + t6107;
  t6111 = -0.02159*t6108;
  t6127 = t5261 + t5474 + t5480 + t5542 + t5754 + t5862 + t5946 + t6066 + t6086 + t6111;
  t6132 = 0.09*t133;
  t6135 = t133*t5539;
  t6136 = 0.049*t571;
  t6137 = t5391*t571;
  t6143 = t5819*t6142;
  t6156 = t5692*t5850;
  t6178 = t5975*t6175;
  t6184 = t5924*t6181;
  t6186 = t5*t6175;
  t6187 = t982*t6181;
  t6191 = t6186 + t6187;
  t6193 = -0.02159*t6191;
  t6194 = t982*t6175;
  t6195 = -1.*t5*t6181;
  t6196 = t6194 + t6195;
  t6197 = -1.11344*t6196;
  t6198 = t6132 + t6135 + t6136 + t6137 + t6143 + t6156 + t6178 + t6184 + t6193 + t6197;
  t6283 = -1.*t604*t133;
  t6286 = t102*t571;
  t6291 = t6283 + t6286;
  t6337 = -1.*t99*t5722;
  t6340 = t881*t6291;
  t6345 = t6337 + t6340;
  t6363 = t99*t6291;
  t6374 = t6005 + t6363;
  t6447 = -0.049*t133;
  t6452 = -1.*t133*t5391;
  t6456 = 0.09*t571;
  t6463 = t5539*t571;
  t6464 = -1.*t5692*t5722;
  t6465 = -1.*t5819*t5850;
  t6471 = -1.*t5924*t5944;
  t6474 = -1.*t5975*t6063;
  t6479 = 1.11344*t6083;
  t6488 = 0.02159*t6108;
  t6489 = t6447 + t6452 + t6456 + t6463 + t6464 + t6465 + t6471 + t6474 + t6479 + t6488;
  t6218 = -0.09*t133;
  t6229 = -1.*t133*t5539;
  t6244 = -0.049*t571;
  t6260 = -1.*t5391*t571;
  t6495 = -1.*t5819*t6142;
  t6501 = -1.*t5692*t5850;
  t6505 = -1.*t5975*t6175;
  t6506 = -1.*t5924*t6181;
  t6519 = 0.02159*t6191;
  t6530 = 1.11344*t6196;
  t6537 = t6218 + t6229 + t6244 + t6260 + t6495 + t6501 + t6505 + t6506 + t6519 + t6530;
  t6385 = t5*t6345;
  t6393 = t982*t6374;
  t6394 = t6385 + t6393;
  t6403 = t982*t6345;
  t6404 = -1.*t5*t6374;
  t6413 = t6403 + t6404;
  t6493 = Power(t6489,2);
  t6560 = Power(t6537,2);
  t6564 = t6493 + t6560;
  t6566 = 1/t6564;
  t6619 = -1.*t554*t133*t538;
  t6621 = t429*t571;
  t6623 = t6619 + t6621;
  t6632 = t102*t6623;
  t6643 = t6632 + t1623;
  t6654 = t604*t6623;
  t6655 = -1.*t102*t1387;
  t6656 = t6654 + t6655;
  t6644 = -1.*t99*t6643;
  t6657 = t881*t6656;
  t6659 = t6644 + t6657;
  t6669 = t881*t6643;
  t6671 = t99*t6656;
  t6675 = t6669 + t6671;
  t6731 = -1.*t133*t3310;
  t6735 = -1.*t554*t278*t571;
  t6736 = t6731 + t6735;
  t6737 = t102*t6736;
  t6738 = t6737 + t3362;
  t6745 = t604*t6736;
  t6749 = -1.*t102*t3361;
  t6752 = t6745 + t6749;
  t6740 = -1.*t99*t6738;
  t6753 = t881*t6752;
  t6756 = t6740 + t6753;
  t6826 = t881*t6738;
  t6832 = t99*t6752;
  t6833 = t6826 + t6832;
  t6932 = -1.*t133*t549;
  t6933 = -1.*t327*t554*t571;
  t6939 = t6932 + t6933;
  t6941 = t102*t6939;
  t6961 = t6941 + t821;
  t6975 = t604*t6939;
  t7014 = -1.*t102*t711;
  t7068 = t6975 + t7014;
  t6973 = -1.*t99*t6961;
  t7079 = t881*t7068;
  t7124 = t6973 + t7079;
  t7162 = t881*t6961;
  t7190 = t99*t7068;
  t7199 = t7162 + t7190;
  t6131 = Power(t6127,2);
  t6199 = Power(t6198,2);
  t6200 = 0.00002025 + t6131 + t6199;
  t6208 = 1/Sqrt(t6200);
  t7425 = t6005 + t6179;
  t7430 = t99*t6142;
  t7431 = t5934 + t7430;
  t7382 = -0.21*t604;
  t7390 = -0.049*t102;
  t7391 = t7382 + t7390;
  t7334 = 0.049*t604;
  t7375 = t7334 + t5367;
  t6270 = t5819*t5722;
  t7415 = 0.01841*t881;
  t7417 = 0.70544*t99;
  t7419 = t7415 + t7417;
  t7400 = 0.70544*t881;
  t7404 = t7400 + t5681;
  t6328 = t5692*t6291;
  t7496 = t5940 + t6340;
  t7499 = t6180 + t6363;
  t7449 = t5*t7425;
  t7451 = t982*t7431;
  t7453 = t7449 + t7451;
  t7460 = t982*t7425;
  t7464 = -1.*t5*t7431;
  t7465 = t7460 + t7464;
  t6578 = -1.*t5819*t5722;
  t6580 = -1.*t5692*t6291;
  t7505 = t5*t7496;
  t7507 = t982*t7499;
  t7509 = t7505 + t7507;
  t7513 = t982*t7496;
  t7514 = -1.*t5*t7499;
  t7517 = t7513 + t7514;
  t7610 = -1.*t604*t581;
  t7612 = t7610 + t7014;
  t7617 = t881*t7612;
  t7622 = t7617 + t947;
  t7629 = t99*t7612;
  t7631 = t99*t911;
  t7637 = t7629 + t7631;
  t7656 = -1.*t604*t1251;
  t7658 = t7656 + t6655;
  t7661 = t881*t7658;
  t7664 = t7661 + t2147;
  t7670 = t99*t7658;
  t7672 = t99*t2006;
  t7673 = t7670 + t7672;
  t7684 = -1.*t604*t3330;
  t7686 = t7684 + t6749;
  t7690 = t881*t7686;
  t7692 = t7690 + t3408;
  t7700 = t99*t7686;
  t7704 = t99*t3385;
  t7707 = t7700 + t7704;
  t7743 = 0.02159*t982;
  t7744 = t7743 + t5922;
  t7735 = -1.11344*t982;
  t7737 = -0.02159*t5;
  t7739 = t7735 + t7737;
  t7762 = -1.*t5*t6175;
  t7763 = -1.*t982*t6181;
  t7767 = t7762 + t7763;
  t7750 = -1.*t982*t5944;
  t7753 = -1.*t5*t6063;
  t7754 = t7750 + t7753;
  t7868 = Cos(var1[16]);
  t7874 = Sin(var1[16]);
  t7877 = Cos(var1[17]);
  t7879 = -1.*t7877;
  t7880 = 1. + t7879;
  t7883 = Sin(var1[17]);
  t7898 = -1.*var1[17];
  t7903 = 0.226893 + t7898;
  t7907 = Cos(t7903);
  t7912 = -1.*t7907;
  t7913 = 1. + t7912;
  t7916 = Sin(t7903);
  t7921 = -1.*t7877*t7874;
  t7923 = -1.*t7868*t7883;
  t7924 = t7921 + t7923;
  t7934 = t7868*t7877;
  t7937 = -1.*t7874*t7883;
  t7940 = t7934 + t7937;
  t7949 = Cos(var1[21]);
  t7953 = -1.*t7949;
  t7955 = 1. + t7953;
  t7959 = Sin(var1[21]);
  t7964 = t7907*t7924;
  t7965 = -1.*t7916*t7940;
  t7966 = t7964 + t7965;
  t7944 = t7916*t7924;
  t7945 = t7907*t7940;
  t7946 = t7944 + t7945;
  t7882 = -0.049*t7880;
  t7884 = -0.21*t7883;
  t7886 = t7882 + t7884;
  t7892 = -0.21*t7880;
  t7895 = 0.049*t7883;
  t7896 = t7892 + t7895;
  t7927 = 0.01841*t7913;
  t7929 = -0.70544*t7916;
  t7933 = t7927 + t7929;
  t7915 = -0.70544*t7913;
  t7917 = -0.01841*t7916;
  t7920 = t7915 + t7917;
  t8002 = t7877*t7874;
  t8003 = t7868*t7883;
  t8004 = t8002 + t8003;
  t7958 = -0.02159*t7955;
  t7960 = -1.11344*t7959;
  t7961 = t7958 + t7960;
  t7968 = -1.11344*t7955;
  t7969 = 0.02159*t7959;
  t7970 = t7968 + t7969;
  t8011 = t7907*t8004;
  t8012 = t7916*t7940;
  t8014 = t8011 + t8012;
  t8019 = -1.*t7916*t8004;
  t8020 = t8019 + t7945;
  t7869 = 0.049*t7868;
  t7876 = -0.09*t7874;
  t7887 = t7868*t7886;
  t7897 = -1.*t7874*t7896;
  t7925 = t7920*t7924;
  t7941 = t7933*t7940;
  t7963 = t7946*t7961;
  t7973 = t7966*t7970;
  t7975 = t7949*t7966;
  t7978 = -1.*t7946*t7959;
  t7979 = t7975 + t7978;
  t7984 = -1.11344*t7979;
  t7986 = t7949*t7946;
  t7988 = t7966*t7959;
  t7989 = t7986 + t7988;
  t7990 = -0.02159*t7989;
  t7991 = t7869 + t7876 + t7887 + t7897 + t7925 + t7941 + t7963 + t7973 + t7984 + t7990;
  t7996 = 0.09*t7868;
  t7998 = 0.049*t7874;
  t8000 = t7874*t7886;
  t8001 = t7868*t7896;
  t8008 = t7933*t8004;
  t8010 = t7920*t7940;
  t8016 = t8014*t7961;
  t8021 = t8020*t7970;
  t8023 = t7949*t8014;
  t8025 = t8020*t7959;
  t8026 = t8023 + t8025;
  t8027 = -0.02159*t8026;
  t8029 = t7949*t8020;
  t8030 = -1.*t8014*t7959;
  t8031 = t8029 + t8030;
  t8033 = -1.11344*t8031;
  t8034 = t7996 + t7998 + t8000 + t8001 + t8008 + t8010 + t8016 + t8021 + t8027 + t8033;
  t8045 = -1.*t7868*t7877;
  t8046 = t7874*t7883;
  t8048 = t8045 + t8046;
  t8051 = t7916*t8048;
  t8053 = t7964 + t8051;
  t8065 = -1.*t7916*t7924;
  t8066 = t7907*t8048;
  t8068 = t8065 + t8066;
  t7994 = Power(t7991,2);
  t8035 = Power(t8034,2);
  t8036 = 0.00002025 + t7994 + t8035;
  t8037 = 1/Sqrt(t8036);
  t8116 = t7916*t8004;
  t8120 = t7944 + t8116;
  t8123 = t7964 + t8011;
  t8090 = 0.049*t7877;
  t8091 = t8090 + t7884;
  t8095 = -0.21*t7877;
  t8096 = -0.049*t7883;
  t8097 = t8095 + t8096;
  t8044 = t7933*t7924;
  t8104 = 0.01841*t7907;
  t8110 = 0.70544*t7916;
  t8111 = t8104 + t8110;
  t8100 = 0.70544*t7907;
  t8101 = t8100 + t7917;
  t8049 = t7920*t8048;
  t8147 = t8012 + t8051;
  t8151 = t7945 + t8066;
  t8178 = 0.02159*t7949;
  t8179 = t8178 + t7960;
  t8181 = -1.11344*t7949;
  t8182 = -0.02159*t7959;
  t8183 = t8181 + t8182;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=1.;
  p_output1[7]=0;
  p_output1[8]=t3820*t4202*(-0.642788*(t4085*t5 + t4007*t982) - 0.766044*(-1.*t4007*t5 + t4085*t982)) + 0.5*t1182*t3686*t3820*(2.*t2608*(0.642788*(t2968*t5 + t2901*t982) + 0.766044*(-1.*t2901*t5 + t2968*t982)) + 2.*t3577*(0.642788*(t3234*t5 + t3187*t982) + 0.766044*(-1.*t3187*t5 + t3234*t982)));
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=1.;
  p_output1[17]=t3820*t4202*(-0.642788*(t5*t5189 + t5085*t982) - 0.766044*(-1.*t5*t5085 + t5189*t982)) + 0.5*t1182*t3686*t3820*(2.*t2608*(0.642788*(t4358*t5 + t4345*t982) + 0.766044*(-1.*t4345*t5 + t4358*t982)) + 2.*t3577*(0.642788*(t4798*t5 + t4750*t982) + 0.766044*(-1.*t4750*t5 + t4798*t982)));
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0.5*t6208*(2.*t6127*t6198 + 2.*t6127*(t6218 + t6229 + t6244 + t6260 + t6270 + t6328 + t5975*t6345 + t5924*t6374 - 0.02159*t6394 - 1.11344*t6413));
  p_output1[23]=t6127*t6489*t6566 + t6537*t6566*(t6132 + t6135 + t6136 + t6137 - 1.*t5975*t6345 - 1.*t5924*t6374 + 0.02159*t6394 + 1.11344*t6413 + t6578 + t6580);
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=t3820*t4202*(-0.766044*(-1.*t5*t7199 + t7124*t982) - 0.642788*(t5*t7124 + t7199*t982)) + 0.5*t1182*t3686*t3820*(2.*t2608*(0.766044*(-1.*t5*t6675 + t6659*t982) + 0.642788*(t5*t6659 + t6675*t982)) + 2.*t3577*(0.766044*(-1.*t5*t6833 + t6756*t982) + 0.642788*(t5*t6756 + t6833*t982)));
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0.5*t6208*(2.*t6198*(t5754 + t5862 + t133*t7375 + t571*t7391 + t6142*t7404 + t5850*t7419 + t5975*t7425 + t5924*t7431 - 0.02159*t7453 - 1.11344*t7465) + 2.*t6127*(t6270 + t6328 - 1.*t571*t7375 + t133*t7391 + t5850*t7404 + t5722*t7419 + t5975*t7496 + t5924*t7499 - 0.02159*t7509 - 1.11344*t7517));
  p_output1[32]=t6127*t6566*(t6464 + t6465 - 1.*t133*t7375 - 1.*t571*t7391 - 1.*t6142*t7404 - 1.*t5850*t7419 - 1.*t5975*t7425 - 1.*t5924*t7431 + 0.02159*t7453 + 1.11344*t7465) + t6537*t6566*(t6578 + t6580 + t571*t7375 - 1.*t133*t7391 - 1.*t5850*t7404 - 1.*t5722*t7419 - 1.*t5975*t7496 - 1.*t5924*t7499 + 0.02159*t7509 + 1.11344*t7517);
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=t3820*t4202*(-0.766044*(-1.*t5*t7637 + t7622*t982) - 0.642788*(t5*t7622 + t7637*t982)) + 0.5*t1182*t3686*t3820*(2.*t2608*(0.766044*(-1.*t5*t7673 + t7664*t982) + 0.642788*(t5*t7664 + t7673*t982)) + 2.*t3577*(0.766044*(-1.*t5*t7707 + t7692*t982) + 0.642788*(t5*t7692 + t7707*t982)));
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0.5*t6208*(2.*t6127*(-0.02159*t6083 + t5944*t7739 + t6063*t7744 - 1.11344*t7754) + 2.*t6198*(-0.02159*t6196 + t6181*t7739 + t6175*t7744 - 1.11344*t7767));
  p_output1[41]=t6537*t6566*(0.02159*t6083 - 1.*t5944*t7739 - 1.*t6063*t7744 + 1.11344*t7754) + t6127*t6566*(0.02159*t6196 - 1.*t6181*t7739 - 1.*t6175*t7744 + 1.11344*t7767);
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=t3820*t4202*(-0.642788*t1118 - 0.766044*(-1.*t1055*t5 - 1.*t969*t982)) + 0.5*t1182*t3686*t3820*(2.*t2608*(0.642788*t2430 + 0.766044*(-1.*t2398*t5 - 1.*t2149*t982)) + 2.*t3577*(0.642788*t3457 + 0.766044*(-1.*t3447*t5 - 1.*t3414*t982)));
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=1.;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0.5*t8037*(2.*t7991*t8034 + 2.*t7991*(-0.09*t7868 - 0.049*t7874 - 1.*t7874*t7886 - 1.*t7868*t7896 + t8044 + t8049 + t7961*t8053 + t7970*t8068 - 1.11344*(-1.*t7959*t8053 + t7949*t8068) - 0.02159*(t7949*t8053 + t7959*t8068)));
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0.5*t8037*(2.*t8034*(t7925 + t7941 + t7868*t8091 + t7874*t8097 + t8004*t8101 + t7940*t8111 + t7961*t8120 + t7970*t8123 - 1.11344*(-1.*t7959*t8120 + t7949*t8123) - 0.02159*(t7949*t8120 + t7959*t8123)) + 2.*t7991*(t8044 + t8049 - 1.*t7874*t8091 + t7868*t8097 + t7940*t8101 + t7924*t8111 + t7961*t8147 + t7970*t8151 - 1.11344*(-1.*t7959*t8147 + t7949*t8151) - 0.02159*(t7949*t8147 + t7959*t8151)));
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0.5*t8037*(2.*t7991*(-1.11344*(-1.*t7946*t7949 - 1.*t7959*t7966) - 0.02159*t7979 + t7966*t8179 + t7946*t8183) + 2.*t8034*(-1.11344*(-1.*t7949*t8014 - 1.*t7959*t8020) - 0.02159*t8031 + t8020*t8179 + t8014*t8183));
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 10, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_yaRightStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




