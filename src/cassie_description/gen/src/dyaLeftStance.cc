/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:19:32 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "dyaLeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t95;
  double t222;
  double t226;
  double t240;
  double t299;
  double t641;
  double t764;
  double t767;
  double t796;
  double t797;
  double t903;
  double t946;
  double t966;
  double t972;
  double t1007;
  double t1057;
  double t1064;
  double t1067;
  double t1078;
  double t1083;
  double t1096;
  double t1119;
  double t1143;
  double t1162;
  double t1164;
  double t1192;
  double t1196;
  double t1199;
  double t709;
  double t716;
  double t751;
  double t290;
  double t480;
  double t540;
  double t1016;
  double t1048;
  double t1053;
  double t907;
  double t952;
  double t963;
  double t1171;
  double t1180;
  double t1189;
  double t1667;
  double t1698;
  double t1722;
  double t1110;
  double t1120;
  double t1133;
  double t1738;
  double t1827;
  double t1900;
  double t1911;
  double t2074;
  double t1207;
  double t1216;
  double t1218;
  double t187;
  double t635;
  double t706;
  double t760;
  double t1008;
  double t1068;
  double t1170;
  double t1206;
  double t1225;
  double t1226;
  double t1229;
  double t1242;
  double t1250;
  double t1316;
  double t1337;
  double t1349;
  double t1539;
  double t1607;
  double t1726;
  double t1728;
  double t1860;
  double t2085;
  double t2088;
  double t2132;
  double t2133;
  double t2135;
  double t2157;
  double t2161;
  double t2163;
  double t2166;
  double t2183;
  double t2262;
  double t2268;
  double t2235;
  double t2250;
  double t2251;
  double t1322;
  double t2189;
  double t2199;
  double t2203;
  double t2554;
  double t2569;
  double t2572;
  double t2585;
  double t2596;
  double t2617;
  double t2626;
  double t2629;
  double t2878;
  double t2893;
  double t2900;
  double t2830;
  double t2835;
  double t2836;
  double t2782;
  double t2806;
  double t2553;
  double t2849;
  double t2859;
  double t2861;
  double t2839;
  double t2843;
  double t2584;
  double t3067;
  double t3077;
  double t3158;
  double t3179;
  double t3204;
  double t3206;
  double t3209;
  double t3211;
  double t3282;
  double t3286;
  double t3293;
  double t3295;
  double t3300;
  double t3331;
  double t3345;
  double t3350;
  double t3353;
  double t3367;
  double t3369;
  double t3370;
  double t3421;
  double t3433;
  double t3439;
  double t3449;
  double t3461;
  double t3468;
  double t3474;
  double t3384;
  double t3386;
  double t3405;
  double t3210;
  double t3228;
  double t3232;
  double t3247;
  double t3254;
  double t3261;
  double t3355;
  double t3360;
  double t3363;
  double t3314;
  double t3342;
  double t3343;
  double t3573;
  double t3577;
  double t3578;
  double t3442;
  double t3452;
  double t3456;
  double t3475;
  double t3488;
  double t3492;
  double t3588;
  double t3596;
  double t3598;
  double t3601;
  double t3602;
  double t3505;
  double t3507;
  double t3518;
  double t3170;
  double t3200;
  double t3233;
  double t3274;
  double t3354;
  double t3375;
  double t3459;
  double t3501;
  double t3523;
  double t3534;
  double t3540;
  double t3545;
  double t3546;
  double t3549;
  double t3565;
  double t3568;
  double t3570;
  double t3572;
  double t3583;
  double t3584;
  double t3599;
  double t3605;
  double t3608;
  double t3609;
  double t3611;
  double t3615;
  double t3620;
  double t3621;
  double t3622;
  double t3623;
  double t3625;
  double t3639;
  double t3640;
  double t3644;
  double t3649;
  double t3652;
  double t3564;
  double t3628;
  double t3632;
  double t3637;
  double t3730;
  double t3731;
  double t3734;
  double t3745;
  double t3747;
  double t3759;
  double t3762;
  double t3770;
  double t3913;
  double t3914;
  double t3919;
  double t3831;
  double t3833;
  double t3839;
  double t3853;
  double t3857;
  double t3729;
  double t3884;
  double t3893;
  double t3897;
  double t3872;
  double t3873;
  double t3738;
  double t3968;
  double t3978;
  double t3692;
  double t3694;
  double t3695;
  double t3712;
  double t3717;
  double t3718;
  double t3725;
  double t3670;
  double t3678;
  double t3680;
  double t4189;
  double t4195;
  double t4196;
  double t4204;
  double t4205;
  double t4206;
  double t4208;
  double t4156;
  double t4157;
  double t4159;
  double t4161;
  double t4166;
  double t4168;
  double t4178;
  double t4179;
  double t4180;
  double t4183;
  double t4185;
  double t4187;
  double t4209;
  double t4210;
  double t4214;
  double t3784;
  double t3791;
  double t3792;
  double t3799;
  double t3802;
  double t3806;
  double t3925;
  double t3927;
  double t3929;
  double t3936;
  double t3937;
  double t3940;
  double t4246;
  double t4256;
  double t3988;
  double t3994;
  double t3996;
  double t4009;
  double t4012;
  double t4027;
  double t4384;
  double t4381;
  double t4393;
  double t4400;
  double t4401;
  double t4411;
  double t4412;
  double t4423;
  double t4426;
  double t4386;
  double t4427;
  double t4431;
  double t4442;
  double t4443;
  double t4445;
  double t4439;
  double t4447;
  double t4448;
  double t4466;
  double t4494;
  double t4500;
  double t4456;
  double t4502;
  double t4503;
  double t4509;
  double t4512;
  double t4513;
  double t4560;
  double t4565;
  double t4575;
  double t4543;
  double t4549;
  double t4551;
  double t4554;
  double t4585;
  double t4586;
  double t4599;
  double t4604;
  double t4611;
  double t4653;
  double t4654;
  double t4655;
  double t4598;
  double t4616;
  double t4641;
  double t4705;
  double t4706;
  double t4707;
  double t4695;
  double t4696;
  double t4700;
  double t4702;
  double t4711;
  double t4712;
  double t4722;
  double t4725;
  double t4726;
  double t4733;
  double t4737;
  double t4740;
  double t4720;
  double t4729;
  double t4730;
  double t4769;
  double t4774;
  double t4783;
  double t4792;
  double t4793;
  double t4794;
  double t4786;
  double t4798;
  double t4799;
  double t4807;
  double t4820;
  double t4831;
  double t4806;
  double t4832;
  double t4833;
  double t4837;
  double t4841;
  double t4843;
  double t4885;
  double t4886;
  double t4888;
  double t4884;
  double t4889;
  double t4891;
  double t4893;
  double t4895;
  double t4896;
  double t4892;
  double t4901;
  double t4911;
  double t4920;
  double t4928;
  double t4930;
  double t4913;
  double t4932;
  double t4933;
  double t4936;
  double t4940;
  double t4946;
  double t4649;
  double t4659;
  double t4661;
  double t4662;
  double t4672;
  double t4673;
  double t4680;
  double t4682;
  double t4686;
  double t4934;
  double t4956;
  double t4967;
  double t4972;
  double t4973;
  double t5003;
  double t5010;
  double t5026;
  double t5030;
  double t5050;
  double t4505;
  double t4515;
  double t4516;
  double t4521;
  double t4523;
  double t4525;
  double t5051;
  double t5130;
  double t5134;
  double t5146;
  double t5090;
  double t5098;
  double t5114;
  double t5127;
  double t5149;
  double t5153;
  double t5167;
  double t5168;
  double t5176;
  double t5193;
  double t5204;
  double t5207;
  double t5156;
  double t5186;
  double t5190;
  double t5054;
  double t5065;
  double t5072;
  double t5074;
  double t5075;
  double t5080;
  double t5084;
  double t4519;
  double t4531;
  double t4535;
  double t5249;
  double t5252;
  double t5254;
  double t5260;
  double t5267;
  double t5268;
  double t5279;
  double t5280;
  double t5281;
  double t5255;
  double t5269;
  double t5277;
  double t5319;
  double t5324;
  double t5325;
  double t5332;
  double t5338;
  double t5342;
  double t5344;
  double t5352;
  double t5353;
  double t5343;
  double t5356;
  double t5357;
  double t5363;
  double t5364;
  double t5365;
  double t5061;
  double t5408;
  double t5411;
  double t5420;
  double t5422;
  double t5435;
  double t5438;
  double t5457;
  double t5460;
  double t5482;
  double t5445;
  double t5488;
  double t5491;
  double t5520;
  double t5523;
  double t5531;
  double t5237;
  double t5571;
  double t5577;
  double t5578;
  double t5581;
  double t5582;
  double t5586;
  double t5587;
  double t5589;
  double t5602;
  double t5604;
  double t5605;
  double t5585;
  double t5591;
  double t5597;
  double t5627;
  double t5629;
  double t5636;
  double t5639;
  double t5642;
  double t5646;
  double t5648;
  double t5664;
  double t5644;
  double t5666;
  double t5669;
  double t5674;
  double t5683;
  double t5689;
  double t5732;
  double t5733;
  double t5738;
  double t5740;
  double t5744;
  double t5758;
  double t5762;
  double t5765;
  double t5749;
  double t5767;
  double t5771;
  double t5775;
  double t5782;
  double t5785;
  double t5958;
  double t5961;
  double t5964;
  double t5969;
  double t5976;
  double t5993;
  double t6001;
  double t6016;
  double t5989;
  double t6021;
  double t6026;
  double t6038;
  double t6041;
  double t6043;
  double t6032;
  double t6045;
  double t6050;
  double t6053;
  double t6054;
  double t6059;
  double t6088;
  double t6095;
  double t6096;
  double t6097;
  double t6103;
  double t6111;
  double t6124;
  double t6152;
  double t6159;
  double t6168;
  double t6170;
  double t6162;
  double t6164;
  double t6166;
  double t6203;
  double t6208;
  double t6210;
  double t6211;
  double t6221;
  double t6227;
  double t6232;
  t95 = Cos(var1[8]);
  t222 = Cos(var1[9]);
  t226 = -1.*t222;
  t240 = 1. + t226;
  t299 = Sin(var1[9]);
  t641 = Sin(var1[8]);
  t764 = -1.*var1[9];
  t767 = 0.226893 + t764;
  t796 = Cos(t767);
  t797 = -1.*t796;
  t903 = 1. + t797;
  t946 = Sin(t767);
  t966 = -1.*t95*t299;
  t972 = -1.*t222*t641;
  t1007 = t966 + t972;
  t1057 = t222*t95;
  t1064 = -1.*t299*t641;
  t1067 = t1057 + t1064;
  t1078 = Cos(var1[13]);
  t1083 = -1.*t1078;
  t1096 = 1. + t1083;
  t1119 = Sin(var1[13]);
  t1143 = t946*t1007;
  t1162 = t796*t1067;
  t1164 = t1143 + t1162;
  t1192 = t796*t1007;
  t1196 = -1.*t946*t1067;
  t1199 = t1192 + t1196;
  t709 = -0.21*t240;
  t716 = 0.049*t299;
  t751 = t709 + t716;
  t290 = -0.049*t240;
  t480 = -0.21*t299;
  t540 = t290 + t480;
  t1016 = 0.01841*t903;
  t1048 = -0.70544*t946;
  t1053 = t1016 + t1048;
  t907 = -0.70544*t903;
  t952 = -0.01841*t946;
  t963 = t907 + t952;
  t1171 = -1.11344*t1096;
  t1180 = 0.02159*t1119;
  t1189 = t1171 + t1180;
  t1667 = t95*t299;
  t1698 = t222*t641;
  t1722 = t1667 + t1698;
  t1110 = -0.02159*t1096;
  t1120 = -1.11344*t1119;
  t1133 = t1110 + t1120;
  t1738 = -1.*t946*t1722;
  t1827 = t1738 + t1162;
  t1900 = t796*t1722;
  t1911 = t946*t1067;
  t2074 = t1900 + t1911;
  t1207 = -1.*t1119*t1164;
  t1216 = t1078*t1199;
  t1218 = t1207 + t1216;
  t187 = 0.049*t95;
  t635 = t95*t540;
  t706 = -0.09*t641;
  t760 = -1.*t751*t641;
  t1008 = t963*t1007;
  t1068 = t1053*t1067;
  t1170 = t1133*t1164;
  t1206 = t1189*t1199;
  t1225 = -1.11344*t1218;
  t1226 = t1078*t1164;
  t1229 = t1119*t1199;
  t1242 = t1226 + t1229;
  t1250 = -0.02159*t1242;
  t1316 = t187 + t635 + t706 + t760 + t1008 + t1068 + t1170 + t1206 + t1225 + t1250;
  t1337 = 0.09*t95;
  t1349 = t95*t751;
  t1539 = 0.049*t641;
  t1607 = t540*t641;
  t1726 = t1053*t1722;
  t1728 = t963*t1067;
  t1860 = t1189*t1827;
  t2085 = t1133*t2074;
  t2088 = t1119*t1827;
  t2132 = t1078*t2074;
  t2133 = t2088 + t2132;
  t2135 = -0.02159*t2133;
  t2157 = t1078*t1827;
  t2161 = -1.*t1119*t2074;
  t2163 = t2157 + t2161;
  t2166 = -1.11344*t2163;
  t2183 = t1337 + t1349 + t1539 + t1607 + t1726 + t1728 + t1860 + t2085 + t2135 + t2166;
  t2262 = 0.02159*t1078;
  t2268 = t2262 + t1120;
  t2235 = -1.11344*t1078;
  t2250 = -0.02159*t1119;
  t2251 = t2235 + t2250;
  t1322 = Power(t1316,2);
  t2189 = Power(t2183,2);
  t2199 = 0.00002025 + t1322 + t2189;
  t2203 = 1/Sqrt(t2199);
  t2554 = -1.*t222*t95;
  t2569 = t299*t641;
  t2572 = t2554 + t2569;
  t2585 = -1.*t946*t1007;
  t2596 = t796*t2572;
  t2617 = t2585 + t2596;
  t2626 = t946*t2572;
  t2629 = t1192 + t2626;
  t2878 = t1192 + t1900;
  t2893 = t946*t1722;
  t2900 = t1143 + t2893;
  t2830 = -0.21*t222;
  t2835 = -0.049*t299;
  t2836 = t2830 + t2835;
  t2782 = 0.049*t222;
  t2806 = t2782 + t480;
  t2553 = t1053*t1007;
  t2849 = 0.01841*t796;
  t2859 = 0.70544*t946;
  t2861 = t2849 + t2859;
  t2839 = 0.70544*t796;
  t2843 = t2839 + t952;
  t2584 = t963*t2572;
  t3067 = t1162 + t2596;
  t3077 = t1911 + t2626;
  t3158 = Cos(var1[16]);
  t3179 = Sin(var1[16]);
  t3204 = Cos(var1[17]);
  t3206 = -1.*t3204;
  t3209 = 1. + t3206;
  t3211 = Sin(var1[17]);
  t3282 = -1.*var1[17];
  t3286 = 0.226893 + t3282;
  t3293 = Cos(t3286);
  t3295 = -1.*t3293;
  t3300 = 1. + t3295;
  t3331 = Sin(t3286);
  t3345 = -1.*t3204*t3179;
  t3350 = -1.*t3158*t3211;
  t3353 = t3345 + t3350;
  t3367 = t3158*t3204;
  t3369 = -1.*t3179*t3211;
  t3370 = t3367 + t3369;
  t3421 = Cos(var1[21]);
  t3433 = -1.*t3421;
  t3439 = 1. + t3433;
  t3449 = Sin(var1[21]);
  t3461 = t3293*t3353;
  t3468 = -1.*t3331*t3370;
  t3474 = t3461 + t3468;
  t3384 = t3331*t3353;
  t3386 = t3293*t3370;
  t3405 = t3384 + t3386;
  t3210 = -0.049*t3209;
  t3228 = -0.21*t3211;
  t3232 = t3210 + t3228;
  t3247 = -0.21*t3209;
  t3254 = 0.049*t3211;
  t3261 = t3247 + t3254;
  t3355 = 0.01841*t3300;
  t3360 = -0.70544*t3331;
  t3363 = t3355 + t3360;
  t3314 = -0.70544*t3300;
  t3342 = -0.01841*t3331;
  t3343 = t3314 + t3342;
  t3573 = t3204*t3179;
  t3577 = t3158*t3211;
  t3578 = t3573 + t3577;
  t3442 = -0.02159*t3439;
  t3452 = -1.11344*t3449;
  t3456 = t3442 + t3452;
  t3475 = -1.11344*t3439;
  t3488 = 0.02159*t3449;
  t3492 = t3475 + t3488;
  t3588 = t3293*t3578;
  t3596 = t3331*t3370;
  t3598 = t3588 + t3596;
  t3601 = -1.*t3331*t3578;
  t3602 = t3601 + t3386;
  t3505 = t3421*t3474;
  t3507 = -1.*t3405*t3449;
  t3518 = t3505 + t3507;
  t3170 = 0.049*t3158;
  t3200 = -0.09*t3179;
  t3233 = t3158*t3232;
  t3274 = -1.*t3179*t3261;
  t3354 = t3343*t3353;
  t3375 = t3363*t3370;
  t3459 = t3405*t3456;
  t3501 = t3474*t3492;
  t3523 = -1.11344*t3518;
  t3534 = t3421*t3405;
  t3540 = t3474*t3449;
  t3545 = t3534 + t3540;
  t3546 = -0.02159*t3545;
  t3549 = t3170 + t3200 + t3233 + t3274 + t3354 + t3375 + t3459 + t3501 + t3523 + t3546;
  t3565 = 0.09*t3158;
  t3568 = 0.049*t3179;
  t3570 = t3179*t3232;
  t3572 = t3158*t3261;
  t3583 = t3363*t3578;
  t3584 = t3343*t3370;
  t3599 = t3598*t3456;
  t3605 = t3602*t3492;
  t3608 = t3421*t3598;
  t3609 = t3602*t3449;
  t3611 = t3608 + t3609;
  t3615 = -0.02159*t3611;
  t3620 = t3421*t3602;
  t3621 = -1.*t3598*t3449;
  t3622 = t3620 + t3621;
  t3623 = -1.11344*t3622;
  t3625 = t3565 + t3568 + t3570 + t3572 + t3583 + t3584 + t3599 + t3605 + t3615 + t3623;
  t3639 = 0.02159*t3421;
  t3640 = t3639 + t3452;
  t3644 = -1.11344*t3421;
  t3649 = -0.02159*t3449;
  t3652 = t3644 + t3649;
  t3564 = Power(t3549,2);
  t3628 = Power(t3625,2);
  t3632 = 0.00002025 + t3564 + t3628;
  t3637 = 1/Sqrt(t3632);
  t3730 = -1.*t3158*t3204;
  t3731 = t3179*t3211;
  t3734 = t3730 + t3731;
  t3745 = t3331*t3734;
  t3747 = t3461 + t3745;
  t3759 = -1.*t3331*t3353;
  t3762 = t3293*t3734;
  t3770 = t3759 + t3762;
  t3913 = t3331*t3578;
  t3914 = t3384 + t3913;
  t3919 = t3461 + t3588;
  t3831 = 0.049*t3204;
  t3833 = t3831 + t3228;
  t3839 = -0.21*t3204;
  t3853 = -0.049*t3211;
  t3857 = t3839 + t3853;
  t3729 = t3363*t3353;
  t3884 = 0.01841*t3293;
  t3893 = 0.70544*t3331;
  t3897 = t3884 + t3893;
  t3872 = 0.70544*t3293;
  t3873 = t3872 + t3342;
  t3738 = t3343*t3734;
  t3968 = t3596 + t3745;
  t3978 = t3386 + t3762;
  t3692 = -1.*t3421*t3598;
  t3694 = -1.*t3602*t3449;
  t3695 = t3692 + t3694;
  t3712 = -0.09*t3158;
  t3717 = -0.049*t3179;
  t3718 = -1.*t3179*t3232;
  t3725 = -1.*t3158*t3261;
  t3670 = -1.*t3421*t3405;
  t3678 = -1.*t3474*t3449;
  t3680 = t3670 + t3678;
  t4189 = -1.*t3363*t3578;
  t4195 = -1.*t3343*t3370;
  t4196 = -1.*t3598*t3456;
  t4204 = -1.*t3602*t3492;
  t4205 = 0.02159*t3611;
  t4206 = 1.11344*t3622;
  t4208 = t3712 + t3717 + t3718 + t3725 + t4189 + t4195 + t4196 + t4204 + t4205 + t4206;
  t4156 = -0.049*t3158;
  t4157 = 0.09*t3179;
  t4159 = -1.*t3158*t3232;
  t4161 = t3179*t3261;
  t4166 = -1.*t3343*t3353;
  t4168 = -1.*t3363*t3370;
  t4178 = -1.*t3405*t3456;
  t4179 = -1.*t3474*t3492;
  t4180 = 1.11344*t3518;
  t4183 = 0.02159*t3545;
  t4185 = t4156 + t4157 + t4159 + t4161 + t4166 + t4168 + t4178 + t4179 + t4180 + t4183;
  t4187 = Power(t4185,2);
  t4209 = Power(t4208,2);
  t4210 = t4187 + t4209;
  t4214 = 1/t4210;
  t3784 = t3421*t3747;
  t3791 = t3770*t3449;
  t3792 = t3784 + t3791;
  t3799 = t3421*t3770;
  t3802 = -1.*t3747*t3449;
  t3806 = t3799 + t3802;
  t3925 = t3421*t3914;
  t3927 = t3919*t3449;
  t3929 = t3925 + t3927;
  t3936 = t3421*t3919;
  t3937 = -1.*t3914*t3449;
  t3940 = t3936 + t3937;
  t4246 = -1.*t3363*t3353;
  t4256 = -1.*t3343*t3734;
  t3988 = t3421*t3968;
  t3994 = t3978*t3449;
  t3996 = t3988 + t3994;
  t4009 = t3421*t3978;
  t4012 = -1.*t3968*t3449;
  t4027 = t4009 + t4012;
  t4384 = Cos(var1[4]);
  t4381 = Cos(var1[14]);
  t4393 = Sin(var1[14]);
  t4400 = Sin(var1[15]);
  t4401 = t4384*t4393*t4400;
  t4411 = Cos(var1[15]);
  t4412 = Sin(var1[4]);
  t4423 = -1.*t4411*t4412;
  t4426 = t4401 + t4423;
  t4386 = t4381*t4384*t3179;
  t4427 = t3158*t4426;
  t4431 = t4386 + t4427;
  t4442 = t4381*t3158*t4384;
  t4443 = -1.*t3179*t4426;
  t4445 = t4442 + t4443;
  t4439 = -1.*t3211*t4431;
  t4447 = t3204*t4445;
  t4448 = t4439 + t4447;
  t4466 = t3204*t4431;
  t4494 = t3211*t4445;
  t4500 = t4466 + t4494;
  t4456 = t3331*t4448;
  t4502 = t3293*t4500;
  t4503 = t4456 + t4502;
  t4509 = t3293*t4448;
  t4512 = -1.*t3331*t4500;
  t4513 = t4509 + t4512;
  t4560 = t4381*t3158*t4400;
  t4565 = -1.*t4393*t3179;
  t4575 = t4560 + t4565;
  t4543 = -1.*t3158*t4393;
  t4549 = -1.*t4381*t4400*t3179;
  t4551 = t4543 + t4549;
  t4554 = t3204*t4551;
  t4585 = -1.*t4575*t3211;
  t4586 = t4554 + t4585;
  t4599 = t3204*t4575;
  t4604 = t4551*t3211;
  t4611 = t4599 + t4604;
  t4653 = t3331*t4586;
  t4654 = t3293*t4611;
  t4655 = t4653 + t4654;
  t4598 = t3293*t4586;
  t4616 = -1.*t3331*t4611;
  t4641 = t4598 + t4616;
  t4705 = -1.*t3158*t4393*t4400;
  t4706 = -1.*t4381*t3179;
  t4707 = t4705 + t4706;
  t4695 = -1.*t4381*t3158;
  t4696 = t4393*t4400*t3179;
  t4700 = t4695 + t4696;
  t4702 = t3204*t4700;
  t4711 = -1.*t4707*t3211;
  t4712 = t4702 + t4711;
  t4722 = t3204*t4707;
  t4725 = t4700*t3211;
  t4726 = t4722 + t4725;
  t4733 = t3331*t4712;
  t4737 = t3293*t4726;
  t4740 = t4733 + t4737;
  t4720 = t3293*t4712;
  t4729 = -1.*t3331*t4726;
  t4730 = t4720 + t4729;
  t4769 = t4381*t3158*t4400*t4412;
  t4774 = -1.*t4393*t3179*t4412;
  t4783 = t4769 + t4774;
  t4792 = -1.*t3158*t4393*t4412;
  t4793 = -1.*t4381*t4400*t3179*t4412;
  t4794 = t4792 + t4793;
  t4786 = -1.*t3211*t4783;
  t4798 = t3204*t4794;
  t4799 = t4786 + t4798;
  t4807 = t3204*t4783;
  t4820 = t3211*t4794;
  t4831 = t4807 + t4820;
  t4806 = t3331*t4799;
  t4832 = t3293*t4831;
  t4833 = t4806 + t4832;
  t4837 = t3293*t4799;
  t4841 = -1.*t3331*t4831;
  t4843 = t4837 + t4841;
  t4885 = t4411*t4384;
  t4886 = t4393*t4400*t4412;
  t4888 = t4885 + t4886;
  t4884 = t4381*t3179*t4412;
  t4889 = t3158*t4888;
  t4891 = t4884 + t4889;
  t4893 = t4381*t3158*t4412;
  t4895 = -1.*t3179*t4888;
  t4896 = t4893 + t4895;
  t4892 = -1.*t3211*t4891;
  t4901 = t3204*t4896;
  t4911 = t4892 + t4901;
  t4920 = t3204*t4891;
  t4928 = t3211*t4896;
  t4930 = t4920 + t4928;
  t4913 = t3331*t4911;
  t4932 = t3293*t4930;
  t4933 = t4913 + t4932;
  t4936 = t3293*t4911;
  t4940 = -1.*t3331*t4930;
  t4946 = t4936 + t4940;
  t4649 = t3421*t4641;
  t4659 = -1.*t4655*t3449;
  t4661 = t4649 + t4659;
  t4662 = 0.766044*t4661;
  t4672 = t3421*t4655;
  t4673 = t4641*t3449;
  t4680 = t4672 + t4673;
  t4682 = 0.642788*t4680;
  t4686 = t4662 + t4682;
  t4934 = -1.*t3449*t4933;
  t4956 = t3421*t4946;
  t4967 = t4934 + t4956;
  t4972 = 0.766044*t4967;
  t4973 = t3421*t4933;
  t5003 = t3449*t4946;
  t5010 = t4973 + t5003;
  t5026 = 0.642788*t5010;
  t5030 = t4972 + t5026;
  t5050 = Power(t4686,2);
  t4505 = -1.*t3449*t4503;
  t4515 = t3421*t4513;
  t4516 = t4505 + t4515;
  t4521 = t3421*t4503;
  t4523 = t3449*t4513;
  t4525 = t4521 + t4523;
  t5051 = Power(t5030,2);
  t5130 = t4381*t3158*t4384*t4400;
  t5134 = -1.*t4384*t4393*t3179;
  t5146 = t5130 + t5134;
  t5090 = -1.*t3158*t4384*t4393;
  t5098 = -1.*t4381*t4384*t4400*t3179;
  t5114 = t5090 + t5098;
  t5127 = t3204*t5114;
  t5149 = -1.*t5146*t3211;
  t5153 = t5127 + t5149;
  t5167 = t3204*t5146;
  t5168 = t5114*t3211;
  t5176 = t5167 + t5168;
  t5193 = t3331*t5153;
  t5204 = t3293*t5176;
  t5207 = t5193 + t5204;
  t5156 = t3293*t5153;
  t5186 = -1.*t3331*t5176;
  t5190 = t5156 + t5186;
  t5054 = t5050 + t5051;
  t5065 = -0.766044*t4516;
  t5072 = -0.642788*t4525;
  t5074 = t5065 + t5072;
  t5075 = Power(t5074,2);
  t5080 = t5050 + t5075 + t5051;
  t5084 = 1/t5080;
  t4519 = 0.766044*t4516;
  t4531 = 0.642788*t4525;
  t4535 = t4519 + t4531;
  t5249 = -1.*t4381*t4411*t3204*t3179;
  t5252 = -1.*t4381*t4411*t3158*t3211;
  t5254 = t5249 + t5252;
  t5260 = t4381*t4411*t3158*t3204;
  t5267 = -1.*t4381*t4411*t3179*t3211;
  t5268 = t5260 + t5267;
  t5279 = t3331*t5254;
  t5280 = t3293*t5268;
  t5281 = t5279 + t5280;
  t5255 = t3293*t5254;
  t5269 = -1.*t3331*t5268;
  t5277 = t5255 + t5269;
  t5319 = -1.*t4384*t4400;
  t5324 = t4411*t4393*t4412;
  t5325 = t5319 + t5324;
  t5332 = -1.*t3204*t3179*t5325;
  t5338 = -1.*t3158*t3211*t5325;
  t5342 = t5332 + t5338;
  t5344 = t3158*t3204*t5325;
  t5352 = -1.*t3179*t3211*t5325;
  t5353 = t5344 + t5352;
  t5343 = t3331*t5342;
  t5356 = t3293*t5353;
  t5357 = t5343 + t5356;
  t5363 = t3293*t5342;
  t5364 = -1.*t3331*t5353;
  t5365 = t5363 + t5364;
  t5061 = 1/Sqrt(t5054);
  t5408 = t4411*t4384*t4393;
  t5411 = t4400*t4412;
  t5420 = t5408 + t5411;
  t5422 = -1.*t3204*t3179*t5420;
  t5435 = -1.*t3158*t3211*t5420;
  t5438 = t5422 + t5435;
  t5457 = t3158*t3204*t5420;
  t5460 = -1.*t3179*t3211*t5420;
  t5482 = t5457 + t5460;
  t5445 = t3331*t5438;
  t5488 = t3293*t5482;
  t5491 = t5445 + t5488;
  t5520 = t3293*t5438;
  t5523 = -1.*t3331*t5482;
  t5531 = t5520 + t5523;
  t5237 = Sqrt(t5054);
  t5571 = -1.*t4381*t3158*t4400;
  t5577 = t4393*t3179;
  t5578 = t5571 + t5577;
  t5581 = t5578*t3211;
  t5582 = t4554 + t5581;
  t5586 = t3204*t5578;
  t5587 = -1.*t4551*t3211;
  t5589 = t5586 + t5587;
  t5602 = -1.*t3331*t5582;
  t5604 = t3293*t5589;
  t5605 = t5602 + t5604;
  t5585 = t3293*t5582;
  t5591 = t3331*t5589;
  t5597 = t5585 + t5591;
  t5627 = -1.*t4381*t3179*t4412;
  t5629 = -1.*t3158*t4888;
  t5636 = t5627 + t5629;
  t5639 = t3211*t5636;
  t5642 = t5639 + t4901;
  t5646 = t3204*t5636;
  t5648 = -1.*t3211*t4896;
  t5664 = t5646 + t5648;
  t5644 = -1.*t3331*t5642;
  t5666 = t3293*t5664;
  t5669 = t5644 + t5666;
  t5674 = t3293*t5642;
  t5683 = t3331*t5664;
  t5689 = t5674 + t5683;
  t5732 = -1.*t4381*t4384*t3179;
  t5733 = -1.*t3158*t4426;
  t5738 = t5732 + t5733;
  t5740 = t3211*t5738;
  t5744 = t5740 + t4447;
  t5758 = t3204*t5738;
  t5762 = -1.*t3211*t4445;
  t5765 = t5758 + t5762;
  t5749 = -1.*t3331*t5744;
  t5767 = t3293*t5765;
  t5771 = t5749 + t5767;
  t5775 = t3293*t5744;
  t5782 = t3331*t5765;
  t5785 = t5775 + t5782;
  t5958 = -1.*t4411*t4384;
  t5961 = -1.*t4393*t4400*t4412;
  t5964 = t5958 + t5961;
  t5969 = t3158*t5964;
  t5976 = t5627 + t5969;
  t5993 = -1.*t4381*t3158*t4412;
  t6001 = -1.*t3179*t5964;
  t6016 = t5993 + t6001;
  t5989 = -1.*t3211*t5976;
  t6021 = t3204*t6016;
  t6026 = t5989 + t6021;
  t6038 = t3204*t5976;
  t6041 = t3211*t6016;
  t6043 = t6038 + t6041;
  t6032 = t3331*t6026;
  t6045 = t3293*t6043;
  t6050 = t6032 + t6045;
  t6053 = t3293*t6026;
  t6054 = -1.*t3331*t6043;
  t6059 = t6053 + t6054;
  t6088 = -1.*t3204*t4431;
  t6095 = t6088 + t5762;
  t6096 = t3293*t6095;
  t6097 = t6096 + t4502;
  t6103 = t3331*t6095;
  t6111 = t3331*t4500;
  t6124 = t6103 + t6111;
  t6152 = -1.*t3204*t4575;
  t6159 = t6152 + t5587;
  t6168 = t3293*t6159;
  t6170 = t6168 + t4654;
  t6162 = t3331*t6159;
  t6164 = t3331*t4611;
  t6166 = t6162 + t6164;
  t6203 = -1.*t3204*t4891;
  t6208 = t6203 + t5648;
  t6210 = t3293*t6208;
  t6211 = t6210 + t4932;
  t6221 = t3331*t6208;
  t6227 = t3331*t4930;
  t6232 = t6221 + t6227;
  p_output1[0]=var2[3];
  p_output1[1]=var2[4];
  p_output1[2]=var2[7];
  p_output1[3]=0.5*t2203*(2.*t1316*t2183 + 2.*t1316*(t2553 + t2584 + t1189*t2617 + t1133*t2629 - 0.02159*(t1119*t2617 + t1078*t2629) - 1.11344*(t1078*t2617 - 1.*t1119*t2629) - 0.049*t641 - 1.*t540*t641 - 0.09*t95 - 1.*t751*t95))*var2[8] + 0.5*t2203*(2.*t2183*(t1008 + t1068 + t1722*t2843 + t1067*t2861 + t1189*t2878 + t1133*t2900 - 0.02159*(t1119*t2878 + t1078*t2900) - 1.11344*(t1078*t2878 - 1.*t1119*t2900) + t2836*t641 + t2806*t95) + 2.*t1316*(t2553 + t2584 + t1067*t2843 + t1007*t2861 + t1189*t3067 + t1133*t3077 - 0.02159*(t1119*t3067 + t1078*t3077) - 1.11344*(t1078*t3067 - 1.*t1119*t3077) - 1.*t2806*t641 + t2836*t95))*var2[9] + 0.5*t2203*(2.*t1316*(-1.11344*(-1.*t1078*t1164 - 1.*t1119*t1199) - 0.02159*t1218 + t1164*t2251 + t1199*t2268) + 2.*t2183*(-1.11344*(-1.*t1119*t1827 - 1.*t1078*t2074) - 0.02159*t2163 + t2074*t2251 + t1827*t2268))*var2[13];
  p_output1[4]=0.5*t3637*(2.*t3549*t3625 + 2.*t3549*(t3712 + t3717 + t3718 + t3725 + t3729 + t3738 + t3456*t3747 + t3492*t3770 - 0.02159*t3792 - 1.11344*t3806))*var2[16] + 0.5*t3637*(2.*t3625*(t3354 + t3375 + t3158*t3833 + t3179*t3857 + t3578*t3873 + t3370*t3897 + t3456*t3914 + t3492*t3919 - 0.02159*t3929 - 1.11344*t3940) + 2.*t3549*(t3729 + t3738 - 1.*t3179*t3833 + t3158*t3857 + t3370*t3873 + t3353*t3897 + t3456*t3968 + t3492*t3978 - 0.02159*t3996 - 1.11344*t4027))*var2[17] + 0.5*t3637*(2.*t3549*(-0.02159*t3518 + t3474*t3640 + t3405*t3652 - 1.11344*t3680) + 2.*t3625*(-0.02159*t3622 + t3602*t3640 + t3598*t3652 - 1.11344*t3695))*var2[21];
  p_output1[5]=(t3549*t4185*t4214 + t4208*t4214*(t3565 + t3568 + t3570 + t3572 - 1.*t3456*t3747 - 1.*t3492*t3770 + 0.02159*t3792 + 1.11344*t3806 + t4246 + t4256))*var2[16] + (t3549*(-1.*t3158*t3833 - 1.*t3179*t3857 - 1.*t3578*t3873 - 1.*t3370*t3897 - 1.*t3456*t3914 - 1.*t3492*t3919 + 0.02159*t3929 + 1.11344*t3940 + t4166 + t4168)*t4214 + t4208*t4214*(t3179*t3833 - 1.*t3158*t3857 - 1.*t3370*t3873 - 1.*t3353*t3897 - 1.*t3456*t3968 - 1.*t3492*t3978 + 0.02159*t3996 + 1.11344*t4027 + t4246 + t4256))*var2[17] + (t3549*(0.02159*t3622 - 1.*t3602*t3640 - 1.*t3598*t3652 + 1.11344*t3695)*t4214 + (0.02159*t3518 - 1.*t3474*t3640 - 1.*t3405*t3652 + 1.11344*t3680)*t4208*t4214)*var2[21];
  p_output1[6]=var2[14];
  p_output1[7]=var2[15];
  p_output1[8]=(Power(t4535,2)*t5030*t5061*t5084 + t5084*t5237*(-0.766044*(-1.*t3449*t6050 + t3421*t6059) - 0.642788*(t3421*t6050 + t3449*t6059)))*var2[4] + (0.5*t4535*(2.*t4686*(0.642788*(t3449*t4730 + t3421*t4740) + 0.766044*(t3421*t4730 - 1.*t3449*t4740)) + 2.*(0.766044*(-1.*t3449*t4833 + t3421*t4843) + 0.642788*(t3421*t4833 + t3449*t4843))*t5030)*t5061*t5084 + t5084*(-0.642788*(t3449*t5190 + t3421*t5207) - 0.766044*(t3421*t5190 - 1.*t3449*t5207))*t5237)*var2[14] + (0.5*t4535*t5061*t5084*(2.*t4686*(0.642788*(t3449*t5277 + t3421*t5281) + 0.766044*(t3421*t5277 - 1.*t3449*t5281)) + 2.*t5030*(0.766044*(-1.*t3449*t5357 + t3421*t5365) + 0.642788*(t3421*t5357 + t3449*t5365))) + t5084*t5237*(-0.766044*(-1.*t3449*t5491 + t3421*t5531) - 0.642788*(t3421*t5491 + t3449*t5531)))*var2[15] + (0.5*t4535*t5061*t5084*(2.*t4686*(0.766044*(-1.*t3449*t5597 + t3421*t5605) + 0.642788*(t3421*t5597 + t3449*t5605)) + 2.*t5030*(0.642788*(t3449*t5669 + t3421*t5689) + 0.766044*(t3421*t5669 - 1.*t3449*t5689))) + t5084*t5237*(-0.642788*(t3449*t5771 + t3421*t5785) - 0.766044*(t3421*t5771 - 1.*t3449*t5785)))*var2[16] + (t5084*t5237*(-0.642788*(t3449*t6097 + t3421*t6124) - 0.766044*(t3421*t6097 - 1.*t3449*t6124)) + 0.5*t4535*t5061*t5084*(2.*t4686*(0.766044*(-1.*t3449*t6166 + t3421*t6170) + 0.642788*(t3421*t6166 + t3449*t6170)) + 2.*t5030*(0.642788*(t3449*t6211 + t3421*t6232) + 0.766044*(t3421*t6211 - 1.*t3449*t6232))))*var2[17] + (0.5*t4535*(2.*(0.766044*(-1.*t3449*t4641 - 1.*t3421*t4655) + 0.642788*t4661)*t4686 + 2.*(0.766044*(-1.*t3421*t4933 - 1.*t3449*t4946) + 0.642788*t4967)*t5030)*t5061*t5084 + (-0.766044*(-1.*t3421*t4503 - 1.*t3449*t4513) - 0.642788*t4516)*t5084*t5237)*var2[21];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void dyaLeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




