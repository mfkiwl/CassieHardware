/*
 * Automatically Generated from Mathematica.
 * Mon 13 Sep 2021 16:09:03 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "p_com_LeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t2052;
  double t2055;
  double t2285;
  double t2448;
  double t2661;
  double t3531;
  double t3686;
  double t3780;
  double t3791;
  double t2799;
  double t3195;
  double t3465;
  double t4084;
  double t5980;
  double t6319;
  double t6505;
  double t6510;
  double t5721;
  double t5796;
  double t5979;
  double t6522;
  double t6532;
  double t6533;
  double t6806;
  double t6815;
  double t6957;
  double t6991;
  double t7296;
  double t7474;
  double t7668;
  double t8157;
  double t8240;
  double t8309;
  double t8443;
  double t8503;
  double t8639;
  double t8651;
  double t8665;
  double t8675;
  double t8694;
  double t8757;
  double t8766;
  double t8798;
  double t8872;
  double t8904;
  double t8909;
  double t9034;
  double t9066;
  double t9087;
  double t9118;
  double t9278;
  double t9282;
  double t9283;
  double t9294;
  double t9295;
  double t9299;
  double t9312;
  double t9406;
  double t9407;
  double t9408;
  double t9470;
  double t9492;
  double t9549;
  double t9677;
  double t9699;
  double t9689;
  double t9700;
  double t9705;
  double t9708;
  double t9852;
  double t9877;
  double t9908;
  double t9910;
  double t9718;
  double t9730;
  double t9749;
  double t9812;
  double t9821;
  double t9823;
  double t9909;
  double t9911;
  double t9913;
  double t9914;
  double t9917;
  double t9918;
  double t9919;
  double t9921;
  double t9954;
  double t9962;
  double t9963;
  double t10045;
  double t10052;
  double t10060;
  double t10091;
  double t9992;
  double t9998;
  double t10008;
  double t10071;
  double t10101;
  double t10107;
  double t10110;
  double t10142;
  double t10146;
  double t10148;
  double t10152;
  double t10154;
  double t10155;
  double t10158;
  double t10221;
  double t10224;
  double t10225;
  double t10252;
  double t10175;
  double t10179;
  double t10188;
  double t10226;
  double t10283;
  double t10312;
  double t10319;
  double t10320;
  double t10324;
  double t10330;
  double t10334;
  double t10355;
  double t10377;
  double t10378;
  double t10405;
  double t10427;
  double t10434;
  double t10447;
  double t10380;
  double t10385;
  double t10390;
  double t10440;
  double t10460;
  double t10467;
  double t10468;
  double t10470;
  double t10471;
  double t10487;
  double t10506;
  double t10511;
  double t10520;
  double t10525;
  double t10595;
  double t10596;
  double t10597;
  double t10603;
  double t10541;
  double t10552;
  double t10579;
  double t10751;
  double t10761;
  double t10767;
  double t10776;
  double t10598;
  double t10605;
  double t10612;
  double t10613;
  double t10645;
  double t10662;
  double t10663;
  double t10664;
  double t10801;
  double t10665;
  double t10666;
  double t10673;
  double t10770;
  double t10831;
  double t10704;
  double t10705;
  double t10712;
  double t10951;
  double t10954;
  double t10885;
  double t10969;
  double t10845;
  double t11024;
  double t10805;
  double t10960;
  double t10783;
  double t11090;
  double t11100;
  double t11110;
  double t11131;
  double t9676;
  double t2087;
  double t2175;
  double t11185;
  double t11189;
  double t3782;
  double t3805;
  double t3996;
  double t4134;
  double t4184;
  double t4190;
  double t4550;
  double t4762;
  double t4773;
  double t11222;
  double t11223;
  double t6507;
  double t6514;
  double t6519;
  double t6545;
  double t6546;
  double t6549;
  double t11241;
  double t11244;
  double t6960;
  double t7015;
  double t7210;
  double t7716;
  double t7795;
  double t7983;
  double t11258;
  double t11260;
  double t8643;
  double t8660;
  double t8662;
  double t8719;
  double t8732;
  double t8734;
  double t11295;
  double t11299;
  double t8990;
  double t9047;
  double t9054;
  double t9236;
  double t9245;
  double t9260;
  double t11332;
  double t11340;
  double t11341;
  double t11349;
  double t11308;
  double t11309;
  double t11348;
  double t11374;
  double t11395;
  double t11443;
  double t11458;
  double t11401;
  double t11478;
  double t11398;
  double t11496;
  double t11351;
  double t11468;
  double t11378;
  double t9303;
  double t9314;
  double t9351;
  double t9418;
  double t9432;
  double t9455;
  double t9582;
  double t9598;
  double t9623;
  double t9633;
  double t9637;
  double t9641;
  double t11627;
  double t11625;
  double t11626;
  double t11634;
  double t11637;
  double t11648;
  double t11658;
  double t11671;
  double t11681;
  double t11684;
  double t11689;
  double t11701;
  double t11702;
  double t11703;
  double t11707;
  double t11711;
  double t11714;
  double t11724;
  double t11725;
  double t11726;
  double t11728;
  double t11733;
  double t11737;
  double t11741;
  double t11742;
  double t11750;
  double t11758;
  double t11764;
  double t11775;
  double t11794;
  double t11801;
  double t11802;
  double t11806;
  double t11807;
  double t11808;
  double t11814;
  double t11815;
  double t11816;
  double t11832;
  double t11839;
  double t11843;
  double t11879;
  double t11888;
  double t11889;
  double t11890;
  double t11891;
  double t11895;
  double t11897;
  double t11898;
  double t11919;
  double t11925;
  double t11942;
  double t11950;
  double t11951;
  double t11954;
  double t11955;
  double t11957;
  double t11964;
  double t11976;
  double t11980;
  double t11985;
  double t11989;
  double t11992;
  double t11995;
  double t11996;
  double t12003;
  double t12005;
  double t12009;
  double t12011;
  double t12014;
  double t12016;
  double t12017;
  double t12020;
  double t12038;
  double t12042;
  double t12043;
  double t12044;
  double t12050;
  double t12054;
  double t12057;
  double t12068;
  double t10744;
  double t10768;
  double t10788;
  double t10793;
  double t10806;
  double t10807;
  double t10808;
  double t12092;
  double t12096;
  double t10825;
  double t10828;
  double t10854;
  double t10874;
  double t10898;
  double t10921;
  double t10929;
  double t12097;
  double t12100;
  double t12101;
  double t10949;
  double t10950;
  double t10952;
  double t10953;
  double t10955;
  double t10956;
  double t10958;
  double t12103;
  double t12107;
  double t12109;
  double t10961;
  double t10970;
  double t10978;
  double t10983;
  double t11028;
  double t11040;
  double t11044;
  double t11046;
  double t11052;
  double t11053;
  double t11055;
  double t11061;
  double t11122;
  double t11132;
  double t11134;
  double t11139;
  double t11145;
  double t11146;
  double t11883;
  double t12159;
  double t12160;
  double t11694;
  double t11695;
  double t11699;
  double t12171;
  double t12174;
  double t12187;
  double t12189;
  double t12204;
  double t12208;
  double t12221;
  double t12222;
  double t11324;
  double t11344;
  double t11360;
  double t11365;
  double t11384;
  double t11388;
  double t11391;
  double t12228;
  double t12229;
  double t11393;
  double t11394;
  double t11399;
  double t11400;
  double t11408;
  double t11420;
  double t11424;
  double t11432;
  double t11438;
  double t11451;
  double t11453;
  double t11463;
  double t11464;
  double t11466;
  double t11472;
  double t11481;
  double t11484;
  double t11485;
  double t11502;
  double t11512;
  double t11516;
  double t11523;
  double t11531;
  double t11532;
  double t11534;
  double t11537;
  double t11857;
  double t11858;
  double t11859;
  double t11864;
  double t11865;
  double t11866;
  double t12291;
  double t12292;
  double t12295;
  double t12298;
  double t12299;
  double t12300;
  double t12302;
  double t12303;
  double t12306;
  double t12316;
  double t12317;
  double t12318;
  double t12320;
  double t12321;
  double t12322;
  double t12324;
  double t12325;
  double t12326;
  double t12328;
  double t12329;
  double t12330;
  double t12332;
  double t12333;
  double t12334;
  double t12340;
  double t12341;
  double t12342;
  double t12348;
  double t12349;
  double t12350;
  double t12357;
  double t12359;
  double t12360;
  double t12363;
  double t12366;
  double t12367;
  double t12369;
  double t12370;
  double t12371;
  double t12386;
  double t12388;
  double t12389;
  double t12390;
  double t12391;
  double t12393;
  double t12395;
  double t12397;
  double t12404;
  double t12405;
  double t12407;
  double t12408;
  double t12409;
  double t12412;
  double t12413;
  double t12414;
  double t12418;
  double t12420;
  double t12421;
  double t12422;
  double t12423;
  double t12425;
  double t12427;
  double t12428;
  double t12433;
  double t12434;
  double t12435;
  double t12436;
  double t12437;
  double t12439;
  double t12443;
  double t12444;
  double t12451;
  double t12452;
  double t12453;
  double t12455;
  double t12457;
  double t12459;
  double t12460;
  double t12461;
  double t12468;
  double t12471;
  double t12472;
  double t12473;
  double t12474;
  double t12479;
  double t12480;
  double t12481;
  double t12387;
  double t12528;
  double t12529;
  double t12308;
  double t12310;
  double t12311;
  double t12539;
  double t12540;
  double t12548;
  double t12551;
  double t12559;
  double t12560;
  double t12568;
  double t12569;
  double t12575;
  double t12576;
  double t12373;
  double t12374;
  double t12375;
  double t12377;
  double t12378;
  double t12379;
  t2052 = Cos(var1[4]);
  t2055 = Cos(var1[6]);
  t2285 = Sin(var1[5]);
  t2448 = Sin(var1[4]);
  t2661 = Sin(var1[6]);
  t3531 = Cos(var1[7]);
  t3686 = -1.*t3531;
  t3780 = 1. + t3686;
  t3791 = Sin(var1[7]);
  t2799 = -1.*t2052*t2055*t2285;
  t3195 = t2448*t2661;
  t3465 = t2799 + t3195;
  t4084 = Cos(var1[5]);
  t5980 = Cos(var1[8]);
  t6319 = -1.*t5980;
  t6505 = 1. + t6319;
  t6510 = Sin(var1[8]);
  t5721 = t2052*t4084*t3531;
  t5796 = t3465*t3791;
  t5979 = t5721 + t5796;
  t6522 = t2055*t2448;
  t6532 = t2052*t2285*t2661;
  t6533 = t6522 + t6532;
  t6806 = Cos(var1[9]);
  t6815 = -1.*t6806;
  t6957 = 1. + t6815;
  t6991 = Sin(var1[9]);
  t7296 = t5980*t5979;
  t7474 = t6533*t6510;
  t7668 = t7296 + t7474;
  t8157 = t5980*t6533;
  t8240 = -1.*t5979*t6510;
  t8309 = t8157 + t8240;
  t8443 = Cos(var1[10]);
  t8503 = -1.*t8443;
  t8639 = 1. + t8503;
  t8651 = Sin(var1[10]);
  t8665 = -1.*t6991*t7668;
  t8675 = t6806*t8309;
  t8694 = t8665 + t8675;
  t8757 = t6806*t7668;
  t8766 = t6991*t8309;
  t8798 = t8757 + t8766;
  t8872 = Cos(var1[11]);
  t8904 = -1.*t8872;
  t8909 = 1. + t8904;
  t9034 = Sin(var1[11]);
  t9066 = t8651*t8694;
  t9087 = t8443*t8798;
  t9118 = t9066 + t9087;
  t9278 = t8443*t8694;
  t9282 = -1.*t8651*t8798;
  t9283 = t9278 + t9282;
  t9294 = Cos(var1[13]);
  t9295 = -1.*t9294;
  t9299 = 1. + t9295;
  t9312 = Sin(var1[13]);
  t9406 = -1.*t9034*t9118;
  t9407 = t8872*t9283;
  t9408 = t9406 + t9407;
  t9470 = t8872*t9118;
  t9492 = t9034*t9283;
  t9549 = t9470 + t9492;
  t9677 = Sin(var1[14]);
  t9699 = Cos(var1[14]);
  t9689 = 0.135*t9677*t2448;
  t9700 = -1.*t9699;
  t9705 = 1. + t9700;
  t9708 = 0.135*t9705*t2052*t2285;
  t9852 = Cos(var1[15]);
  t9877 = -1.*t9852;
  t9908 = 1. + t9877;
  t9910 = Sin(var1[15]);
  t9718 = t9677*t2448;
  t9730 = -1.*t9699*t2052*t2285;
  t9749 = t9718 + t9730;
  t9812 = t9699*t2448;
  t9821 = t2052*t9677*t2285;
  t9823 = t9812 + t9821;
  t9909 = -0.049*t9908;
  t9911 = -0.135*t9910;
  t9913 = t9909 + t9911;
  t9914 = t2052*t4084*t9913;
  t9917 = -0.135*t9908;
  t9918 = 0.049*t9910;
  t9919 = t9917 + t9918;
  t9921 = t9919*t9749;
  t9954 = -1.*t2052*t4084*t9910;
  t9962 = t9852*t9749;
  t9963 = t9954 + t9962;
  t10045 = Cos(var1[16]);
  t10052 = -1.*t10045;
  t10060 = 1. + t10052;
  t10091 = Sin(var1[16]);
  t9992 = t9852*t2052*t4084;
  t9998 = t9910*t9749;
  t10008 = t9992 + t9998;
  t10071 = -0.09*t10060;
  t10101 = 0.049*t10091;
  t10107 = t10071 + t10101;
  t10110 = t10107*t9823;
  t10142 = -0.049*t10060;
  t10146 = -0.09*t10091;
  t10148 = t10142 + t10146;
  t10152 = t10148*t10008;
  t10154 = t10091*t9823;
  t10155 = t10045*t10008;
  t10158 = t10154 + t10155;
  t10221 = Cos(var1[17]);
  t10224 = -1.*t10221;
  t10225 = 1. + t10224;
  t10252 = Sin(var1[17]);
  t10175 = t10045*t9823;
  t10179 = -1.*t10091*t10008;
  t10188 = t10175 + t10179;
  t10226 = -0.049*t10225;
  t10283 = -0.21*t10252;
  t10312 = t10226 + t10283;
  t10319 = t10312*t10158;
  t10320 = -0.21*t10225;
  t10324 = 0.049*t10252;
  t10330 = t10320 + t10324;
  t10334 = t10330*t10188;
  t10355 = -1.*t10252*t10158;
  t10377 = t10221*t10188;
  t10378 = t10355 + t10377;
  t10405 = Cos(var1[18]);
  t10427 = -1.*t10405;
  t10434 = 1. + t10427;
  t10447 = Sin(var1[18]);
  t10380 = t10221*t10158;
  t10385 = t10252*t10188;
  t10390 = t10380 + t10385;
  t10440 = -0.27068*t10434;
  t10460 = 0.00159*t10447;
  t10467 = t10440 + t10460;
  t10468 = t10467*t10378;
  t10470 = -0.00159*t10434;
  t10471 = -0.27068*t10447;
  t10487 = t10470 + t10471;
  t10506 = t10487*t10390;
  t10511 = t10447*t10378;
  t10520 = t10405*t10390;
  t10525 = t10511 + t10520;
  t10595 = Cos(var1[19]);
  t10596 = -1.*t10595;
  t10597 = 1. + t10596;
  t10603 = Sin(var1[19]);
  t10541 = t10405*t10378;
  t10552 = -1.*t10447*t10390;
  t10579 = t10541 + t10552;
  t10751 = Cos(var1[20]);
  t10761 = -1.*t10751;
  t10767 = 1. + t10761;
  t10776 = Sin(var1[20]);
  t10598 = 0.01841*t10597;
  t10605 = -0.70544*t10603;
  t10612 = t10598 + t10605;
  t10613 = t10612*t10525;
  t10645 = -0.70544*t10597;
  t10662 = -0.01841*t10603;
  t10663 = t10645 + t10662;
  t10664 = t10663*t10579;
  t10801 = 0.005481192614*t10767;
  t10665 = -1.*t10603*t10525;
  t10666 = t10595*t10579;
  t10673 = t10665 + t10666;
  t10770 = 0.07769774964800001*t10767;
  t10831 = -0.0004284921280000001*t10767;
  t10704 = t10595*t10525;
  t10705 = t10603*t10579;
  t10712 = t10704 + t10705;
  t10951 = 0.005498*t10776;
  t10954 = 0.996943*t10776;
  t10885 = -0.077936*t10776;
  t10969 = 0.0004284921280000001*t10767;
  t10845 = -0.996943*t10776;
  t11024 = -0.005481192614*t10767;
  t10805 = 0.077936*t10776;
  t10960 = -0.07769774964800001*t10767;
  t10783 = -0.005498*t10776;
  t11090 = Cos(var1[21]);
  t11100 = -1.*t11090;
  t11110 = 1. + t11100;
  t11131 = Sin(var1[21]);
  t9676 = -0.0233*t2052*t4084;
  t2087 = -1.*t2055;
  t2175 = 1. + t2087;
  t11185 = -0.135*t2052*t2175*t2285;
  t11189 = -0.135*t2448*t2661;
  t3782 = 0.135*t3780;
  t3805 = 0.049*t3791;
  t3996 = t3782 + t3805;
  t4134 = -0.049*t3780;
  t4184 = 0.135*t3791;
  t4190 = t4134 + t4184;
  t4550 = t3531*t3465;
  t4762 = -1.*t2052*t4084*t3791;
  t4773 = t4550 + t4762;
  t11222 = t3465*t3996;
  t11223 = t2052*t4084*t4190;
  t6507 = -0.049*t6505;
  t6514 = -0.09*t6510;
  t6519 = t6507 + t6514;
  t6545 = -0.09*t6505;
  t6546 = 0.049*t6510;
  t6549 = t6545 + t6546;
  t11241 = t5979*t6519;
  t11244 = t6533*t6549;
  t6960 = -0.049*t6957;
  t7015 = -0.21*t6991;
  t7210 = t6960 + t7015;
  t7716 = -0.21*t6957;
  t7795 = 0.049*t6991;
  t7983 = t7716 + t7795;
  t11258 = t7210*t7668;
  t11260 = t7983*t8309;
  t8643 = -0.27068*t8639;
  t8660 = 0.00159*t8651;
  t8662 = t8643 + t8660;
  t8719 = -0.00159*t8639;
  t8732 = -0.27068*t8651;
  t8734 = t8719 + t8732;
  t11295 = t8662*t8694;
  t11299 = t8734*t8798;
  t8990 = 0.01841*t8909;
  t9047 = -0.70544*t9034;
  t9054 = t8990 + t9047;
  t9236 = -0.70544*t8909;
  t9245 = -0.01841*t9034;
  t9260 = t9236 + t9245;
  t11332 = Cos(var1[12]);
  t11340 = -1.*t11332;
  t11341 = 1. + t11340;
  t11349 = Sin(var1[12]);
  t11308 = t9054*t9118;
  t11309 = t9260*t9283;
  t11348 = -0.005481192614*t11341;
  t11374 = -0.07769774964800001*t11341;
  t11395 = -0.0004284921280000001*t11341;
  t11443 = -0.005498*t11349;
  t11458 = 0.996943*t11349;
  t11401 = 0.077936*t11349;
  t11478 = 0.0004284921280000001*t11341;
  t11398 = -0.996943*t11349;
  t11496 = 0.005481192614*t11341;
  t11351 = -0.077936*t11349;
  t11468 = 0.07769774964800001*t11341;
  t11378 = 0.005498*t11349;
  t9303 = -1.11344*t9299;
  t9314 = 0.02159*t9312;
  t9351 = t9303 + t9314;
  t9418 = -0.02159*t9299;
  t9432 = -1.11344*t9312;
  t9455 = t9418 + t9432;
  t9582 = t9312*t9408;
  t9598 = t9294*t9549;
  t9623 = t9582 + t9598;
  t9633 = t9294*t9408;
  t9637 = -1.*t9312*t9549;
  t9641 = t9633 + t9637;
  t11627 = Sin(var1[3]);
  t11625 = Cos(var1[3]);
  t11626 = t11625*t4084;
  t11634 = -1.*t11627*t2448*t2285;
  t11637 = t11626 + t11634;
  t11648 = t2055*t11637;
  t11658 = -1.*t2052*t11627*t2661;
  t11671 = t11648 + t11658;
  t11681 = t4084*t11627*t2448;
  t11684 = t11625*t2285;
  t11689 = t11681 + t11684;
  t11701 = t3531*t11689;
  t11702 = t11671*t3791;
  t11703 = t11701 + t11702;
  t11707 = -1.*t2052*t2055*t11627;
  t11711 = -1.*t11637*t2661;
  t11714 = t11707 + t11711;
  t11724 = t5980*t11703;
  t11725 = t11714*t6510;
  t11726 = t11724 + t11725;
  t11728 = t5980*t11714;
  t11733 = -1.*t11703*t6510;
  t11737 = t11728 + t11733;
  t11741 = -1.*t6991*t11726;
  t11742 = t6806*t11737;
  t11750 = t11741 + t11742;
  t11758 = t6806*t11726;
  t11764 = t6991*t11737;
  t11775 = t11758 + t11764;
  t11794 = t8651*t11750;
  t11801 = t8443*t11775;
  t11802 = t11794 + t11801;
  t11806 = t8443*t11750;
  t11807 = -1.*t8651*t11775;
  t11808 = t11806 + t11807;
  t11814 = -1.*t9034*t11802;
  t11815 = t8872*t11808;
  t11816 = t11814 + t11815;
  t11832 = t8872*t11802;
  t11839 = t9034*t11808;
  t11843 = t11832 + t11839;
  t11879 = -0.135*t2052*t9677*t11627;
  t11888 = -0.135*t9705*t11637;
  t11889 = -1.*t2052*t9677*t11627;
  t11890 = t9699*t11637;
  t11891 = t11889 + t11890;
  t11895 = -1.*t9699*t2052*t11627;
  t11897 = -1.*t9677*t11637;
  t11898 = t11895 + t11897;
  t11919 = t9913*t11689;
  t11925 = t9919*t11891;
  t11942 = -1.*t9910*t11689;
  t11950 = t9852*t11891;
  t11951 = t11942 + t11950;
  t11954 = t9852*t11689;
  t11955 = t9910*t11891;
  t11957 = t11954 + t11955;
  t11964 = t10107*t11898;
  t11976 = t10148*t11957;
  t11980 = t10091*t11898;
  t11985 = t10045*t11957;
  t11989 = t11980 + t11985;
  t11992 = t10045*t11898;
  t11995 = -1.*t10091*t11957;
  t11996 = t11992 + t11995;
  t12003 = t10312*t11989;
  t12005 = t10330*t11996;
  t12009 = -1.*t10252*t11989;
  t12011 = t10221*t11996;
  t12014 = t12009 + t12011;
  t12016 = t10221*t11989;
  t12017 = t10252*t11996;
  t12020 = t12016 + t12017;
  t12038 = t10467*t12014;
  t12042 = t10487*t12020;
  t12043 = t10447*t12014;
  t12044 = t10405*t12020;
  t12050 = t12043 + t12044;
  t12054 = t10405*t12014;
  t12057 = -1.*t10447*t12020;
  t12068 = t12054 + t12057;
  t10744 = 2.1934241414728571e-7*var1[20];
  t10768 = -0.000033783761634830594*t10767;
  t10788 = t10770 + t10783;
  t10793 = -0.021877537552*t10788;
  t10806 = t10801 + t10805;
  t10807 = -0.6934341012630001*t10806;
  t10808 = t10744 + t10768 + t10793 + t10807;
  t12092 = t10612*t12050;
  t12096 = t10663*t12068;
  t10825 = -1.2096424700126054e-9*var1[20];
  t10828 = -0.6934128581485427*t10767;
  t10854 = t10831 + t10845;
  t10874 = -0.021877537552*t10854;
  t10898 = t10801 + t10885;
  t10921 = -0.005534467322*t10898;
  t10929 = t10825 + t10828 + t10874 + t10921;
  t12097 = -1.*t10603*t12050;
  t12100 = t10595*t12068;
  t12101 = t12097 + t12100;
  t10949 = -1.7147089040178687e-8*var1[20];
  t10950 = -0.021744644052735636*t10767;
  t10952 = t10770 + t10951;
  t10953 = -0.005534467322*t10952;
  t10955 = t10831 + t10954;
  t10956 = -0.6934341012630001*t10955;
  t10958 = t10949 + t10950 + t10953 + t10956;
  t12103 = t10595*t12050;
  t12107 = t10603*t12068;
  t12109 = t12103 + t12107;
  t10961 = t10960 + t10951;
  t10970 = t10969 + t10954;
  t10978 = -0.993925573253*t10767;
  t10983 = 1. + t10978;
  t11028 = t11024 + t10885;
  t11040 = -0.999969365345*t10767;
  t11044 = 1. + t11040;
  t11046 = t10969 + t10845;
  t11052 = -0.006104248100000001*t10767;
  t11053 = 1. + t11052;
  t11055 = t11024 + t10805;
  t11061 = t10960 + t10783;
  t11122 = -1.11344*t11110;
  t11132 = 0.02159*t11131;
  t11134 = t11122 + t11132;
  t11139 = -0.02159*t11110;
  t11145 = -1.11344*t11131;
  t11146 = t11139 + t11145;
  t11883 = -0.0233*t11689;
  t12159 = 0.135*t2175*t11637;
  t12160 = 0.135*t2052*t11627*t2661;
  t11694 = t3531*t11671;
  t11695 = -1.*t11689*t3791;
  t11699 = t11694 + t11695;
  t12171 = t11671*t3996;
  t12174 = t11689*t4190;
  t12187 = t11703*t6519;
  t12189 = t11714*t6549;
  t12204 = t7210*t11726;
  t12208 = t7983*t11737;
  t12221 = t8662*t11750;
  t12222 = t8734*t11775;
  t11324 = -2.1934241414728571e-7*var1[12];
  t11344 = 0.000033783761634830594*t11341;
  t11360 = t11348 + t11351;
  t11365 = -0.6934341012630001*t11360;
  t11384 = t11374 + t11378;
  t11388 = -0.021877537552*t11384;
  t11391 = t11324 + t11344 + t11365 + t11388;
  t12228 = t9054*t11802;
  t12229 = t9260*t11808;
  t11393 = -1.2096424700126054e-9*var1[12];
  t11394 = -0.6934128581485427*t11341;
  t11399 = t11395 + t11398;
  t11400 = -0.021877537552*t11399;
  t11408 = t11348 + t11401;
  t11420 = 0.005534467322*t11408;
  t11424 = t11393 + t11394 + t11400 + t11420;
  t11432 = -1.7147089040178687e-8*var1[12];
  t11438 = -0.021744644052735636*t11341;
  t11451 = t11374 + t11443;
  t11453 = 0.005534467322*t11451;
  t11463 = t11395 + t11458;
  t11464 = -0.6934341012630001*t11463;
  t11466 = t11432 + t11438 + t11453 + t11464;
  t11472 = t11468 + t11443;
  t11481 = t11478 + t11458;
  t11484 = -0.993925573253*t11341;
  t11485 = 1. + t11484;
  t11502 = t11496 + t11401;
  t11512 = -0.999969365345*t11341;
  t11516 = 1. + t11512;
  t11523 = t11478 + t11398;
  t11531 = -0.006104248100000001*t11341;
  t11532 = 1. + t11531;
  t11534 = t11496 + t11351;
  t11537 = t11468 + t11378;
  t11857 = t9312*t11816;
  t11858 = t9294*t11843;
  t11859 = t11857 + t11858;
  t11864 = t9294*t11816;
  t11865 = -1.*t9312*t11843;
  t11866 = t11864 + t11865;
  t12291 = t4084*t11627;
  t12292 = t11625*t2448*t2285;
  t12295 = t12291 + t12292;
  t12298 = t2055*t12295;
  t12299 = t11625*t2052*t2661;
  t12300 = t12298 + t12299;
  t12302 = -1.*t11625*t4084*t2448;
  t12303 = t11627*t2285;
  t12306 = t12302 + t12303;
  t12316 = t3531*t12306;
  t12317 = t12300*t3791;
  t12318 = t12316 + t12317;
  t12320 = t11625*t2052*t2055;
  t12321 = -1.*t12295*t2661;
  t12322 = t12320 + t12321;
  t12324 = t5980*t12318;
  t12325 = t12322*t6510;
  t12326 = t12324 + t12325;
  t12328 = t5980*t12322;
  t12329 = -1.*t12318*t6510;
  t12330 = t12328 + t12329;
  t12332 = -1.*t6991*t12326;
  t12333 = t6806*t12330;
  t12334 = t12332 + t12333;
  t12340 = t6806*t12326;
  t12341 = t6991*t12330;
  t12342 = t12340 + t12341;
  t12348 = t8651*t12334;
  t12349 = t8443*t12342;
  t12350 = t12348 + t12349;
  t12357 = t8443*t12334;
  t12359 = -1.*t8651*t12342;
  t12360 = t12357 + t12359;
  t12363 = -1.*t9034*t12350;
  t12366 = t8872*t12360;
  t12367 = t12363 + t12366;
  t12369 = t8872*t12350;
  t12370 = t9034*t12360;
  t12371 = t12369 + t12370;
  t12386 = 0.135*t11625*t2052*t9677;
  t12388 = -0.135*t9705*t12295;
  t12389 = t11625*t2052*t9677;
  t12390 = t9699*t12295;
  t12391 = t12389 + t12390;
  t12393 = t9699*t11625*t2052;
  t12395 = -1.*t9677*t12295;
  t12397 = t12393 + t12395;
  t12404 = t9913*t12306;
  t12405 = t9919*t12391;
  t12407 = -1.*t9910*t12306;
  t12408 = t9852*t12391;
  t12409 = t12407 + t12408;
  t12412 = t9852*t12306;
  t12413 = t9910*t12391;
  t12414 = t12412 + t12413;
  t12418 = t10107*t12397;
  t12420 = t10148*t12414;
  t12421 = t10091*t12397;
  t12422 = t10045*t12414;
  t12423 = t12421 + t12422;
  t12425 = t10045*t12397;
  t12427 = -1.*t10091*t12414;
  t12428 = t12425 + t12427;
  t12433 = t10312*t12423;
  t12434 = t10330*t12428;
  t12435 = -1.*t10252*t12423;
  t12436 = t10221*t12428;
  t12437 = t12435 + t12436;
  t12439 = t10221*t12423;
  t12443 = t10252*t12428;
  t12444 = t12439 + t12443;
  t12451 = t10467*t12437;
  t12452 = t10487*t12444;
  t12453 = t10447*t12437;
  t12455 = t10405*t12444;
  t12457 = t12453 + t12455;
  t12459 = t10405*t12437;
  t12460 = -1.*t10447*t12444;
  t12461 = t12459 + t12460;
  t12468 = t10612*t12457;
  t12471 = t10663*t12461;
  t12472 = -1.*t10603*t12457;
  t12473 = t10595*t12461;
  t12474 = t12472 + t12473;
  t12479 = t10595*t12457;
  t12480 = t10603*t12461;
  t12481 = t12479 + t12480;
  t12387 = -0.0233*t12306;
  t12528 = 0.135*t2175*t12295;
  t12529 = -0.135*t11625*t2052*t2661;
  t12308 = t3531*t12300;
  t12310 = -1.*t12306*t3791;
  t12311 = t12308 + t12310;
  t12539 = t12300*t3996;
  t12540 = t12306*t4190;
  t12548 = t12318*t6519;
  t12551 = t12322*t6549;
  t12559 = t7210*t12326;
  t12560 = t7983*t12330;
  t12568 = t8662*t12334;
  t12569 = t8734*t12342;
  t12575 = t9054*t12350;
  t12576 = t9260*t12360;
  t12373 = t9312*t12367;
  t12374 = t9294*t12371;
  t12375 = t12373 + t12374;
  t12377 = t9294*t12367;
  t12378 = -1.*t9312*t12371;
  t12379 = t12377 + t12378;
  p_output1[0]=0.135*t2052*t2175*t2285 + 0.135*t2448*t2661 - 1.*t3465*t3996 - 1.*t2052*t4084*t4190 - 0.1305*t4773 - 1.*t5979*t6519 - 1.*t6533*t6549 - 1.*t7210*t7668 - 1.*t7983*t8309 - 1.*t8662*t8694 - 1.*t8734*t8798 - 1.*t9054*t9118 - 1.*t9260*t9283 - 1.*t9351*t9408 - 1.*t9455*t9549 + 0.02159*t9623 + 1.11344*t9641 - 1.*var1[0] + 0.0288377642750394*(10.33*(-0.000346*t2052*t2285 + 0.02841*t2448 + 0.05066*t2052*t4084 + var1[0]) + 1.316608*(t11185 + t11189 + t11222 + t11223 + 0.135*t4773 - 0.049*t5979 - 0.0343*t6533 + var1[0]) + 5.79228*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + 0.17081*t4773 - 0.04895*t7668 - 0.14946*t8309 + var1[0]) + 1.03008*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + t11258 + t11260 + 0.132168*t4773 - 0.255862*t8694 - 0.007761*t8798 + var1[0]) + 0.763*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + t11258 + t11260 + t11295 + t11299 + 0.130288*t4773 - 0.000421*t9118 - 0.45406*t9283 + var1[0]) + 1.03*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + t11258 + t11260 + t11295 + t11299 + t11308 + t11309 + 0.127241*t4773 - 0.826587*t9408 - 0.004179*t9549 + var1[0]) + 0.126*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + t11258 + t11260 + t11295 + t11299 + t11308 + t11309 + t11391*t4773 + t11424*t9408 + t11466*t9549 + 0.01889*(t11472*t4773 + t11481*t9408 + t11485*t9549) - 0.617968*(t11502*t4773 + t11516*t9408 + t11523*t9549) + 0.126739*(t11532*t4773 + t11534*t9408 + t11537*t9549) + var1[0]) + 0.1498*(t11185 + t11189 + t11222 + t11223 + t11241 + t11244 + t11258 + t11260 + t11295 + t11299 + t11308 + t11309 + 0.13064*t4773 + t9351*t9408 + t9455*t9549 + 0.00589*t9623 - 1.11818*t9641 + var1[0]) + 1.965608*(t11185 + t11189 + 0.1351*t3465 + 0.01793*t6533 + t9676 + var1[0]) + 1.965608*(t9676 + t9689 + t9708 - 0.1351*t9749 + 0.01793*t9823 + var1[0]) + 5.79228*(t10110 + t10152 - 0.04895*t10158 - 0.14946*t10188 + t9689 + t9708 + t9914 + t9921 - 0.17081*t9963 + var1[0]) + 1.316608*(-0.049*t10008 + t9689 + t9708 - 0.0343*t9823 + t9914 + t9921 - 0.135*t9963 + var1[0]) + 1.03008*(t10110 + t10152 + t10319 + t10334 - 0.255862*t10378 - 0.007761*t10390 + t9689 + t9708 + t9914 + t9921 - 0.132168*t9963 + var1[0]) + 0.1498*(t10110 + t10152 + t10319 + t10334 + t10468 + t10506 + t10613 + t10664 + 0.00589*(t10712*t11090 + t10673*t11131) - 1.11818*(t10673*t11090 - 1.*t10712*t11131) + t10673*t11134 + t10712*t11146 + t9689 + t9708 + t9914 + t9921 - 0.13064*t9963 + var1[0]) + 0.763*(t10110 + t10152 + t10319 + t10334 + t10468 + t10506 - 0.000421*t10525 - 0.45406*t10579 + t9689 + t9708 + t9914 + t9921 - 0.130288*t9963 + var1[0]) + 1.03*(t10110 + t10152 + t10319 + t10334 + t10468 + t10506 + t10613 + t10664 - 0.826587*t10673 - 0.004179*t10712 + t9689 + t9708 + t9914 + t9921 - 0.127241*t9963 + var1[0]) + 0.126*(t10110 + t10152 + t10319 + t10334 + t10468 + t10506 + t10613 + t10664 + t10673*t10929 + t10712*t10958 + t9689 + t9708 + t9914 + t9921 + t10808*t9963 + 0.01889*(t10673*t10970 + t10712*t10983 + t10961*t9963) - 0.617968*(t10673*t11044 + t10712*t11046 + t11028*t9963) - 0.126739*(t10673*t11055 + t10712*t11061 + t11053*t9963) + var1[0]));
  p_output1[1]=-0.1305*t11699 + 0.02159*t11859 + 1.11344*t11866 - 0.135*t11637*t2175 - 0.135*t11627*t2052*t2661 - 1.*t11671*t3996 - 1.*t11689*t4190 - 1.*t11703*t6519 - 1.*t11714*t6549 - 1.*t11726*t7210 - 1.*t11737*t7983 - 1.*t11750*t8662 - 1.*t11775*t8734 - 1.*t11802*t9054 - 1.*t11808*t9260 - 1.*t11816*t9351 - 1.*t11843*t9455 - 1.*var1[1] + 0.0288377642750394*(1.965608*(t11879 + t11883 + t11888 - 0.1351*t11891 + 0.01793*t11898 + var1[1]) + 1.316608*(t11879 + t11888 - 0.0343*t11898 + t11919 + t11925 - 0.135*t11951 - 0.049*t11957 + var1[1]) + 5.79228*(t11879 + t11888 + t11919 + t11925 - 0.17081*t11951 + t11964 + t11976 - 0.04895*t11989 - 0.14946*t11996 + var1[1]) + 1.03008*(t11879 + t11888 + t11919 + t11925 - 0.132168*t11951 + t11964 + t11976 + t12003 + t12005 - 0.255862*t12014 - 0.007761*t12020 + var1[1]) + 0.763*(t11879 + t11888 + t11919 + t11925 - 0.130288*t11951 + t11964 + t11976 + t12003 + t12005 + t12038 + t12042 - 0.000421*t12050 - 0.45406*t12068 + var1[1]) + 1.03*(t11879 + t11888 + t11919 + t11925 - 0.127241*t11951 + t11964 + t11976 + t12003 + t12005 + t12038 + t12042 + t12092 + t12096 - 0.826587*t12101 - 0.004179*t12109 + var1[1]) + 0.126*(t11879 + t11888 + t11919 + t11925 + t10808*t11951 + t11964 + t11976 + t12003 + t12005 + t12038 + t12042 + t12092 + t12096 + t10929*t12101 + t10958*t12109 + 0.01889*(t10961*t11951 + t10970*t12101 + t10983*t12109) - 0.617968*(t11028*t11951 + t11044*t12101 + t11046*t12109) - 0.126739*(t11053*t11951 + t11055*t12101 + t11061*t12109) + var1[1]) + 0.1498*(t11879 + t11888 + t11919 + t11925 - 0.13064*t11951 + t11964 + t11976 + t12003 + t12005 + t12038 + t12042 + t12092 + t12096 + t11134*t12101 + t11146*t12109 + 0.00589*(t11131*t12101 + t11090*t12109) - 1.11818*(t11090*t12101 - 1.*t11131*t12109) + var1[1]) + 1.965608*(0.1351*t11671 + 0.01793*t11714 + t11883 + t12159 + t12160 + var1[1]) + 1.316608*(0.135*t11699 - 0.049*t11703 - 0.0343*t11714 + t12159 + t12160 + t12171 + t12174 + var1[1]) + 5.79228*(0.17081*t11699 - 0.04895*t11726 - 0.14946*t11737 + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + var1[1]) + 1.03008*(0.132168*t11699 - 0.255862*t11750 - 0.007761*t11775 + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + t12204 + t12208 + var1[1]) + 0.763*(0.130288*t11699 - 0.000421*t11802 - 0.45406*t11808 + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + t12204 + t12208 + t12221 + t12222 + var1[1]) + 1.03*(0.127241*t11699 - 0.826587*t11816 - 0.004179*t11843 + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + t12204 + t12208 + t12221 + t12222 + t12228 + t12229 + var1[1]) + 0.126*(t11391*t11699 + t11424*t11816 + t11466*t11843 + 0.01889*(t11472*t11699 + t11481*t11816 + t11485*t11843) - 0.617968*(t11502*t11699 + t11516*t11816 + t11523*t11843) + 0.126739*(t11532*t11699 + t11534*t11816 + t11537*t11843) + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + t12204 + t12208 + t12221 + t12222 + t12228 + t12229 + var1[1]) + 10.33*(0.000346*t11637 + 0.05066*t11689 - 0.02841*t11627*t2052 + var1[1]) + 0.1498*(0.13064*t11699 + 0.00589*t11859 - 1.11818*t11866 + t12159 + t12160 + t12171 + t12174 + t12187 + t12189 + t12204 + t12208 + t12221 + t12222 + t12228 + t12229 + t11816*t9351 + t11843*t9455 + var1[1]));
  p_output1[2]=-0.1305*t12311 + 0.02159*t12375 + 1.11344*t12379 - 0.135*t12295*t2175 + 0.135*t11625*t2052*t2661 - 1.*t12300*t3996 - 1.*t12306*t4190 - 1.*t12318*t6519 - 1.*t12322*t6549 - 1.*t12326*t7210 - 1.*t12330*t7983 - 1.*t12334*t8662 - 1.*t12342*t8734 - 1.*t12350*t9054 - 1.*t12360*t9260 - 1.*t12367*t9351 - 1.*t12371*t9455 - 1.*var1[2] + 0.0288377642750394*(1.965608*(t12386 + t12387 + t12388 - 0.1351*t12391 + 0.01793*t12397 + var1[2]) + 1.316608*(t12386 + t12388 - 0.0343*t12397 + t12404 + t12405 - 0.135*t12409 - 0.049*t12414 + var1[2]) + 5.79228*(t12386 + t12388 + t12404 + t12405 - 0.17081*t12409 + t12418 + t12420 - 0.04895*t12423 - 0.14946*t12428 + var1[2]) + 1.03008*(t12386 + t12388 + t12404 + t12405 - 0.132168*t12409 + t12418 + t12420 + t12433 + t12434 - 0.255862*t12437 - 0.007761*t12444 + var1[2]) + 0.763*(t12386 + t12388 + t12404 + t12405 - 0.130288*t12409 + t12418 + t12420 + t12433 + t12434 + t12451 + t12452 - 0.000421*t12457 - 0.45406*t12461 + var1[2]) + 1.03*(t12386 + t12388 + t12404 + t12405 - 0.127241*t12409 + t12418 + t12420 + t12433 + t12434 + t12451 + t12452 + t12468 + t12471 - 0.826587*t12474 - 0.004179*t12481 + var1[2]) + 0.126*(t12386 + t12388 + t12404 + t12405 + t10808*t12409 + t12418 + t12420 + t12433 + t12434 + t12451 + t12452 + t12468 + t12471 + t10929*t12474 + t10958*t12481 + 0.01889*(t10961*t12409 + t10970*t12474 + t10983*t12481) - 0.617968*(t11028*t12409 + t11044*t12474 + t11046*t12481) - 0.126739*(t11053*t12409 + t11055*t12474 + t11061*t12481) + var1[2]) + 0.1498*(t12386 + t12388 + t12404 + t12405 - 0.13064*t12409 + t12418 + t12420 + t12433 + t12434 + t12451 + t12452 + t12468 + t12471 + t11134*t12474 + t11146*t12481 + 0.00589*(t11131*t12474 + t11090*t12481) - 1.11818*(t11090*t12474 - 1.*t11131*t12481) + var1[2]) + 1.965608*(0.1351*t12300 + 0.01793*t12322 + t12387 + t12528 + t12529 + var1[2]) + 1.316608*(0.135*t12311 - 0.049*t12318 - 0.0343*t12322 + t12528 + t12529 + t12539 + t12540 + var1[2]) + 5.79228*(0.17081*t12311 - 0.04895*t12326 - 0.14946*t12330 + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + var1[2]) + 1.03008*(0.132168*t12311 - 0.255862*t12334 - 0.007761*t12342 + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + t12559 + t12560 + var1[2]) + 0.763*(0.130288*t12311 - 0.000421*t12350 - 0.45406*t12360 + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + t12559 + t12560 + t12568 + t12569 + var1[2]) + 1.03*(0.127241*t12311 - 0.826587*t12367 - 0.004179*t12371 + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + t12559 + t12560 + t12568 + t12569 + t12575 + t12576 + var1[2]) + 0.126*(t11391*t12311 + t11424*t12367 + t11466*t12371 + 0.01889*(t11472*t12311 + t11481*t12367 + t11485*t12371) - 0.617968*(t11502*t12311 + t11516*t12367 + t11523*t12371) + 0.126739*(t11532*t12311 + t11534*t12367 + t11537*t12371) + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + t12559 + t12560 + t12568 + t12569 + t12575 + t12576 + var1[2]) + 10.33*(0.000346*t12295 + 0.05066*t12306 + 0.02841*t11625*t2052 + var1[2]) + 0.1498*(0.13064*t12311 + 0.00589*t12375 - 1.11818*t12379 + t12528 + t12529 + t12539 + t12540 + t12548 + t12551 + t12559 + t12560 + t12568 + t12569 + t12575 + t12576 + t12367*t9351 + t12371*t9455 + var1[2]));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void p_com_LeftStance_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




