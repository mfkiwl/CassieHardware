/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:18:49 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_achilles_constraint.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t968;
  double t552;
  double t734;
  double t1062;
  double t1113;
  double t1116;
  double t1127;
  double t1136;
  double t1148;
  double t933;
  double t1098;
  double t1106;
  double t1203;
  double t1206;
  double t1207;
  double t1220;
  double t1228;
  double t1240;
  double t1251;
  double t1245;
  double t1246;
  double t1248;
  double t1252;
  double t2465;
  double t1249;
  double t2598;
  double t2733;
  double t2734;
  double t1117;
  double t2756;
  double t2759;
  double t1214;
  double t1218;
  double t2771;
  double t2775;
  double t2776;
  double t1255;
  double t2783;
  double t2784;
  double t1344;
  double t1379;
  double t1419;
  double t2788;
  double t2789;
  double t1589;
  double t1767;
  double t1801;
  double t2392;
  double t2410;
  double t2469;
  double t2483;
  double t2508;
  double t2511;
  double t2514;
  double t2530;
  double t2551;
  double t2555;
  double t2571;
  double t2580;
  double t2588;
  double t2589;
  double t2594;
  double t2601;
  double t2603;
  double t2643;
  double t2666;
  double t2668;
  double t2690;
  double t1115;
  double t1119;
  double t1123;
  double t1152;
  double t1177;
  double t1182;
  double t1202;
  double t1241;
  double t1264;
  double t1283;
  double t1319;
  double t1472;
  double t1824;
  double t1887;
  double t2155;
  double t2552;
  double t2665;
  double t2674;
  double t2712;
  double t2718;
  double t2726;
  double t2727;
  double t2736;
  double t2740;
  double t2747;
  double t2752;
  double t2753;
  double t2754;
  double t2760;
  double t2769;
  double t2777;
  double t2779;
  double t2780;
  double t2838;
  double t2839;
  double t2840;
  double t2848;
  double t2851;
  double t2853;
  double t2855;
  double t2856;
  double t2857;
  double t2957;
  double t2960;
  double t3016;
  double t3018;
  double t2830;
  double t2831;
  double t2936;
  double t2945;
  double t2946;
  double t2953;
  double t2955;
  double t2956;
  double t2962;
  double t2965;
  double t2966;
  double t2968;
  double t2969;
  double t2970;
  double t2973;
  double t2974;
  double t2977;
  double t2978;
  double t2982;
  double t2993;
  double t3003;
  double t3100;
  double t3101;
  double t3102;
  double t2770;
  double t2781;
  double t2785;
  double t2795;
  double t2797;
  double t2799;
  double t2801;
  double t2803;
  double t2804;
  double t2807;
  double t2809;
  double t2810;
  double t2813;
  double t2814;
  double t2819;
  double t2820;
  double t2729;
  double t2732;
  double t2751;
  double t2755;
  double t2826;
  double t3385;
  double t3389;
  double t3391;
  double t3397;
  double t3411;
  double t3412;
  double t3414;
  double t3419;
  double t2832;
  double t2834;
  double t2835;
  double t2836;
  double t2844;
  double t2847;
  double t2854;
  double t2858;
  double t2859;
  double t2863;
  double t2864;
  double t2865;
  double t2867;
  double t2868;
  double t2869;
  double t2872;
  double t2873;
  double t2876;
  double t2879;
  double t2883;
  double t2884;
  double t2912;
  double t3008;
  double t3081;
  double t3090;
  double t3533;
  double t3648;
  double t3751;
  double t3526;
  double t3527;
  double t3543;
  double t3800;
  double t3833;
  double t3852;
  double t3877;
  double t3881;
  double t3964;
  double t3993;
  double t3998;
  double t4007;
  double t4011;
  double t4020;
  double t4027;
  double t4035;
  double t4510;
  double t4829;
  double t4509;
  double t5140;
  double t4214;
  double t4242;
  double t4318;
  double t4320;
  double t4325;
  double t4329;
  double t4340;
  double t4351;
  double t4353;
  double t4355;
  double t4362;
  double t4392;
  double t4485;
  double t4506;
  double t4513;
  double t4554;
  double t4558;
  double t4563;
  double t4570;
  double t4665;
  double t4780;
  double t4812;
  double t4813;
  double t4938;
  double t4939;
  double t4943;
  double t5068;
  double t5114;
  double t5151;
  double t5163;
  double t5190;
  double t5202;
  double t5224;
  double t5270;
  double t5324;
  double t5436;
  double t5439;
  double t5473;
  double t5476;
  double t2909;
  double t3437;
  double t3464;
  double t3495;
  double t3012;
  double t3013;
  double t3025;
  double t3026;
  double t3033;
  double t3034;
  double t3037;
  double t3040;
  double t3044;
  double t3047;
  double t3050;
  double t3052;
  double t3068;
  double t3070;
  double t3071;
  double t3073;
  double t3078;
  double t3092;
  double t3093;
  double t3104;
  double t3109;
  double t3114;
  double t3117;
  double t3121;
  double t3134;
  double t3140;
  double t3145;
  double t3146;
  double t3190;
  double t3228;
  double t3249;
  double t3266;
  double t3317;
  double t3373;
  double t3379;
  double t3420;
  double t3428;
  double t3514;
  double t3518;
  double t3521;
  double t4039;
  double t4045;
  double t4048;
  double t9228;
  double t9240;
  double t9252;
  double t5557;
  double t5592;
  double t5593;
  double t5705;
  double t5744;
  double t5745;
  double t5748;
  double t5754;
  double t5777;
  double t5792;
  double t5799;
  double t5810;
  double t5832;
  double t5862;
  double t5909;
  double t5991;
  double t6032;
  double t6155;
  double t6256;
  double t6410;
  double t6440;
  double t6447;
  double t6455;
  double t6484;
  double t6485;
  double t6509;
  double t6554;
  double t7930;
  double t8301;
  double t8309;
  double t8520;
  double t8521;
  double t9762;
  double t9676;
  double t9687;
  double t9730;
  double t10027;
  double t8901;
  double t8928;
  double t9178;
  double t2827;
  double t3080;
  double t3381;
  double t10408;
  double t10415;
  double t10417;
  double t10418;
  double t10427;
  double t10428;
  double t10445;
  double t10447;
  double t10453;
  double t10466;
  double t10470;
  double t10473;
  double t10480;
  double t10489;
  double t10492;
  double t10535;
  double t10536;
  double t10546;
  double t10576;
  double t10579;
  double t10582;
  double t10588;
  double t10589;
  double t10590;
  double t10591;
  double t10601;
  double t10604;
  double t10611;
  double t10615;
  double t10618;
  double t10642;
  double t10651;
  double t10657;
  double t10675;
  double t10686;
  double t10776;
  double t10733;
  double t10749;
  double t10768;
  double t10779;
  double t10805;
  double t10811;
  double t10822;
  double t10842;
  double t10870;
  double t10889;
  double t10896;
  double t10917;
  double t10927;
  double t10947;
  double t10948;
  double t10949;
  double t10983;
  double t11003;
  double t11011;
  double t11017;
  double t11021;
  double t9500;
  double t9555;
  double t9586;
  double t5531;
  double t6028;
  double t8561;
  double t11650;
  double t11618;
  double t11620;
  double t11651;
  double t11662;
  double t11682;
  double t11699;
  double t11700;
  double t11704;
  double t11631;
  double t11658;
  double t11661;
  double t11717;
  double t11720;
  double t11723;
  double t11733;
  double t11736;
  double t11737;
  double t11760;
  double t11762;
  double t11745;
  double t11748;
  double t11755;
  double t11771;
  double t11756;
  double t11840;
  double t11886;
  double t11887;
  double t11686;
  double t11926;
  double t11927;
  double t11724;
  double t11729;
  double t11937;
  double t11938;
  double t11941;
  double t11764;
  double t11964;
  double t11968;
  double t11768;
  double t11769;
  double t11778;
  double t11779;
  double t11782;
  double t11783;
  double t11784;
  double t11787;
  double t11791;
  double t11972;
  double t11974;
  double t11800;
  double t11801;
  double t11802;
  double t11809;
  double t11816;
  double t11818;
  double t11828;
  double t11833;
  double t11834;
  double t11836;
  double t11837;
  double t11838;
  double t11844;
  double t11850;
  double t11854;
  double t11858;
  double t11861;
  double t11865;
  double t11663;
  double t11689;
  double t11690;
  double t11705;
  double t11706;
  double t11711;
  double t11713;
  double t11744;
  double t11765;
  double t11766;
  double t11767;
  double t11794;
  double t11804;
  double t11822;
  double t11823;
  double t11826;
  double t11857;
  double t11862;
  double t11866;
  double t11869;
  double t11870;
  double t11872;
  double t11901;
  double t11905;
  double t11908;
  double t11915;
  double t11918;
  double t11923;
  double t11929;
  double t11930;
  double t11942;
  double t11952;
  double t11956;
  double t12021;
  double t12030;
  double t12034;
  double t12045;
  double t12047;
  double t12049;
  double t12053;
  double t12054;
  double t12056;
  double t12106;
  double t12107;
  double t12160;
  double t12163;
  double t12001;
  double t12003;
  double t12093;
  double t12094;
  double t12097;
  double t12102;
  double t12103;
  double t12104;
  double t12110;
  double t12111;
  double t12112;
  double t12115;
  double t12122;
  double t12123;
  double t12125;
  double t12135;
  double t12137;
  double t12140;
  double t12145;
  double t12149;
  double t12150;
  double t12205;
  double t12206;
  double t12208;
  double t11931;
  double t11958;
  double t11970;
  double t11975;
  double t11976;
  double t11979;
  double t11980;
  double t11981;
  double t11982;
  double t11986;
  double t11989;
  double t11990;
  double t11991;
  double t11993;
  double t11994;
  double t11995;
  double t11876;
  double t11881;
  double t11909;
  double t11925;
  double t11996;
  double t12235;
  double t12236;
  double t12237;
  double t12239;
  double t12240;
  double t12241;
  double t12242;
  double t12245;
  double t12004;
  double t12007;
  double t12013;
  double t12014;
  double t12036;
  double t12042;
  double t12051;
  double t12059;
  double t12060;
  double t12063;
  double t12064;
  double t12067;
  double t12068;
  double t12069;
  double t12070;
  double t12076;
  double t12080;
  double t12081;
  double t12083;
  double t12085;
  double t12086;
  double t12090;
  double t12154;
  double t12194;
  double t12197;
  double t12260;
  double t12262;
  double t12266;
  double t12258;
  double t12259;
  double t12261;
  double t12267;
  double t12269;
  double t12270;
  double t12271;
  double t12272;
  double t12274;
  double t12275;
  double t12276;
  double t12278;
  double t12279;
  double t12281;
  double t12282;
  double t12283;
  double t12343;
  double t12363;
  double t12342;
  double t12375;
  double t12325;
  double t12326;
  double t12331;
  double t12333;
  double t12335;
  double t12336;
  double t12337;
  double t12339;
  double t12340;
  double t12341;
  double t12346;
  double t12347;
  double t12349;
  double t12350;
  double t12354;
  double t12355;
  double t12356;
  double t12358;
  double t12362;
  double t12365;
  double t12366;
  double t12367;
  double t12368;
  double t12370;
  double t12371;
  double t12372;
  double t12373;
  double t12374;
  double t12376;
  double t12377;
  double t12378;
  double t12379;
  double t12380;
  double t12381;
  double t12382;
  double t12383;
  double t12384;
  double t12385;
  double t12387;
  double t12088;
  double t12250;
  double t12252;
  double t12253;
  double t12157;
  double t12159;
  double t12164;
  double t12165;
  double t12166;
  double t12169;
  double t12170;
  double t12172;
  double t12173;
  double t12176;
  double t12178;
  double t12179;
  double t12180;
  double t12185;
  double t12188;
  double t12189;
  double t12190;
  double t12198;
  double t12200;
  double t12209;
  double t12212;
  double t12214;
  double t12215;
  double t12216;
  double t12220;
  double t12222;
  double t12223;
  double t12224;
  double t12226;
  double t12227;
  double t12228;
  double t12229;
  double t12230;
  double t12231;
  double t12232;
  double t12247;
  double t12249;
  double t12254;
  double t12255;
  double t12257;
  double t12293;
  double t12296;
  double t12297;
  double t12454;
  double t12456;
  double t12457;
  double t12389;
  double t12390;
  double t12391;
  double t12392;
  double t12393;
  double t12394;
  double t12397;
  double t12398;
  double t12399;
  double t12400;
  double t12401;
  double t12402;
  double t12403;
  double t12404;
  double t12405;
  double t12406;
  double t12410;
  double t12411;
  double t12412;
  double t12413;
  double t12414;
  double t12415;
  double t12416;
  double t12421;
  double t12422;
  double t12424;
  double t12426;
  double t12428;
  double t12429;
  double t12430;
  double t12431;
  double t12435;
  double t12498;
  double t12493;
  double t12494;
  double t12495;
  double t12532;
  double t12442;
  double t12443;
  double t12444;
  double t12000;
  double t12193;
  double t12233;
  double t12565;
  double t12567;
  double t12575;
  double t12577;
  double t12578;
  double t12579;
  double t12582;
  double t12583;
  double t12584;
  double t12586;
  double t12588;
  double t12589;
  double t12591;
  double t12592;
  double t12593;
  double t12596;
  double t12597;
  double t12600;
  double t12602;
  double t12606;
  double t12607;
  double t12609;
  double t12610;
  double t12611;
  double t12613;
  double t12617;
  double t12619;
  double t12620;
  double t12624;
  double t12625;
  double t12629;
  double t12630;
  double t12634;
  double t12636;
  double t12637;
  double t12659;
  double t12649;
  double t12650;
  double t12658;
  double t12660;
  double t12662;
  double t12663;
  double t12664;
  double t12667;
  double t12668;
  double t12670;
  double t12671;
  double t12673;
  double t12674;
  double t12679;
  double t12680;
  double t12681;
  double t12682;
  double t12683;
  double t12684;
  double t12685;
  double t12688;
  double t12481;
  double t12483;
  double t12486;
  double t12388;
  double t12407;
  double t12436;
  t968 = Cos(var1[9]);
  t552 = Cos(var1[10]);
  t734 = Sin(var1[9]);
  t1062 = Sin(var1[10]);
  t1113 = Cos(var1[11]);
  t1116 = Sin(var1[11]);
  t1127 = t968*t552;
  t1136 = -1.*t734*t1062;
  t1148 = t1127 + t1136;
  t933 = -1.*t552*t734;
  t1098 = -1.*t968*t1062;
  t1106 = t933 + t1098;
  t1203 = Cos(var1[12]);
  t1206 = -1.*t1203;
  t1207 = 1. + t1206;
  t1220 = -1.*t1113*t1148;
  t1228 = -1.*t1106*t1116;
  t1240 = t1220 + t1228;
  t1251 = Sin(var1[12]);
  t1245 = t1113*t1106;
  t1246 = -1.*t1148*t1116;
  t1248 = t1245 + t1246;
  t1252 = -0.996943*t1251;
  t2465 = -0.0004284921280000001*t1207;
  t1249 = 0.0004284921280000001*t1207;
  t2598 = 0.996943*t1251;
  t2733 = -1.*t552;
  t2734 = 1. + t2733;
  t1117 = -0.70544*t1116;
  t2756 = -1.*t1113;
  t2759 = 1. + t2756;
  t1214 = -0.999969365345*t1207;
  t1218 = 1. + t1214;
  t2771 = -1.*t968*t552;
  t2775 = t734*t1062;
  t2776 = t2771 + t2775;
  t1255 = t1249 + t1252;
  t2783 = t1113*t2776;
  t2784 = t2783 + t1228;
  t1344 = 0.005481192614*t1207;
  t1379 = -0.077936*t1251;
  t1419 = t1344 + t1379;
  t2788 = t2776*t1116;
  t2789 = t1245 + t2788;
  t1589 = 0.07769774964800001*t1207;
  t1767 = 0.005498*t1251;
  t1801 = t1589 + t1767;
  t2392 = -1.2096424700126054e-9*var1[12];
  t2410 = -0.6934128581485427*t1207;
  t2469 = t2465 + t1252;
  t2483 = -0.021877537552*t2469;
  t2508 = -0.005481192614*t1207;
  t2511 = 0.077936*t1251;
  t2514 = t2508 + t2511;
  t2530 = 0.005534467322*t2514;
  t2551 = t2392 + t2410 + t2483 + t2530;
  t2555 = -1.7147089040178687e-8*var1[12];
  t2571 = -0.021744644052735636*t1207;
  t2580 = -0.07769774964800001*t1207;
  t2588 = -0.005498*t1251;
  t2589 = t2580 + t2588;
  t2594 = 0.005534467322*t2589;
  t2601 = t2465 + t2598;
  t2603 = -0.6934341012630001*t2601;
  t2643 = t2555 + t2571 + t2594 + t2603;
  t2666 = -0.993925573253*t1207;
  t2668 = 1. + t2666;
  t2690 = t1249 + t2598;
  t1115 = -0.01841*t1113;
  t1119 = t1115 + t1117;
  t1123 = -1.*t1106*t1119;
  t1152 = -0.70544*t1113;
  t1177 = 0.01841*t1116;
  t1182 = t1152 + t1177;
  t1202 = -1.*t1148*t1182;
  t1241 = t1218*t1240;
  t1264 = t1248*t1255;
  t1283 = t1241 + t1264;
  t1319 = 0.588518*t1283;
  t1472 = t1240*t1419;
  t1824 = t1248*t1801;
  t1887 = t1472 + t1824;
  t2155 = -0.124503*t1887;
  t2552 = -1.*t1240*t2551;
  t2665 = -1.*t1248*t2643;
  t2674 = t2668*t1248;
  t2712 = t1240*t2690;
  t2718 = t2674 + t2712;
  t2726 = -0.045407*t2718;
  t2727 = t1123 + t1202 + t1319 + t2155 + t2552 + t2665 + t2726;
  t2736 = -0.00159*t2734;
  t2740 = -0.27068*t1062;
  t2747 = t2736 + t2740;
  t2752 = -0.27068*t2734;
  t2753 = 0.00159*t1062;
  t2754 = t2752 + t2753;
  t2760 = 0.01841*t2759;
  t2769 = t2760 + t1117;
  t2777 = -0.70544*t2759;
  t2779 = -0.01841*t1116;
  t2780 = t2777 + t2779;
  t2838 = t552*t734;
  t2839 = t968*t1062;
  t2840 = t2838 + t2839;
  t2848 = t1113*t1148;
  t2851 = -1.*t2840*t1116;
  t2853 = t2848 + t2851;
  t2855 = t1113*t2840;
  t2856 = t1148*t1116;
  t2857 = t2855 + t2856;
  t2957 = t1106*t1116;
  t2960 = t2848 + t2957;
  t3016 = -1.*t1113*t2840;
  t3018 = t3016 + t1246;
  t2830 = -1.*t968;
  t2831 = 1. + t2830;
  t2936 = 0.21*t734;
  t2945 = -1.*t968*t2747;
  t2946 = t734*t2754;
  t2953 = -1.*t1148*t2769;
  t2955 = -1.*t1106*t2780;
  t2956 = t1218*t1248;
  t2962 = t2960*t1255;
  t2965 = t2956 + t2962;
  t2966 = 0.588518*t2965;
  t2968 = t1248*t1419;
  t2969 = t2960*t1801;
  t2970 = t2968 + t2969;
  t2973 = -0.124503*t2970;
  t2974 = -1.*t1248*t2551;
  t2977 = -1.*t2960*t2643;
  t2978 = t2668*t2960;
  t2982 = t1248*t2690;
  t2993 = t2978 + t2982;
  t3003 = -0.045407*t2993;
  t3100 = -1.*t1113*t1106;
  t3101 = -1.*t2776*t1116;
  t3102 = t3100 + t3101;
  t2770 = -1.*t1106*t2769;
  t2781 = -1.*t2776*t2780;
  t2785 = t1218*t2784;
  t2795 = t2789*t1255;
  t2797 = t2785 + t2795;
  t2799 = 0.588518*t2797;
  t2801 = t2784*t1419;
  t2803 = t2789*t1801;
  t2804 = t2801 + t2803;
  t2807 = -0.124503*t2804;
  t2809 = -1.*t2784*t2551;
  t2810 = -1.*t2789*t2643;
  t2813 = t2668*t2789;
  t2814 = t2784*t2690;
  t2819 = t2813 + t2814;
  t2820 = -0.045407*t2819;
  t2729 = 0.21*t968;
  t2732 = 0.049*t734;
  t2751 = t734*t2747;
  t2755 = t968*t2754;
  t2826 = t2729 + t2732 + t2751 + t2755 + t2770 + t2781 + t2799 + t2807 + t2809 + t2810 + t2820;
  t3385 = 0.00159*t552;
  t3389 = t3385 + t2740;
  t3391 = t734*t3389;
  t3397 = -0.27068*t552;
  t3411 = -0.00159*t1062;
  t3412 = t3397 + t3411;
  t3414 = -1.*t968*t3412;
  t3419 = t3391 + t3414 + t2770 + t2781 + t2799 + t2807 + t2809 + t2810 + t2820;
  t2832 = 0.21*t2831;
  t2834 = -0.049*t734;
  t2835 = -1.*t734*t2747;
  t2836 = -1.*t968*t2754;
  t2844 = -1.*t2840*t2769;
  t2847 = -1.*t1148*t2780;
  t2854 = t1218*t2853;
  t2858 = t2857*t1255;
  t2859 = t2854 + t2858;
  t2863 = 0.588518*t2859;
  t2864 = t2853*t1419;
  t2865 = t2857*t1801;
  t2867 = t2864 + t2865;
  t2868 = -0.124503*t2867;
  t2869 = -1.*t2853*t2551;
  t2872 = -1.*t2857*t2643;
  t2873 = t2668*t2857;
  t2876 = t2853*t2690;
  t2879 = t2873 + t2876;
  t2883 = -0.045407*t2879;
  t2884 = -0.09 + t2832 + t2834 + t2835 + t2836 + t2844 + t2847 + t2863 + t2868 + t2869 + t2872 + t2883;
  t2912 = -0.049*t968;
  t3008 = t2912 + t2936 + t2945 + t2946 + t2953 + t2955 + t2966 + t2973 + t2974 + t2977 + t3003;
  t3081 = 0.049*t2831;
  t3090 = -0.049 + t3081 + t2936 + t2945 + t2946 + t2953 + t2955 + t2966 + t2973 + t2974 + t2977 + t3003;
  t3533 = t2855 + t3101;
  t3648 = t2840*t1116;
  t3751 = t2783 + t3648;
  t3526 = -1.*t2776*t2769;
  t3527 = -1.*t2840*t2780;
  t3543 = t1218*t3533;
  t3800 = t3751*t1255;
  t3833 = t3543 + t3800;
  t3852 = 0.588518*t3833;
  t3877 = t3533*t1419;
  t3881 = t3751*t1801;
  t3964 = t3877 + t3881;
  t3993 = -0.124503*t3964;
  t3998 = -1.*t3533*t2551;
  t4007 = -1.*t3751*t2643;
  t4011 = t2668*t3751;
  t4020 = t3533*t2690;
  t4027 = t4011 + t4020;
  t4035 = -0.045407*t4027;
  t4510 = -0.0004284921280000001*t1251;
  t4829 = 0.996943*t1203;
  t4509 = -0.996943*t1203;
  t5140 = 0.0004284921280000001*t1251;
  t4214 = -0.077936*t1203;
  t4242 = 0.005481192614*t1251;
  t4318 = t4214 + t4242;
  t4320 = t1248*t4318;
  t4325 = 0.005498*t1203;
  t4329 = 0.07769774964800001*t1251;
  t4340 = t4325 + t4329;
  t4351 = t2960*t4340;
  t4353 = t4320 + t4351;
  t4355 = -0.124503*t4353;
  t4362 = 0.077936*t1203;
  t4392 = -0.005481192614*t1251;
  t4485 = t4362 + t4392;
  t4506 = 0.005534467322*t4485;
  t4513 = t4509 + t4510;
  t4554 = -0.021877537552*t4513;
  t4558 = -0.6934128581485427*t1251;
  t4563 = -1.2096424700126054e-9 + t4506 + t4554 + t4558;
  t4570 = -1.*t1248*t4563;
  t4665 = -0.005498*t1203;
  t4780 = -0.07769774964800001*t1251;
  t4812 = t4665 + t4780;
  t4813 = 0.005534467322*t4812;
  t4938 = t4829 + t4510;
  t4939 = -0.6934341012630001*t4938;
  t4943 = -0.021744644052735636*t1251;
  t5068 = -1.7147089040178687e-8 + t4813 + t4939 + t4943;
  t5114 = -1.*t2960*t5068;
  t5151 = t4829 + t5140;
  t5163 = t1248*t5151;
  t5190 = -0.993925573253*t2960*t1251;
  t5202 = t5163 + t5190;
  t5224 = -0.045407*t5202;
  t5270 = t4509 + t5140;
  t5324 = t2960*t5270;
  t5436 = -0.999969365345*t1248*t1251;
  t5439 = t5324 + t5436;
  t5473 = 0.588518*t5439;
  t5476 = t4355 + t4570 + t5114 + t5224 + t5473;
  t2909 = 2.*t2727*t2884;
  t3437 = -1.*t968*t3389;
  t3464 = -1.*t734*t3412;
  t3495 = t3437 + t3464 + t2953 + t2955 + t2966 + t2973 + t2974 + t2977 + t3003;
  t3012 = -1.*t1148*t1119;
  t3013 = -1.*t2840*t1182;
  t3025 = t1218*t3018;
  t3026 = t2853*t1255;
  t3033 = t3025 + t3026;
  t3034 = 0.588518*t3033;
  t3037 = t3018*t1419;
  t3040 = t2853*t1801;
  t3044 = t3037 + t3040;
  t3047 = -0.124503*t3044;
  t3050 = -1.*t3018*t2551;
  t3052 = -1.*t2853*t2643;
  t3068 = t2668*t2853;
  t3070 = t3018*t2690;
  t3071 = t3068 + t3070;
  t3073 = -0.045407*t3071;
  t3078 = t3012 + t3013 + t3034 + t3047 + t3050 + t3052 + t3073;
  t3092 = -1.*t2776*t1119;
  t3093 = -1.*t1106*t1182;
  t3104 = t1218*t3102;
  t3109 = t2784*t1255;
  t3114 = t3104 + t3109;
  t3117 = 0.588518*t3114;
  t3121 = t3102*t1419;
  t3134 = t2784*t1801;
  t3140 = t3121 + t3134;
  t3145 = -0.124503*t3140;
  t3146 = -1.*t3102*t2551;
  t3190 = -1.*t2784*t2643;
  t3228 = t2668*t2784;
  t3249 = t3102*t2690;
  t3266 = t3228 + t3249;
  t3317 = -0.045407*t3266;
  t3373 = t3092 + t3093 + t3117 + t3145 + t3146 + t3190 + t3317;
  t3379 = 2.*t3090*t3373;
  t3420 = 2.*t3419*t2826;
  t3428 = 2.*t3419*t2884;
  t3514 = 2.*t3495*t3008;
  t3518 = t968*t3389;
  t3521 = t734*t3412;
  t4039 = t3518 + t3521 + t3526 + t3527 + t3852 + t3993 + t3998 + t4007 + t4035;
  t4045 = 2.*t3090*t4039;
  t4048 = t3420 + t3428 + t3514 + t4045;
  t9228 = -0.00159*t552;
  t9240 = 0.27068*t1062;
  t9252 = t9228 + t9240;
  t5557 = 2.*t2884*t5476;
  t5592 = t2853*t4318;
  t5593 = t2857*t4340;
  t5705 = t5592 + t5593;
  t5744 = -0.124503*t5705;
  t5745 = -1.*t2853*t4563;
  t5748 = -1.*t2857*t5068;
  t5754 = t2857*t5270;
  t5777 = -0.999969365345*t2853*t1251;
  t5792 = t5754 + t5777;
  t5799 = 0.588518*t5792;
  t5810 = t2853*t5151;
  t5832 = -0.993925573253*t2857*t1251;
  t5862 = t5810 + t5832;
  t5909 = -0.045407*t5862;
  t5991 = t5744 + t5745 + t5748 + t5799 + t5909;
  t6032 = t2784*t4318;
  t6155 = t2789*t4340;
  t6256 = t6032 + t6155;
  t6410 = -0.124503*t6256;
  t6440 = -1.*t2784*t4563;
  t6447 = -1.*t2789*t5068;
  t6455 = t2789*t5270;
  t6484 = -0.999969365345*t2784*t1251;
  t6485 = t6455 + t6484;
  t6509 = 0.588518*t6485;
  t6554 = t2784*t5151;
  t7930 = -0.993925573253*t2789*t1251;
  t8301 = t6554 + t7930;
  t8309 = -0.045407*t8301;
  t8520 = t6410 + t6440 + t6447 + t6509 + t8309;
  t8521 = 2.*t3090*t8520;
  t9762 = t1220 + t3648;
  t9676 = 0.01841*t1113;
  t9687 = 0.70544*t1116;
  t9730 = t9676 + t9687;
  t10027 = t3100 + t2856;
  t8901 = 2.*t2727*t3419;
  t8928 = 2.*t3495*t3078;
  t9178 = t8901 + t2909 + t8928 + t3379;
  t2827 = 2.*t2727*t2826;
  t3080 = 2.*t3008*t3078;
  t3381 = t2827 + t2909 + t3080 + t3379;
  t10408 = 2.*t2727*t5476;
  t10415 = t1240*t4318;
  t10417 = t1248*t4340;
  t10418 = t10415 + t10417;
  t10427 = -0.124503*t10418;
  t10428 = -1.*t1240*t4563;
  t10445 = -1.*t1248*t5068;
  t10447 = t1248*t5270;
  t10453 = -0.999969365345*t1240*t1251;
  t10466 = t10447 + t10453;
  t10470 = 0.588518*t10466;
  t10473 = t1240*t5151;
  t10480 = -0.993925573253*t1248*t1251;
  t10489 = t10473 + t10480;
  t10492 = -0.045407*t10489;
  t10535 = t10427 + t10428 + t10445 + t10470 + t10492;
  t10536 = 2.*t3090*t10535;
  t10546 = t3018*t4318;
  t10576 = t2853*t4340;
  t10579 = t10546 + t10576;
  t10582 = -0.124503*t10579;
  t10588 = -1.*t3018*t4563;
  t10589 = -1.*t2853*t5068;
  t10590 = t3018*t5151;
  t10591 = -0.993925573253*t2853*t1251;
  t10601 = t10590 + t10591;
  t10604 = -0.045407*t10601;
  t10611 = t2853*t5270;
  t10615 = -0.999969365345*t3018*t1251;
  t10618 = t10611 + t10615;
  t10642 = 0.588518*t10618;
  t10651 = t10582 + t10588 + t10589 + t10604 + t10642;
  t10657 = 2.*t2884*t10651;
  t10675 = 2.*t3078*t5991;
  t10686 = t10408 + t10536 + t10657 + t10675;
  t10776 = -0.0004284921280000001*t1203;
  t10733 = 0.0004284921280000001*t1203;
  t10749 = t10733 + t1252;
  t10768 = -0.021744644052735636*t1203;
  t10779 = t10776 + t1252;
  t10805 = -0.6934341012630001*t10779;
  t10811 = -0.07769774964800001*t1203;
  t10822 = t10811 + t1767;
  t10842 = 0.005534467322*t10822;
  t10870 = t10768 + t10805 + t10842;
  t10889 = 0.07769774964800001*t1203;
  t10896 = t10889 + t2588;
  t10917 = 0.005481192614*t1203;
  t10927 = t10917 + t2511;
  t10947 = -0.6934128581485427*t1203;
  t10948 = -0.005481192614*t1203;
  t10949 = t10948 + t1379;
  t10983 = 0.005534467322*t10949;
  t11003 = t10776 + t2598;
  t11011 = -0.021877537552*t11003;
  t11017 = t10947 + t10983 + t11011;
  t11021 = t10733 + t2598;
  t9500 = 2.*t3419*t5476;
  t9555 = 2.*t3495*t5991;
  t9586 = t9500 + t5557 + t9555 + t8521;
  t5531 = 2.*t2826*t5476;
  t6028 = 2.*t3008*t5991;
  t8561 = t5531 + t5557 + t6028 + t8521;
  t11650 = Cos(var1[17]);
  t11618 = Cos(var1[18]);
  t11620 = Sin(var1[17]);
  t11651 = Sin(var1[18]);
  t11662 = Cos(var1[19]);
  t11682 = Sin(var1[19]);
  t11699 = t11650*t11618;
  t11700 = -1.*t11620*t11651;
  t11704 = t11699 + t11700;
  t11631 = -1.*t11618*t11620;
  t11658 = -1.*t11650*t11651;
  t11661 = t11631 + t11658;
  t11717 = Cos(var1[20]);
  t11720 = -1.*t11717;
  t11723 = 1. + t11720;
  t11733 = -1.*t11662*t11704;
  t11736 = -1.*t11661*t11682;
  t11737 = t11733 + t11736;
  t11760 = Sin(var1[20]);
  t11762 = -0.996943*t11760;
  t11745 = t11662*t11661;
  t11748 = -1.*t11704*t11682;
  t11755 = t11745 + t11748;
  t11771 = -0.0004284921280000001*t11723;
  t11756 = 0.0004284921280000001*t11723;
  t11840 = 0.996943*t11760;
  t11886 = -1.*t11618;
  t11887 = 1. + t11886;
  t11686 = -0.70544*t11682;
  t11926 = -1.*t11662;
  t11927 = 1. + t11926;
  t11724 = -0.999969365345*t11723;
  t11729 = 1. + t11724;
  t11937 = -1.*t11650*t11618;
  t11938 = t11620*t11651;
  t11941 = t11937 + t11938;
  t11764 = t11756 + t11762;
  t11964 = t11662*t11941;
  t11968 = t11964 + t11736;
  t11768 = -1.2096424700126054e-9*var1[20];
  t11769 = -0.6934128581485427*t11723;
  t11778 = t11771 + t11762;
  t11779 = -0.021877537552*t11778;
  t11782 = 0.005481192614*t11723;
  t11783 = -0.077936*t11760;
  t11784 = t11782 + t11783;
  t11787 = -0.005534467322*t11784;
  t11791 = t11768 + t11769 + t11779 + t11787;
  t11972 = t11941*t11682;
  t11974 = t11745 + t11972;
  t11800 = -0.07769774964800001*t11723;
  t11801 = -0.005498*t11760;
  t11802 = t11800 + t11801;
  t11809 = -0.005481192614*t11723;
  t11816 = 0.077936*t11760;
  t11818 = t11809 + t11816;
  t11828 = -1.7147089040178687e-8*var1[20];
  t11833 = -0.021744644052735636*t11723;
  t11834 = 0.07769774964800001*t11723;
  t11836 = 0.005498*t11760;
  t11837 = t11834 + t11836;
  t11838 = -0.005534467322*t11837;
  t11844 = t11771 + t11840;
  t11850 = -0.6934341012630001*t11844;
  t11854 = t11828 + t11833 + t11838 + t11850;
  t11858 = -0.993925573253*t11723;
  t11861 = 1. + t11858;
  t11865 = t11756 + t11840;
  t11663 = -0.01841*t11662;
  t11689 = t11663 + t11686;
  t11690 = -1.*t11661*t11689;
  t11705 = -0.70544*t11662;
  t11706 = 0.01841*t11682;
  t11711 = t11705 + t11706;
  t11713 = -1.*t11704*t11711;
  t11744 = t11729*t11737;
  t11765 = t11755*t11764;
  t11766 = t11744 + t11765;
  t11767 = 0.588518*t11766;
  t11794 = -1.*t11737*t11791;
  t11804 = t11755*t11802;
  t11822 = t11737*t11818;
  t11823 = t11804 + t11822;
  t11826 = 0.124503*t11823;
  t11857 = -1.*t11755*t11854;
  t11862 = t11861*t11755;
  t11866 = t11737*t11865;
  t11869 = t11862 + t11866;
  t11870 = -0.045407*t11869;
  t11872 = t11690 + t11713 + t11767 + t11794 + t11826 + t11857 + t11870;
  t11901 = -0.00159*t11887;
  t11905 = -0.27068*t11651;
  t11908 = t11901 + t11905;
  t11915 = -0.27068*t11887;
  t11918 = 0.00159*t11651;
  t11923 = t11915 + t11918;
  t11929 = 0.01841*t11927;
  t11930 = t11929 + t11686;
  t11942 = -0.70544*t11927;
  t11952 = -0.01841*t11682;
  t11956 = t11942 + t11952;
  t12021 = t11618*t11620;
  t12030 = t11650*t11651;
  t12034 = t12021 + t12030;
  t12045 = t11662*t11704;
  t12047 = -1.*t12034*t11682;
  t12049 = t12045 + t12047;
  t12053 = t11662*t12034;
  t12054 = t11704*t11682;
  t12056 = t12053 + t12054;
  t12106 = t11661*t11682;
  t12107 = t12045 + t12106;
  t12160 = -1.*t11662*t12034;
  t12163 = t12160 + t11748;
  t12001 = -1.*t11650;
  t12003 = 1. + t12001;
  t12093 = 0.21*t11620;
  t12094 = -1.*t11650*t11908;
  t12097 = t11620*t11923;
  t12102 = -1.*t11704*t11930;
  t12103 = -1.*t11661*t11956;
  t12104 = t11729*t11755;
  t12110 = t12107*t11764;
  t12111 = t12104 + t12110;
  t12112 = 0.588518*t12111;
  t12115 = -1.*t11755*t11791;
  t12122 = t12107*t11802;
  t12123 = t11755*t11818;
  t12125 = t12122 + t12123;
  t12135 = 0.124503*t12125;
  t12137 = -1.*t12107*t11854;
  t12140 = t11861*t12107;
  t12145 = t11755*t11865;
  t12149 = t12140 + t12145;
  t12150 = -0.045407*t12149;
  t12205 = -1.*t11662*t11661;
  t12206 = -1.*t11941*t11682;
  t12208 = t12205 + t12206;
  t11931 = -1.*t11661*t11930;
  t11958 = -1.*t11941*t11956;
  t11970 = t11729*t11968;
  t11975 = t11974*t11764;
  t11976 = t11970 + t11975;
  t11979 = 0.588518*t11976;
  t11980 = -1.*t11968*t11791;
  t11981 = t11974*t11802;
  t11982 = t11968*t11818;
  t11986 = t11981 + t11982;
  t11989 = 0.124503*t11986;
  t11990 = -1.*t11974*t11854;
  t11991 = t11861*t11974;
  t11993 = t11968*t11865;
  t11994 = t11991 + t11993;
  t11995 = -0.045407*t11994;
  t11876 = 0.21*t11650;
  t11881 = 0.049*t11620;
  t11909 = t11620*t11908;
  t11925 = t11650*t11923;
  t11996 = t11876 + t11881 + t11909 + t11925 + t11931 + t11958 + t11979 + t11980 + t11989 + t11990 + t11995;
  t12235 = 0.00159*t11618;
  t12236 = t12235 + t11905;
  t12237 = t11620*t12236;
  t12239 = -0.27068*t11618;
  t12240 = -0.00159*t11651;
  t12241 = t12239 + t12240;
  t12242 = -1.*t11650*t12241;
  t12245 = t12237 + t12242 + t11931 + t11958 + t11979 + t11980 + t11989 + t11990 + t11995;
  t12004 = 0.21*t12003;
  t12007 = -0.049*t11620;
  t12013 = -1.*t11620*t11908;
  t12014 = -1.*t11650*t11923;
  t12036 = -1.*t12034*t11930;
  t12042 = -1.*t11704*t11956;
  t12051 = t11729*t12049;
  t12059 = t12056*t11764;
  t12060 = t12051 + t12059;
  t12063 = 0.588518*t12060;
  t12064 = -1.*t12049*t11791;
  t12067 = t12056*t11802;
  t12068 = t12049*t11818;
  t12069 = t12067 + t12068;
  t12070 = 0.124503*t12069;
  t12076 = -1.*t12056*t11854;
  t12080 = t11861*t12056;
  t12081 = t12049*t11865;
  t12083 = t12080 + t12081;
  t12085 = -0.045407*t12083;
  t12086 = -0.09 + t12004 + t12007 + t12013 + t12014 + t12036 + t12042 + t12063 + t12064 + t12070 + t12076 + t12085;
  t12090 = -0.049*t11650;
  t12154 = t12090 + t12093 + t12094 + t12097 + t12102 + t12103 + t12112 + t12115 + t12135 + t12137 + t12150;
  t12194 = 0.049*t12003;
  t12197 = -0.049 + t12194 + t12093 + t12094 + t12097 + t12102 + t12103 + t12112 + t12115 + t12135 + t12137 + t12150;
  t12260 = t12053 + t12206;
  t12262 = t12034*t11682;
  t12266 = t11964 + t12262;
  t12258 = -1.*t11941*t11930;
  t12259 = -1.*t12034*t11956;
  t12261 = t11729*t12260;
  t12267 = t12266*t11764;
  t12269 = t12261 + t12267;
  t12270 = 0.588518*t12269;
  t12271 = -1.*t12260*t11791;
  t12272 = t12266*t11802;
  t12274 = t12260*t11818;
  t12275 = t12272 + t12274;
  t12276 = 0.124503*t12275;
  t12278 = -1.*t12266*t11854;
  t12279 = t11861*t12266;
  t12281 = t12260*t11865;
  t12282 = t12279 + t12281;
  t12283 = -0.045407*t12282;
  t12343 = -0.0004284921280000001*t11760;
  t12363 = 0.996943*t11717;
  t12342 = -0.996943*t11717;
  t12375 = 0.0004284921280000001*t11760;
  t12325 = -0.005498*t11717;
  t12326 = -0.07769774964800001*t11760;
  t12331 = t12325 + t12326;
  t12333 = t12107*t12331;
  t12335 = 0.077936*t11717;
  t12336 = -0.005481192614*t11760;
  t12337 = t12335 + t12336;
  t12339 = t11755*t12337;
  t12340 = t12333 + t12339;
  t12341 = 0.124503*t12340;
  t12346 = t12342 + t12343;
  t12347 = -0.021877537552*t12346;
  t12349 = -0.077936*t11717;
  t12350 = 0.005481192614*t11760;
  t12354 = t12349 + t12350;
  t12355 = -0.005534467322*t12354;
  t12356 = -0.6934128581485427*t11760;
  t12358 = -1.2096424700126054e-9 + t12347 + t12355 + t12356;
  t12362 = -1.*t11755*t12358;
  t12365 = t12363 + t12343;
  t12366 = -0.6934341012630001*t12365;
  t12367 = 0.005498*t11717;
  t12368 = 0.07769774964800001*t11760;
  t12370 = t12367 + t12368;
  t12371 = -0.005534467322*t12370;
  t12372 = -0.021744644052735636*t11760;
  t12373 = -1.7147089040178687e-8 + t12366 + t12371 + t12372;
  t12374 = -1.*t12107*t12373;
  t12376 = t12363 + t12375;
  t12377 = t11755*t12376;
  t12378 = -0.993925573253*t12107*t11760;
  t12379 = t12377 + t12378;
  t12380 = -0.045407*t12379;
  t12381 = t12342 + t12375;
  t12382 = t12107*t12381;
  t12383 = -0.999969365345*t11755*t11760;
  t12384 = t12382 + t12383;
  t12385 = 0.588518*t12384;
  t12387 = t12341 + t12362 + t12374 + t12380 + t12385;
  t12088 = 2.*t11872*t12086;
  t12250 = -1.*t11650*t12236;
  t12252 = -1.*t11620*t12241;
  t12253 = t12250 + t12252 + t12102 + t12103 + t12112 + t12115 + t12135 + t12137 + t12150;
  t12157 = -1.*t11704*t11689;
  t12159 = -1.*t12034*t11711;
  t12164 = t11729*t12163;
  t12165 = t12049*t11764;
  t12166 = t12164 + t12165;
  t12169 = 0.588518*t12166;
  t12170 = -1.*t12163*t11791;
  t12172 = t12049*t11802;
  t12173 = t12163*t11818;
  t12176 = t12172 + t12173;
  t12178 = 0.124503*t12176;
  t12179 = -1.*t12049*t11854;
  t12180 = t11861*t12049;
  t12185 = t12163*t11865;
  t12188 = t12180 + t12185;
  t12189 = -0.045407*t12188;
  t12190 = t12157 + t12159 + t12169 + t12170 + t12178 + t12179 + t12189;
  t12198 = -1.*t11941*t11689;
  t12200 = -1.*t11661*t11711;
  t12209 = t11729*t12208;
  t12212 = t11968*t11764;
  t12214 = t12209 + t12212;
  t12215 = 0.588518*t12214;
  t12216 = -1.*t12208*t11791;
  t12220 = t11968*t11802;
  t12222 = t12208*t11818;
  t12223 = t12220 + t12222;
  t12224 = 0.124503*t12223;
  t12226 = -1.*t11968*t11854;
  t12227 = t11861*t11968;
  t12228 = t12208*t11865;
  t12229 = t12227 + t12228;
  t12230 = -0.045407*t12229;
  t12231 = t12198 + t12200 + t12215 + t12216 + t12224 + t12226 + t12230;
  t12232 = 2.*t12197*t12231;
  t12247 = 2.*t12245*t11996;
  t12249 = 2.*t12245*t12086;
  t12254 = 2.*t12253*t12154;
  t12255 = t11650*t12236;
  t12257 = t11620*t12241;
  t12293 = t12255 + t12257 + t12258 + t12259 + t12270 + t12271 + t12276 + t12278 + t12283;
  t12296 = 2.*t12197*t12293;
  t12297 = t12247 + t12249 + t12254 + t12296;
  t12454 = -0.00159*t11618;
  t12456 = 0.27068*t11651;
  t12457 = t12454 + t12456;
  t12389 = 2.*t12086*t12387;
  t12390 = t12056*t12331;
  t12391 = t12049*t12337;
  t12392 = t12390 + t12391;
  t12393 = 0.124503*t12392;
  t12394 = -1.*t12049*t12358;
  t12397 = -1.*t12056*t12373;
  t12398 = t12056*t12381;
  t12399 = -0.999969365345*t12049*t11760;
  t12400 = t12398 + t12399;
  t12401 = 0.588518*t12400;
  t12402 = t12049*t12376;
  t12403 = -0.993925573253*t12056*t11760;
  t12404 = t12402 + t12403;
  t12405 = -0.045407*t12404;
  t12406 = t12393 + t12394 + t12397 + t12401 + t12405;
  t12410 = t11974*t12331;
  t12411 = t11968*t12337;
  t12412 = t12410 + t12411;
  t12413 = 0.124503*t12412;
  t12414 = -1.*t11968*t12358;
  t12415 = -1.*t11974*t12373;
  t12416 = t11974*t12381;
  t12421 = -0.999969365345*t11968*t11760;
  t12422 = t12416 + t12421;
  t12424 = 0.588518*t12422;
  t12426 = t11968*t12376;
  t12428 = -0.993925573253*t11974*t11760;
  t12429 = t12426 + t12428;
  t12430 = -0.045407*t12429;
  t12431 = t12413 + t12414 + t12415 + t12424 + t12430;
  t12435 = 2.*t12197*t12431;
  t12498 = t11733 + t12262;
  t12493 = 0.01841*t11662;
  t12494 = 0.70544*t11682;
  t12495 = t12493 + t12494;
  t12532 = t12205 + t12054;
  t12442 = 2.*t11872*t12245;
  t12443 = 2.*t12253*t12190;
  t12444 = t12442 + t12088 + t12443 + t12232;
  t12000 = 2.*t11872*t11996;
  t12193 = 2.*t12154*t12190;
  t12233 = t12000 + t12088 + t12193 + t12232;
  t12565 = 2.*t11872*t12387;
  t12567 = t11755*t12331;
  t12575 = t11737*t12337;
  t12577 = t12567 + t12575;
  t12578 = 0.124503*t12577;
  t12579 = -1.*t11737*t12358;
  t12582 = -1.*t11755*t12373;
  t12583 = t11755*t12381;
  t12584 = -0.999969365345*t11737*t11760;
  t12586 = t12583 + t12584;
  t12588 = 0.588518*t12586;
  t12589 = t11737*t12376;
  t12591 = -0.993925573253*t11755*t11760;
  t12592 = t12589 + t12591;
  t12593 = -0.045407*t12592;
  t12596 = t12578 + t12579 + t12582 + t12588 + t12593;
  t12597 = 2.*t12197*t12596;
  t12600 = t12049*t12331;
  t12602 = t12163*t12337;
  t12606 = t12600 + t12602;
  t12607 = 0.124503*t12606;
  t12609 = -1.*t12163*t12358;
  t12610 = -1.*t12049*t12373;
  t12611 = t12163*t12376;
  t12613 = -0.993925573253*t12049*t11760;
  t12617 = t12611 + t12613;
  t12619 = -0.045407*t12617;
  t12620 = t12049*t12381;
  t12624 = -0.999969365345*t12163*t11760;
  t12625 = t12620 + t12624;
  t12629 = 0.588518*t12625;
  t12630 = t12607 + t12609 + t12610 + t12619 + t12629;
  t12634 = 2.*t12086*t12630;
  t12636 = 2.*t12190*t12406;
  t12637 = t12565 + t12597 + t12634 + t12636;
  t12659 = -0.0004284921280000001*t11717;
  t12649 = 0.0004284921280000001*t11717;
  t12650 = t12649 + t11762;
  t12658 = -0.021744644052735636*t11717;
  t12660 = t12659 + t11762;
  t12662 = -0.6934341012630001*t12660;
  t12663 = 0.07769774964800001*t11717;
  t12664 = t12663 + t11801;
  t12667 = -0.005534467322*t12664;
  t12668 = t12658 + t12662 + t12667;
  t12670 = -0.005481192614*t11717;
  t12671 = t12670 + t11783;
  t12673 = -0.07769774964800001*t11717;
  t12674 = t12673 + t11836;
  t12679 = -0.6934128581485427*t11717;
  t12680 = 0.005481192614*t11717;
  t12681 = t12680 + t11816;
  t12682 = -0.005534467322*t12681;
  t12683 = t12659 + t11840;
  t12684 = -0.021877537552*t12683;
  t12685 = t12679 + t12682 + t12684;
  t12688 = t12649 + t11840;
  t12481 = 2.*t12245*t12387;
  t12483 = 2.*t12253*t12406;
  t12486 = t12481 + t12389 + t12483 + t12435;
  t12388 = 2.*t11996*t12387;
  t12407 = 2.*t12154*t12406;
  t12436 = t12388 + t12389 + t12407 + t12435;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=(2.*Power(t2826,2) + 2.*t2826*t2884 + 2.*Power(t3008,2) + 2.*t3090*(t3526 + t3527 + t3852 + t3993 + t3998 + t4007 + t4035 - 0.21*t734 - 1.*t2754*t734 + 0.049*t968 + t2747*t968))*var2[9] + t4048*var2[10] + t3381*var2[11] + t8561*var2[12];
  p_output1[19]=0;
  p_output1[20]=t4048*var2[9] + (2.*Power(t3419,2) + 2.*Power(t3495,2) + 2.*t2884*(t2770 + t2781 + t2799 + t2807 + t2809 + t2810 + t2820 + t3414 - 1.*t734*t9252) + 2.*t3090*(t3521 + t3526 + t3527 + t3852 + t3993 + t3998 + t4007 + t4035 - 1.*t9252*t968))*var2[10] + t9178*var2[11] + t9586*var2[12];
  p_output1[21]=0;
  p_output1[22]=t3381*var2[9] + t9178*var2[10] + (2.*Power(t2727,2) + 2.*Power(t3078,2) + 2.*t3090*(0.588518*(t10027*t1218 + t1240*t1255) - 0.124503*(t10027*t1419 + t1240*t1801) - 1.*t10027*t2551 - 1.*t1240*t2643 - 0.045407*(t1240*t2668 + t10027*t2690) + t3093 - 1.*t1148*t9730) + 2.*t2884*(t1202 - 1.*t2643*t3018 - 1.*t2840*t9730 - 1.*t2551*t9762 + 0.588518*(t1255*t3018 + t1218*t9762) - 0.124503*(t1801*t3018 + t1419*t9762) - 0.045407*(t2668*t3018 + t2690*t9762)))*var2[11] + t10686*var2[12];
  p_output1[23]=0;
  p_output1[24]=t8561*var2[9] + t9586*var2[10] + t10686*var2[11] + (2.*(-1.*t11017*t2853 - 1.*t10870*t2857 - 0.124503*(t10927*t2853 + t10896*t2857) + 0.588518*(-0.999969365345*t1203*t2853 + t11021*t2857) - 0.045407*(t10749*t2853 - 0.993925573253*t1203*t2857))*t2884 + 2.*(-1.*t11017*t1248 - 1.*t10870*t2960 - 0.124503*(t10927*t1248 + t10896*t2960) + 0.588518*(-0.999969365345*t1203*t1248 + t11021*t2960) - 0.045407*(t10749*t1248 - 0.993925573253*t1203*t2960))*t3090 + 2.*Power(2.1934241414728571e-7 + 0.0007262134395594695*t1251 + 0.588518*(t4242 + t4362) + 0.6934341012630001*(t4214 + t4392) - 0.045407*(t4329 + t4665) + 0.021877537552*(t4325 + t4780),2) + 2.*Power(t5476,2) + 2.*Power(t5991,2) + 2.*(0.0007262134395594695*t1203 + 0.588518*(t10917 + t1379) - 0.045407*(t10889 + t1767) + 0.6934341012630001*(t10948 + t2511) + 0.021877537552*(t10811 + t2588))*(0.09 - 0.124503*(1. - 0.006104248100000001*t1207) - 0.000033783761634830594*t1207 + 0.6934341012630001*(t1379 + t2508) + 0.588518*(t1344 + t2511) + 0.021877537552*(t1767 + t2580) - 0.045407*(t1589 + t2588) + 2.1934241414728571e-7*var1[12]))*var2[12];
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=(2.*Power(t11996,2) + 2.*t11996*t12086 + 2.*Power(t12154,2) + 2.*t12197*(-0.21*t11620 + 0.049*t11650 + t11650*t11908 - 1.*t11620*t11923 + t12258 + t12259 + t12270 + t12271 + t12276 + t12278 + t12283))*var2[17] + t12297*var2[18] + t12233*var2[19] + t12436*var2[20];
  p_output1[36]=0;
  p_output1[37]=t12297*var2[17] + (2.*Power(t12245,2) + 2.*Power(t12253,2) + 2.*t12086*(t11931 + t11958 + t11979 + t11980 + t11989 + t11990 + t11995 + t12242 - 1.*t11620*t12457) + 2.*t12197*(t12257 + t12258 + t12259 + t12270 + t12271 + t12276 + t12278 + t12283 - 1.*t11650*t12457))*var2[18] + t12444*var2[19] + t12486*var2[20];
  p_output1[38]=0;
  p_output1[39]=t12233*var2[17] + t12444*var2[18] + (2.*Power(t11872,2) + 2.*Power(t12190,2) + 2.*t12086*(t11713 - 1.*t11854*t12163 - 1.*t12034*t12495 - 1.*t11791*t12498 + 0.588518*(t11764*t12163 + t11729*t12498) + 0.124503*(t11802*t12163 + t11818*t12498) - 0.045407*(t11861*t12163 + t11865*t12498)) + 2.*t12197*(-1.*t11737*t11854 + t12200 - 1.*t11704*t12495 - 1.*t11791*t12532 + 0.588518*(t11737*t11764 + t11729*t12532) + 0.124503*(t11737*t11802 + t11818*t12532) - 0.045407*(t11737*t11861 + t11865*t12532)))*var2[19] + t12637*var2[20];
  p_output1[40]=0;
  p_output1[41]=t12436*var2[17] + t12486*var2[18] + t12637*var2[19] + (2.*Power(-2.1934241414728571e-7 - 0.0007262134395594695*t11760 + 0.588518*(t12336 + t12349) + 0.6934341012630001*(t12335 + t12350) - 0.045407*(t12326 + t12367) + 0.021877537552*(t12325 + t12368),2) + 2.*Power(t12387,2) + 2.*Power(t12406,2) + 2.*t12086*(-0.045407*(-0.993925573253*t11717*t12056 + t12049*t12650) - 1.*t12056*t12668 + 0.124503*(t12049*t12671 + t12056*t12674) - 1.*t12049*t12685 + 0.588518*(-0.999969365345*t11717*t12049 + t12056*t12688)) + 2.*t12197*(-0.045407*(-0.993925573253*t11717*t12107 + t11755*t12650) - 1.*t12107*t12668 + 0.124503*(t11755*t12671 + t12107*t12674) - 1.*t11755*t12685 + 0.588518*(-0.999969365345*t11717*t11755 + t12107*t12688)) + 2.*(-0.0007262134395594695*t11717 + 0.021877537552*(t11836 + t12663) + 0.588518*(t11816 + t12670) - 0.045407*(t11801 + t12673) + 0.6934341012630001*(t11783 + t12680))*(-0.09 + 0.124503*(1. - 0.006104248100000001*t11723) + 0.000033783761634830594*t11723 + 0.588518*(t11783 + t11809) + 0.6934341012630001*(t11782 + t11816) + 0.021877537552*(t11801 + t11834) - 0.045407*(t11800 + t11836) - 2.1934241414728571e-7*var1[20]))*var2[20];
  p_output1[42]=0;
  p_output1[43]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 2, (mwSize) 22, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_achilles_constraint_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




