/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:52 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "dyaRightStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t34;
  double t201;
  double t249;
  double t304;
  double t351;
  double t385;
  double t748;
  double t756;
  double t765;
  double t770;
  double t775;
  double t790;
  double t809;
  double t813;
  double t817;
  double t998;
  double t1012;
  double t1105;
  double t1276;
  double t1289;
  double t1313;
  double t1364;
  double t1554;
  double t1619;
  double t1622;
  double t1201;
  double t1259;
  double t1264;
  double t355;
  double t433;
  double t484;
  double t617;
  double t698;
  double t728;
  double t861;
  double t925;
  double t964;
  double t782;
  double t794;
  double t797;
  double t1818;
  double t1819;
  double t1820;
  double t1324;
  double t1413;
  double t1424;
  double t1637;
  double t1641;
  double t1645;
  double t1826;
  double t1827;
  double t1832;
  double t1834;
  double t1835;
  double t1680;
  double t1689;
  double t1694;
  double t44;
  double t237;
  double t589;
  double t732;
  double t835;
  double t1143;
  double t1468;
  double t1671;
  double t1696;
  double t1701;
  double t1709;
  double t1710;
  double t1712;
  double t1713;
  double t1784;
  double t1801;
  double t1812;
  double t1816;
  double t1821;
  double t1824;
  double t1833;
  double t1836;
  double t1838;
  double t1842;
  double t1843;
  double t1850;
  double t1851;
  double t1854;
  double t1856;
  double t1857;
  double t1860;
  double t1891;
  double t1896;
  double t1917;
  double t1920;
  double t1935;
  double t1723;
  double t1863;
  double t1867;
  double t1868;
  double t2062;
  double t2063;
  double t2069;
  double t2074;
  double t2075;
  double t2088;
  double t2095;
  double t2097;
  double t2311;
  double t2320;
  double t2329;
  double t2168;
  double t2170;
  double t2173;
  double t2177;
  double t2206;
  double t2059;
  double t2273;
  double t2299;
  double t2300;
  double t2222;
  double t2255;
  double t2072;
  double t2439;
  double t2446;
  double t2493;
  double t2497;
  double t2504;
  double t2505;
  double t2513;
  double t2533;
  double t2567;
  double t2570;
  double t2571;
  double t2575;
  double t2577;
  double t2584;
  double t2590;
  double t2591;
  double t2592;
  double t2613;
  double t2616;
  double t2623;
  double t2625;
  double t2627;
  double t2633;
  double t2641;
  double t2646;
  double t2647;
  double t2653;
  double t2717;
  double t2719;
  double t2725;
  double t2545;
  double t2554;
  double t2558;
  double t2510;
  double t2522;
  double t2523;
  double t2599;
  double t2600;
  double t2602;
  double t2583;
  double t2588;
  double t2589;
  double t2685;
  double t2707;
  double t2710;
  double t2773;
  double t2774;
  double t2776;
  double t2638;
  double t2642;
  double t2645;
  double t2783;
  double t2785;
  double t2789;
  double t2790;
  double t2795;
  double t2730;
  double t2734;
  double t2735;
  double t2496;
  double t2528;
  double t2541;
  double t2562;
  double t2597;
  double t2624;
  double t2656;
  double t2729;
  double t2736;
  double t2737;
  double t2739;
  double t2745;
  double t2750;
  double t2751;
  double t2755;
  double t2757;
  double t2761;
  double t2765;
  double t2777;
  double t2782;
  double t2786;
  double t2798;
  double t2802;
  double t2804;
  double t2806;
  double t2807;
  double t2809;
  double t2810;
  double t2812;
  double t2814;
  double t2817;
  double t2858;
  double t2862;
  double t2831;
  double t2843;
  double t2850;
  double t2754;
  double t2818;
  double t2819;
  double t2827;
  double t2993;
  double t2998;
  double t3001;
  double t3015;
  double t3018;
  double t3036;
  double t3043;
  double t3044;
  double t3134;
  double t3155;
  double t3180;
  double t3102;
  double t3104;
  double t3107;
  double t3091;
  double t3096;
  double t2990;
  double t3115;
  double t3116;
  double t3122;
  double t3110;
  double t3113;
  double t3013;
  double t3263;
  double t3273;
  double t2924;
  double t2935;
  double t2936;
  double t2963;
  double t2970;
  double t2974;
  double t2976;
  double t2868;
  double t2877;
  double t2880;
  double t3456;
  double t3457;
  double t3458;
  double t3464;
  double t3466;
  double t3468;
  double t3469;
  double t3377;
  double t3379;
  double t3382;
  double t3390;
  double t3391;
  double t3398;
  double t3399;
  double t3418;
  double t3434;
  double t3438;
  double t3443;
  double t3447;
  double t3470;
  double t3472;
  double t3487;
  double t3048;
  double t3050;
  double t3054;
  double t3058;
  double t3060;
  double t3070;
  double t3183;
  double t3186;
  double t3192;
  double t3202;
  double t3221;
  double t3230;
  double t3547;
  double t3553;
  double t3280;
  double t3284;
  double t3295;
  double t3333;
  double t3334;
  double t3337;
  double t3675;
  double t3702;
  double t3664;
  double t3671;
  double t3672;
  double t3682;
  double t3683;
  double t3685;
  double t3698;
  double t3700;
  double t3703;
  double t3707;
  double t3714;
  double t3715;
  double t3717;
  double t3712;
  double t3724;
  double t3726;
  double t3734;
  double t3736;
  double t3743;
  double t3732;
  double t3746;
  double t3749;
  double t3767;
  double t3772;
  double t3775;
  double t3812;
  double t3815;
  double t3825;
  double t3829;
  double t3831;
  double t3838;
  double t3827;
  double t3840;
  double t3842;
  double t3850;
  double t3856;
  double t3860;
  double t3902;
  double t3903;
  double t3904;
  double t3907;
  double t3908;
  double t3910;
  double t3906;
  double t3911;
  double t3912;
  double t3916;
  double t3917;
  double t3921;
  double t3913;
  double t3925;
  double t3928;
  double t3938;
  double t3939;
  double t3947;
  double t3979;
  double t3980;
  double t3982;
  double t3986;
  double t3987;
  double t4000;
  double t4008;
  double t4009;
  double t4012;
  double t4001;
  double t4019;
  double t4027;
  double t4035;
  double t4042;
  double t4044;
  double t4072;
  double t4077;
  double t4082;
  double t4090;
  double t4098;
  double t4103;
  double t4114;
  double t4116;
  double t4117;
  double t4108;
  double t4123;
  double t4125;
  double t4133;
  double t4135;
  double t4138;
  double t4132;
  double t4140;
  double t4143;
  double t4148;
  double t4152;
  double t4153;
  double t3933;
  double t3952;
  double t3958;
  double t3964;
  double t3965;
  double t3966;
  double t3970;
  double t3974;
  double t3975;
  double t4146;
  double t4159;
  double t4160;
  double t4163;
  double t4165;
  double t4170;
  double t4172;
  double t4173;
  double t4174;
  double t4181;
  double t3750;
  double t3776;
  double t3778;
  double t3785;
  double t3788;
  double t3790;
  double t4186;
  double t4209;
  double t4216;
  double t4218;
  double t4223;
  double t4227;
  double t4229;
  double t4235;
  double t4238;
  double t4240;
  double t4234;
  double t4241;
  double t4243;
  double t4249;
  double t4250;
  double t4252;
  double t4187;
  double t4194;
  double t4198;
  double t4199;
  double t4201;
  double t4204;
  double t4205;
  double t3782;
  double t3795;
  double t3797;
  double t4279;
  double t4280;
  double t4281;
  double t4286;
  double t4287;
  double t4290;
  double t4282;
  double t4291;
  double t4296;
  double t4301;
  double t4304;
  double t4311;
  double t4298;
  double t4314;
  double t4315;
  double t4321;
  double t4322;
  double t4327;
  double t4346;
  double t4349;
  double t4353;
  double t4359;
  double t4360;
  double t4361;
  double t4356;
  double t4362;
  double t4363;
  double t4368;
  double t4369;
  double t4372;
  double t4367;
  double t4375;
  double t4376;
  double t4381;
  double t4390;
  double t4391;
  double t4189;
  double t4415;
  double t4416;
  double t4422;
  double t4425;
  double t4428;
  double t4429;
  double t4423;
  double t4430;
  double t4431;
  double t4434;
  double t4436;
  double t4439;
  double t4432;
  double t4442;
  double t4446;
  double t4451;
  double t4453;
  double t4463;
  double t4272;
  double t4493;
  double t4496;
  double t4499;
  double t4501;
  double t4504;
  double t4509;
  double t4510;
  double t4511;
  double t4506;
  double t4515;
  double t4516;
  double t4521;
  double t4524;
  double t4527;
  double t4546;
  double t4551;
  double t4554;
  double t4556;
  double t4558;
  double t4560;
  double t4561;
  double t4563;
  double t4559;
  double t4564;
  double t4568;
  double t4571;
  double t4574;
  double t4580;
  double t4612;
  double t4614;
  double t4616;
  double t4617;
  double t4618;
  double t4622;
  double t4625;
  double t4627;
  double t4620;
  double t4628;
  double t4630;
  double t4635;
  double t4637;
  double t4638;
  double t4723;
  double t4725;
  double t4728;
  double t4729;
  double t4732;
  double t4736;
  double t4738;
  double t4740;
  double t4734;
  double t4741;
  double t4742;
  double t4744;
  double t4747;
  double t4749;
  double t4743;
  double t4752;
  double t4758;
  double t4763;
  double t4766;
  double t4771;
  double t4802;
  double t4803;
  double t4804;
  double t4805;
  double t4808;
  double t4814;
  double t4816;
  double t4837;
  double t4839;
  double t4840;
  double t4842;
  double t4845;
  double t4851;
  double t4852;
  double t4878;
  double t4883;
  double t4885;
  double t4886;
  double t4889;
  double t4890;
  double t4892;
  t34 = Cos(var1[16]);
  t201 = Sin(var1[16]);
  t249 = Cos(var1[17]);
  t304 = -1.*t249;
  t351 = 1. + t304;
  t385 = Sin(var1[17]);
  t748 = -1.*var1[17];
  t756 = 0.226893 + t748;
  t765 = Cos(t756);
  t770 = -1.*t765;
  t775 = 1. + t770;
  t790 = Sin(t756);
  t809 = -1.*t249*t201;
  t813 = -1.*t34*t385;
  t817 = t809 + t813;
  t998 = t34*t249;
  t1012 = -1.*t201*t385;
  t1105 = t998 + t1012;
  t1276 = Cos(var1[21]);
  t1289 = -1.*t1276;
  t1313 = 1. + t1289;
  t1364 = Sin(var1[21]);
  t1554 = t765*t817;
  t1619 = -1.*t790*t1105;
  t1622 = t1554 + t1619;
  t1201 = t790*t817;
  t1259 = t765*t1105;
  t1264 = t1201 + t1259;
  t355 = -0.049*t351;
  t433 = -0.21*t385;
  t484 = t355 + t433;
  t617 = -0.21*t351;
  t698 = 0.049*t385;
  t728 = t617 + t698;
  t861 = 0.01841*t775;
  t925 = -0.70544*t790;
  t964 = t861 + t925;
  t782 = -0.70544*t775;
  t794 = -0.01841*t790;
  t797 = t782 + t794;
  t1818 = t249*t201;
  t1819 = t34*t385;
  t1820 = t1818 + t1819;
  t1324 = -0.02159*t1313;
  t1413 = -1.11344*t1364;
  t1424 = t1324 + t1413;
  t1637 = -1.11344*t1313;
  t1641 = 0.02159*t1364;
  t1645 = t1637 + t1641;
  t1826 = t765*t1820;
  t1827 = t790*t1105;
  t1832 = t1826 + t1827;
  t1834 = -1.*t790*t1820;
  t1835 = t1834 + t1259;
  t1680 = t1276*t1622;
  t1689 = -1.*t1264*t1364;
  t1694 = t1680 + t1689;
  t44 = 0.049*t34;
  t237 = -0.09*t201;
  t589 = t34*t484;
  t732 = -1.*t201*t728;
  t835 = t797*t817;
  t1143 = t964*t1105;
  t1468 = t1264*t1424;
  t1671 = t1622*t1645;
  t1696 = -1.11344*t1694;
  t1701 = t1276*t1264;
  t1709 = t1622*t1364;
  t1710 = t1701 + t1709;
  t1712 = -0.02159*t1710;
  t1713 = t44 + t237 + t589 + t732 + t835 + t1143 + t1468 + t1671 + t1696 + t1712;
  t1784 = 0.09*t34;
  t1801 = 0.049*t201;
  t1812 = t201*t484;
  t1816 = t34*t728;
  t1821 = t964*t1820;
  t1824 = t797*t1105;
  t1833 = t1832*t1424;
  t1836 = t1835*t1645;
  t1838 = t1276*t1832;
  t1842 = t1835*t1364;
  t1843 = t1838 + t1842;
  t1850 = -0.02159*t1843;
  t1851 = t1276*t1835;
  t1854 = -1.*t1832*t1364;
  t1856 = t1851 + t1854;
  t1857 = -1.11344*t1856;
  t1860 = t1784 + t1801 + t1812 + t1816 + t1821 + t1824 + t1833 + t1836 + t1850 + t1857;
  t1891 = 0.02159*t1276;
  t1896 = t1891 + t1413;
  t1917 = -1.11344*t1276;
  t1920 = -0.02159*t1364;
  t1935 = t1917 + t1920;
  t1723 = Power(t1713,2);
  t1863 = Power(t1860,2);
  t1867 = 0.00002025 + t1723 + t1863;
  t1868 = 1/Sqrt(t1867);
  t2062 = -1.*t34*t249;
  t2063 = t201*t385;
  t2069 = t2062 + t2063;
  t2074 = t790*t2069;
  t2075 = t1554 + t2074;
  t2088 = -1.*t790*t817;
  t2095 = t765*t2069;
  t2097 = t2088 + t2095;
  t2311 = t790*t1820;
  t2320 = t1201 + t2311;
  t2329 = t1554 + t1826;
  t2168 = 0.049*t249;
  t2170 = t2168 + t433;
  t2173 = -0.21*t249;
  t2177 = -0.049*t385;
  t2206 = t2173 + t2177;
  t2059 = t964*t817;
  t2273 = 0.01841*t765;
  t2299 = 0.70544*t790;
  t2300 = t2273 + t2299;
  t2222 = 0.70544*t765;
  t2255 = t2222 + t794;
  t2072 = t797*t2069;
  t2439 = t1827 + t2074;
  t2446 = t1259 + t2095;
  t2493 = Cos(var1[8]);
  t2497 = Cos(var1[9]);
  t2504 = -1.*t2497;
  t2505 = 1. + t2504;
  t2513 = Sin(var1[9]);
  t2533 = Sin(var1[8]);
  t2567 = -1.*var1[9];
  t2570 = 0.226893 + t2567;
  t2571 = Cos(t2570);
  t2575 = -1.*t2571;
  t2577 = 1. + t2575;
  t2584 = Sin(t2570);
  t2590 = -1.*t2493*t2513;
  t2591 = -1.*t2497*t2533;
  t2592 = t2590 + t2591;
  t2613 = t2497*t2493;
  t2616 = -1.*t2513*t2533;
  t2623 = t2613 + t2616;
  t2625 = Cos(var1[13]);
  t2627 = -1.*t2625;
  t2633 = 1. + t2627;
  t2641 = Sin(var1[13]);
  t2646 = t2584*t2592;
  t2647 = t2571*t2623;
  t2653 = t2646 + t2647;
  t2717 = t2571*t2592;
  t2719 = -1.*t2584*t2623;
  t2725 = t2717 + t2719;
  t2545 = -0.21*t2505;
  t2554 = 0.049*t2513;
  t2558 = t2545 + t2554;
  t2510 = -0.049*t2505;
  t2522 = -0.21*t2513;
  t2523 = t2510 + t2522;
  t2599 = 0.01841*t2577;
  t2600 = -0.70544*t2584;
  t2602 = t2599 + t2600;
  t2583 = -0.70544*t2577;
  t2588 = -0.01841*t2584;
  t2589 = t2583 + t2588;
  t2685 = -1.11344*t2633;
  t2707 = 0.02159*t2641;
  t2710 = t2685 + t2707;
  t2773 = t2493*t2513;
  t2774 = t2497*t2533;
  t2776 = t2773 + t2774;
  t2638 = -0.02159*t2633;
  t2642 = -1.11344*t2641;
  t2645 = t2638 + t2642;
  t2783 = -1.*t2584*t2776;
  t2785 = t2783 + t2647;
  t2789 = t2571*t2776;
  t2790 = t2584*t2623;
  t2795 = t2789 + t2790;
  t2730 = -1.*t2641*t2653;
  t2734 = t2625*t2725;
  t2735 = t2730 + t2734;
  t2496 = 0.049*t2493;
  t2528 = t2493*t2523;
  t2541 = -0.09*t2533;
  t2562 = -1.*t2558*t2533;
  t2597 = t2589*t2592;
  t2624 = t2602*t2623;
  t2656 = t2645*t2653;
  t2729 = t2710*t2725;
  t2736 = -1.11344*t2735;
  t2737 = t2625*t2653;
  t2739 = t2641*t2725;
  t2745 = t2737 + t2739;
  t2750 = -0.02159*t2745;
  t2751 = t2496 + t2528 + t2541 + t2562 + t2597 + t2624 + t2656 + t2729 + t2736 + t2750;
  t2755 = 0.09*t2493;
  t2757 = t2493*t2558;
  t2761 = 0.049*t2533;
  t2765 = t2523*t2533;
  t2777 = t2602*t2776;
  t2782 = t2589*t2623;
  t2786 = t2710*t2785;
  t2798 = t2645*t2795;
  t2802 = t2641*t2785;
  t2804 = t2625*t2795;
  t2806 = t2802 + t2804;
  t2807 = -0.02159*t2806;
  t2809 = t2625*t2785;
  t2810 = -1.*t2641*t2795;
  t2812 = t2809 + t2810;
  t2814 = -1.11344*t2812;
  t2817 = t2755 + t2757 + t2761 + t2765 + t2777 + t2782 + t2786 + t2798 + t2807 + t2814;
  t2858 = 0.02159*t2625;
  t2862 = t2858 + t2642;
  t2831 = -1.11344*t2625;
  t2843 = -0.02159*t2641;
  t2850 = t2831 + t2843;
  t2754 = Power(t2751,2);
  t2818 = Power(t2817,2);
  t2819 = 0.00002025 + t2754 + t2818;
  t2827 = 1/Sqrt(t2819);
  t2993 = -1.*t2497*t2493;
  t2998 = t2513*t2533;
  t3001 = t2993 + t2998;
  t3015 = -1.*t2584*t2592;
  t3018 = t2571*t3001;
  t3036 = t3015 + t3018;
  t3043 = t2584*t3001;
  t3044 = t2717 + t3043;
  t3134 = t2717 + t2789;
  t3155 = t2584*t2776;
  t3180 = t2646 + t3155;
  t3102 = -0.21*t2497;
  t3104 = -0.049*t2513;
  t3107 = t3102 + t3104;
  t3091 = 0.049*t2497;
  t3096 = t3091 + t2522;
  t2990 = t2602*t2592;
  t3115 = 0.01841*t2571;
  t3116 = 0.70544*t2584;
  t3122 = t3115 + t3116;
  t3110 = 0.70544*t2571;
  t3113 = t3110 + t2588;
  t3013 = t2589*t3001;
  t3263 = t2647 + t3018;
  t3273 = t2790 + t3043;
  t2924 = -1.*t2641*t2785;
  t2935 = -1.*t2625*t2795;
  t2936 = t2924 + t2935;
  t2963 = -0.09*t2493;
  t2970 = -1.*t2493*t2558;
  t2974 = -0.049*t2533;
  t2976 = -1.*t2523*t2533;
  t2868 = -1.*t2625*t2653;
  t2877 = -1.*t2641*t2725;
  t2880 = t2868 + t2877;
  t3456 = -1.*t2602*t2776;
  t3457 = -1.*t2589*t2623;
  t3458 = -1.*t2710*t2785;
  t3464 = -1.*t2645*t2795;
  t3466 = 0.02159*t2806;
  t3468 = 1.11344*t2812;
  t3469 = t2963 + t2970 + t2974 + t2976 + t3456 + t3457 + t3458 + t3464 + t3466 + t3468;
  t3377 = -0.049*t2493;
  t3379 = -1.*t2493*t2523;
  t3382 = 0.09*t2533;
  t3390 = t2558*t2533;
  t3391 = -1.*t2589*t2592;
  t3398 = -1.*t2602*t2623;
  t3399 = -1.*t2645*t2653;
  t3418 = -1.*t2710*t2725;
  t3434 = 1.11344*t2735;
  t3438 = 0.02159*t2745;
  t3443 = t3377 + t3379 + t3382 + t3390 + t3391 + t3398 + t3399 + t3418 + t3434 + t3438;
  t3447 = Power(t3443,2);
  t3470 = Power(t3469,2);
  t3472 = t3447 + t3470;
  t3487 = 1/t3472;
  t3048 = t2641*t3036;
  t3050 = t2625*t3044;
  t3054 = t3048 + t3050;
  t3058 = t2625*t3036;
  t3060 = -1.*t2641*t3044;
  t3070 = t3058 + t3060;
  t3183 = t2641*t3134;
  t3186 = t2625*t3180;
  t3192 = t3183 + t3186;
  t3202 = t2625*t3134;
  t3221 = -1.*t2641*t3180;
  t3230 = t3202 + t3221;
  t3547 = -1.*t2602*t2592;
  t3553 = -1.*t2589*t3001;
  t3280 = t2641*t3263;
  t3284 = t2625*t3273;
  t3295 = t3280 + t3284;
  t3333 = t2625*t3263;
  t3334 = -1.*t2641*t3273;
  t3337 = t3333 + t3334;
  t3675 = Cos(var1[4]);
  t3702 = Cos(var1[6]);
  t3664 = Cos(var1[7]);
  t3671 = Sin(var1[4]);
  t3672 = -1.*t3664*t3671;
  t3682 = Sin(var1[6]);
  t3683 = Sin(var1[7]);
  t3685 = t3675*t3682*t3683;
  t3698 = t3672 + t3685;
  t3700 = t2493*t3698;
  t3703 = t3675*t3702*t2533;
  t3707 = t3700 + t3703;
  t3714 = t3675*t3702*t2493;
  t3715 = -1.*t3698*t2533;
  t3717 = t3714 + t3715;
  t3712 = -1.*t2513*t3707;
  t3724 = t2497*t3717;
  t3726 = t3712 + t3724;
  t3734 = t2497*t3707;
  t3736 = t2513*t3717;
  t3743 = t3734 + t3736;
  t3732 = t2584*t3726;
  t3746 = t2571*t3743;
  t3749 = t3732 + t3746;
  t3767 = t2571*t3726;
  t3772 = -1.*t2584*t3743;
  t3775 = t3767 + t3772;
  t3812 = -1.*t3702*t3664*t2493*t2513;
  t3815 = -1.*t2497*t3702*t3664*t2533;
  t3825 = t3812 + t3815;
  t3829 = t2497*t3702*t3664*t2493;
  t3831 = -1.*t3702*t3664*t2513*t2533;
  t3838 = t3829 + t3831;
  t3827 = t2584*t3825;
  t3840 = t2571*t3838;
  t3842 = t3827 + t3840;
  t3850 = t2571*t3825;
  t3856 = -1.*t2584*t3838;
  t3860 = t3850 + t3856;
  t3902 = t3702*t2493*t3683;
  t3903 = -1.*t3682*t2533;
  t3904 = t3902 + t3903;
  t3907 = -1.*t2493*t3682;
  t3908 = -1.*t3702*t3683*t2533;
  t3910 = t3907 + t3908;
  t3906 = -1.*t2513*t3904;
  t3911 = t2497*t3910;
  t3912 = t3906 + t3911;
  t3916 = t2497*t3904;
  t3917 = t2513*t3910;
  t3921 = t3916 + t3917;
  t3913 = t2584*t3912;
  t3925 = t2571*t3921;
  t3928 = t3913 + t3925;
  t3938 = t2571*t3912;
  t3939 = -1.*t2584*t3921;
  t3947 = t3938 + t3939;
  t3979 = t3664*t3671*t3682;
  t3980 = -1.*t3675*t3683;
  t3982 = t3979 + t3980;
  t3986 = -1.*t2493*t2513*t3982;
  t3987 = -1.*t2497*t3982*t2533;
  t4000 = t3986 + t3987;
  t4008 = t2497*t2493*t3982;
  t4009 = -1.*t2513*t3982*t2533;
  t4012 = t4008 + t4009;
  t4001 = t2584*t4000;
  t4019 = t2571*t4012;
  t4027 = t4001 + t4019;
  t4035 = t2571*t4000;
  t4042 = -1.*t2584*t4012;
  t4044 = t4035 + t4042;
  t4072 = t3675*t3664;
  t4077 = t3671*t3682*t3683;
  t4082 = t4072 + t4077;
  t4090 = t2493*t4082;
  t4098 = t3702*t3671*t2533;
  t4103 = t4090 + t4098;
  t4114 = t3702*t2493*t3671;
  t4116 = -1.*t4082*t2533;
  t4117 = t4114 + t4116;
  t4108 = -1.*t2513*t4103;
  t4123 = t2497*t4117;
  t4125 = t4108 + t4123;
  t4133 = t2497*t4103;
  t4135 = t2513*t4117;
  t4138 = t4133 + t4135;
  t4132 = t2584*t4125;
  t4140 = t2571*t4138;
  t4143 = t4132 + t4140;
  t4148 = t2571*t4125;
  t4152 = -1.*t2584*t4138;
  t4153 = t4148 + t4152;
  t3933 = -1.*t2641*t3928;
  t3952 = t2625*t3947;
  t3958 = t3933 + t3952;
  t3964 = 0.766044*t3958;
  t3965 = t2625*t3928;
  t3966 = t2641*t3947;
  t3970 = t3965 + t3966;
  t3974 = 0.642788*t3970;
  t3975 = t3964 + t3974;
  t4146 = -1.*t2641*t4143;
  t4159 = t2625*t4153;
  t4160 = t4146 + t4159;
  t4163 = 0.766044*t4160;
  t4165 = t2625*t4143;
  t4170 = t2641*t4153;
  t4172 = t4165 + t4170;
  t4173 = 0.642788*t4172;
  t4174 = t4163 + t4173;
  t4181 = Power(t3975,2);
  t3750 = -1.*t2641*t3749;
  t3776 = t2625*t3775;
  t3778 = t3750 + t3776;
  t3785 = t2625*t3749;
  t3788 = t2641*t3775;
  t3790 = t3785 + t3788;
  t4186 = Power(t4174,2);
  t4209 = t3675*t3664*t3682;
  t4216 = t3671*t3683;
  t4218 = t4209 + t4216;
  t4223 = -1.*t2493*t2513*t4218;
  t4227 = -1.*t2497*t4218*t2533;
  t4229 = t4223 + t4227;
  t4235 = t2497*t2493*t4218;
  t4238 = -1.*t2513*t4218*t2533;
  t4240 = t4235 + t4238;
  t4234 = t2584*t4229;
  t4241 = t2571*t4240;
  t4243 = t4234 + t4241;
  t4249 = t2571*t4229;
  t4250 = -1.*t2584*t4240;
  t4252 = t4249 + t4250;
  t4187 = t4181 + t4186;
  t4194 = -0.766044*t3778;
  t4198 = -0.642788*t3790;
  t4199 = t4194 + t4198;
  t4201 = Power(t4199,2);
  t4204 = t4181 + t4201 + t4186;
  t4205 = 1/t4204;
  t3782 = 0.766044*t3778;
  t3795 = 0.642788*t3790;
  t3797 = t3782 + t3795;
  t4279 = -1.*t2493*t3682*t3683;
  t4280 = -1.*t3702*t2533;
  t4281 = t4279 + t4280;
  t4286 = -1.*t3702*t2493;
  t4287 = t3682*t3683*t2533;
  t4290 = t4286 + t4287;
  t4282 = -1.*t2513*t4281;
  t4291 = t2497*t4290;
  t4296 = t4282 + t4291;
  t4301 = t2497*t4281;
  t4304 = t2513*t4290;
  t4311 = t4301 + t4304;
  t4298 = t2584*t4296;
  t4314 = t2571*t4311;
  t4315 = t4298 + t4314;
  t4321 = t2571*t4296;
  t4322 = -1.*t2584*t4311;
  t4327 = t4321 + t4322;
  t4346 = t3702*t2493*t3671*t3683;
  t4349 = -1.*t3671*t3682*t2533;
  t4353 = t4346 + t4349;
  t4359 = -1.*t2493*t3671*t3682;
  t4360 = -1.*t3702*t3671*t3683*t2533;
  t4361 = t4359 + t4360;
  t4356 = -1.*t2513*t4353;
  t4362 = t2497*t4361;
  t4363 = t4356 + t4362;
  t4368 = t2497*t4353;
  t4369 = t2513*t4361;
  t4372 = t4368 + t4369;
  t4367 = t2584*t4363;
  t4375 = t2571*t4372;
  t4376 = t4367 + t4375;
  t4381 = t2571*t4363;
  t4390 = -1.*t2584*t4372;
  t4391 = t4381 + t4390;
  t4189 = 1/Sqrt(t4187);
  t4415 = t3675*t3702*t2493*t3683;
  t4416 = -1.*t3675*t3682*t2533;
  t4422 = t4415 + t4416;
  t4425 = -1.*t3675*t2493*t3682;
  t4428 = -1.*t3675*t3702*t3683*t2533;
  t4429 = t4425 + t4428;
  t4423 = -1.*t2513*t4422;
  t4430 = t2497*t4429;
  t4431 = t4423 + t4430;
  t4434 = t2497*t4422;
  t4436 = t2513*t4429;
  t4439 = t4434 + t4436;
  t4432 = t2584*t4431;
  t4442 = t2571*t4439;
  t4446 = t4432 + t4442;
  t4451 = t2571*t4431;
  t4453 = -1.*t2584*t4439;
  t4463 = t4451 + t4453;
  t4272 = Sqrt(t4187);
  t4493 = -1.*t3702*t2493*t3683;
  t4496 = t3682*t2533;
  t4499 = t4493 + t4496;
  t4501 = t2513*t4499;
  t4504 = t4501 + t3911;
  t4509 = t2497*t4499;
  t4510 = -1.*t2513*t3910;
  t4511 = t4509 + t4510;
  t4506 = -1.*t2584*t4504;
  t4515 = t2571*t4511;
  t4516 = t4506 + t4515;
  t4521 = t2571*t4504;
  t4524 = t2584*t4511;
  t4527 = t4521 + t4524;
  t4546 = -1.*t2493*t4082;
  t4551 = -1.*t3702*t3671*t2533;
  t4554 = t4546 + t4551;
  t4556 = t2513*t4554;
  t4558 = t4556 + t4123;
  t4560 = t2497*t4554;
  t4561 = -1.*t2513*t4117;
  t4563 = t4560 + t4561;
  t4559 = -1.*t2584*t4558;
  t4564 = t2571*t4563;
  t4568 = t4559 + t4564;
  t4571 = t2571*t4558;
  t4574 = t2584*t4563;
  t4580 = t4571 + t4574;
  t4612 = -1.*t2493*t3698;
  t4614 = -1.*t3675*t3702*t2533;
  t4616 = t4612 + t4614;
  t4617 = t2513*t4616;
  t4618 = t4617 + t3724;
  t4622 = t2497*t4616;
  t4625 = -1.*t2513*t3717;
  t4627 = t4622 + t4625;
  t4620 = -1.*t2584*t4618;
  t4628 = t2571*t4627;
  t4630 = t4620 + t4628;
  t4635 = t2571*t4618;
  t4637 = t2584*t4627;
  t4638 = t4635 + t4637;
  t4723 = -1.*t3675*t3664;
  t4725 = -1.*t3671*t3682*t3683;
  t4728 = t4723 + t4725;
  t4729 = t2493*t4728;
  t4732 = t4729 + t4551;
  t4736 = -1.*t3702*t2493*t3671;
  t4738 = -1.*t4728*t2533;
  t4740 = t4736 + t4738;
  t4734 = -1.*t2513*t4732;
  t4741 = t2497*t4740;
  t4742 = t4734 + t4741;
  t4744 = t2497*t4732;
  t4747 = t2513*t4740;
  t4749 = t4744 + t4747;
  t4743 = t2584*t4742;
  t4752 = t2571*t4749;
  t4758 = t4743 + t4752;
  t4763 = t2571*t4742;
  t4766 = -1.*t2584*t4749;
  t4771 = t4763 + t4766;
  t4802 = -1.*t2497*t3707;
  t4803 = t4802 + t4625;
  t4804 = t2571*t4803;
  t4805 = t4804 + t3746;
  t4808 = t2584*t4803;
  t4814 = t2584*t3743;
  t4816 = t4808 + t4814;
  t4837 = -1.*t2497*t3904;
  t4839 = t4837 + t4510;
  t4840 = t2571*t4839;
  t4842 = t4840 + t3925;
  t4845 = t2584*t4839;
  t4851 = t2584*t3921;
  t4852 = t4845 + t4851;
  t4878 = -1.*t2497*t4103;
  t4883 = t4878 + t4561;
  t4885 = t2571*t4883;
  t4886 = t4885 + t4140;
  t4889 = t2584*t4883;
  t4890 = t2584*t4138;
  t4892 = t4889 + t4890;
  p_output1[0]=var2[3];
  p_output1[1]=var2[4];
  p_output1[2]=var2[15];
  p_output1[3]=0.5*t1868*(2.*t1713*t1860 + 2.*t1713*(-0.049*t201 + t2059 + t2072 + t1424*t2075 + t1645*t2097 - 1.11344*(-1.*t1364*t2075 + t1276*t2097) - 0.02159*(t1276*t2075 + t1364*t2097) - 0.09*t34 - 1.*t201*t484 - 1.*t34*t728))*var2[16] + 0.5*t1868*(2.*t1713*(t2059 + t2072 - 1.*t201*t2170 + t1105*t2255 + t1424*t2439 + t1645*t2446 - 1.11344*(-1.*t1364*t2439 + t1276*t2446) - 0.02159*(t1276*t2439 + t1364*t2446) + t2206*t34 + t2300*t817) + 2.*t1860*(t1143 + t201*t2206 + t1820*t2255 + t1105*t2300 + t1424*t2320 + t1645*t2329 - 1.11344*(-1.*t1364*t2320 + t1276*t2329) - 0.02159*(t1276*t2320 + t1364*t2329) + t2170*t34 + t835))*var2[17] + 0.5*t1868*(2.*t1713*(-1.11344*(-1.*t1264*t1276 - 1.*t1364*t1622) - 0.02159*t1694 + t1622*t1896 + t1264*t1935) + 2.*t1860*(-1.11344*(-1.*t1276*t1832 - 1.*t1364*t1835) - 0.02159*t1856 + t1835*t1896 + t1832*t1935))*var2[21];
  p_output1[4]=0.5*t2827*(2.*t2751*t2817 + 2.*t2751*(t2963 + t2970 + t2974 + t2976 + t2990 + t3013 + t2710*t3036 + t2645*t3044 - 0.02159*t3054 - 1.11344*t3070))*var2[8] + 0.5*t2827*(2.*t2817*(t2597 + t2624 + t2493*t3096 + t2533*t3107 + t2776*t3113 + t2623*t3122 + t2710*t3134 + t2645*t3180 - 0.02159*t3192 - 1.11344*t3230) + 2.*t2751*(t2990 + t3013 - 1.*t2533*t3096 + t2493*t3107 + t2623*t3113 + t2592*t3122 + t2710*t3263 + t2645*t3273 - 0.02159*t3295 - 1.11344*t3337))*var2[9] + 0.5*t2827*(2.*t2751*(-0.02159*t2735 + t2653*t2850 + t2725*t2862 - 1.11344*t2880) + 2.*t2817*(-0.02159*t2812 + t2795*t2850 + t2785*t2862 - 1.11344*t2936))*var2[13];
  p_output1[5]=(t2751*t3443*t3487 + t3469*t3487*(t2755 + t2757 + t2761 + t2765 - 1.*t2710*t3036 - 1.*t2645*t3044 + 0.02159*t3054 + 1.11344*t3070 + t3547 + t3553))*var2[8] + (t2751*(-1.*t2493*t3096 - 1.*t2533*t3107 - 1.*t2776*t3113 - 1.*t2623*t3122 - 1.*t2710*t3134 - 1.*t2645*t3180 + 0.02159*t3192 + 1.11344*t3230 + t3391 + t3398)*t3487 + t3469*t3487*(t2533*t3096 - 1.*t2493*t3107 - 1.*t2623*t3113 - 1.*t2592*t3122 - 1.*t2710*t3263 - 1.*t2645*t3273 + 0.02159*t3295 + 1.11344*t3337 + t3547 + t3553))*var2[9] + (t2751*(0.02159*t2812 - 1.*t2795*t2850 - 1.*t2785*t2862 + 1.11344*t2936)*t3487 + (0.02159*t2735 - 1.*t2653*t2850 - 1.*t2725*t2862 + 1.11344*t2880)*t3469*t3487)*var2[13];
  p_output1[6]=var2[6];
  p_output1[7]=var2[7];
  p_output1[8]=(Power(t3797,2)*t4174*t4189*t4205 + t4205*t4272*(-0.766044*(-1.*t2641*t4758 + t2625*t4771) - 0.642788*(t2625*t4758 + t2641*t4771)))*var2[4] + (0.5*t3797*t4189*t4205*(2.*t3975*(0.766044*(-1.*t2641*t4315 + t2625*t4327) + 0.642788*(t2625*t4315 + t2641*t4327)) + 2.*t4174*(0.766044*(-1.*t2641*t4376 + t2625*t4391) + 0.642788*(t2625*t4376 + t2641*t4391))) + t4205*t4272*(-0.766044*(-1.*t2641*t4446 + t2625*t4463) - 0.642788*(t2625*t4446 + t2641*t4463)))*var2[6] + (0.5*t3797*(2.*(0.766044*(-1.*t2641*t3842 + t2625*t3860) + 0.642788*(t2625*t3842 + t2641*t3860))*t3975 + 2.*(0.766044*(-1.*t2641*t4027 + t2625*t4044) + 0.642788*(t2625*t4027 + t2641*t4044))*t4174)*t4189*t4205 + t4205*(-0.766044*(-1.*t2641*t4243 + t2625*t4252) - 0.642788*(t2625*t4243 + t2641*t4252))*t4272)*var2[7] + (0.5*t3797*t4189*t4205*(2.*t3975*(0.642788*(t2641*t4516 + t2625*t4527) + 0.766044*(t2625*t4516 - 1.*t2641*t4527)) + 2.*t4174*(0.642788*(t2641*t4568 + t2625*t4580) + 0.766044*(t2625*t4568 - 1.*t2641*t4580))) + t4205*t4272*(-0.642788*(t2641*t4630 + t2625*t4638) - 0.766044*(t2625*t4630 - 1.*t2641*t4638)))*var2[8] + (t4205*t4272*(-0.642788*(t2641*t4805 + t2625*t4816) - 0.766044*(t2625*t4805 - 1.*t2641*t4816)) + 0.5*t3797*t4189*t4205*(2.*t3975*(0.642788*(t2641*t4842 + t2625*t4852) + 0.766044*(t2625*t4842 - 1.*t2641*t4852)) + 2.*t4174*(0.642788*(t2641*t4886 + t2625*t4892) + 0.766044*(t2625*t4886 - 1.*t2641*t4892))))*var2[9] + (0.5*t3797*(2.*(0.766044*(-1.*t2625*t3928 - 1.*t2641*t3947) + 0.642788*t3958)*t3975 + 2.*(0.766044*(-1.*t2625*t4143 - 1.*t2641*t4153) + 0.642788*t4160)*t4174)*t4189*t4205 + (-0.766044*(-1.*t2625*t3749 - 1.*t2641*t3775) - 0.642788*t3778)*t4205*t4272)*var2[13];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void dyaRightStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




