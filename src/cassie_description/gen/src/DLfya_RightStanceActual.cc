/*
 * Automatically Generated from Mathematica.
 * Thu 26 Aug 2021 14:19:36 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "DLfya_RightStanceActual.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t21;
  double t46;
  double t57;
  double t64;
  double t126;
  double t141;
  double t219;
  double t220;
  double t313;
  double t319;
  double t325;
  double t356;
  double t466;
  double t508;
  double t523;
  double t618;
  double t622;
  double t628;
  double t635;
  double t644;
  double t648;
  double t676;
  double t721;
  double t732;
  double t733;
  double t762;
  double t763;
  double t764;
  double t147;
  double t198;
  double t199;
  double t109;
  double t129;
  double t130;
  double t563;
  double t598;
  double t611;
  double t332;
  double t376;
  double t447;
  double t740;
  double t742;
  double t745;
  double t920;
  double t930;
  double t931;
  double t663;
  double t678;
  double t687;
  double t945;
  double t974;
  double t993;
  double t1040;
  double t1044;
  double t773;
  double t778;
  double t815;
  double t43;
  double t132;
  double t146;
  double t207;
  double t525;
  double t634;
  double t735;
  double t770;
  double t834;
  double t842;
  double t845;
  double t846;
  double t878;
  double t879;
  double t894;
  double t899;
  double t901;
  double t914;
  double t938;
  double t939;
  double t981;
  double t1069;
  double t1074;
  double t1080;
  double t1086;
  double t1093;
  double t1112;
  double t1115;
  double t1126;
  double t1151;
  double t1152;
  double t1230;
  double t1239;
  double t1198;
  double t1209;
  double t1220;
  double t1426;
  double t1427;
  double t1439;
  double t1453;
  double t1457;
  double t1462;
  double t1478;
  double t1502;
  double t892;
  double t1158;
  double t1175;
  double t1190;
  double t1407;
  double t1409;
  double t1419;
  double t1421;
  double t1422;
  double t1423;
  double t1445;
  double t1474;
  double t1532;
  double t1547;
  double t1552;
  double t1569;
  double t1580;
  double t1586;
  double t1592;
  double t1596;
  double t1597;
  double t1598;
  double t1603;
  double t1608;
  double t1723;
  double t1760;
  double t1799;
  double t1800;
  double t1651;
  double t1221;
  double t1242;
  double t1255;
  double t1260;
  double t1263;
  double t1277;
  double t1288;
  double t1307;
  double t1312;
  double t1313;
  double t1321;
  double t1336;
  double t1360;
  double t1370;
  double t1372;
  double t1374;
  double t2037;
  double t2042;
  double t1994;
  double t2002;
  double t2003;
  double t1991;
  double t1992;
  double t2025;
  double t2029;
  double t2034;
  double t2013;
  double t2017;
  double t2081;
  double t2095;
  double t1993;
  double t2009;
  double t2020;
  double t2035;
  double t2041;
  double t2043;
  double t2045;
  double t2054;
  double t2059;
  double t2062;
  double t2066;
  double t2067;
  double t2069;
  double t2070;
  double t2071;
  double t1699;
  double t1709;
  double t2073;
  double t2077;
  double t2078;
  double t2079;
  double t2089;
  double t2096;
  double t2100;
  double t2103;
  double t2105;
  double t2108;
  double t2109;
  double t2111;
  double t2113;
  double t2115;
  double t2117;
  double t1655;
  double t1666;
  double t1671;
  double t1684;
  double t2168;
  double t2175;
  double t2178;
  double t2179;
  double t2180;
  double t2181;
  double t2186;
  double t2188;
  double t2190;
  double t2194;
  double t2195;
  double t2196;
  double t2200;
  double t2202;
  double t2204;
  double t2208;
  double t2210;
  double t2224;
  double t2228;
  double t2229;
  double t2253;
  double t2255;
  double t2256;
  double t1928;
  double t1957;
  double t1961;
  double t2266;
  double t2267;
  double t2270;
  double t2271;
  double t2272;
  double t2283;
  double t2284;
  double t2285;
  double t2289;
  double t2290;
  double t2293;
  double t2294;
  double t2296;
  double t2298;
  double t2299;
  double t2302;
  double t1808;
  double t1813;
  double t1818;
  double t1840;
  double t1853;
  double t1859;
  double t2311;
  double t2315;
  double t2136;
  double t2140;
  double t2350;
  double t2352;
  double t2356;
  double t2357;
  double t2403;
  double t2404;
  double t2414;
  double t2415;
  double t2417;
  double t2420;
  double t2421;
  double t2422;
  double t2425;
  double t2366;
  double t2367;
  double t2388;
  double t1310;
  double t1384;
  double t1392;
  double t2072;
  double t2119;
  double t2120;
  double t2130;
  double t2141;
  double t2146;
  double t2148;
  double t2152;
  double t2153;
  double t2154;
  double t2158;
  double t2966;
  double t2974;
  double t2977;
  double t2980;
  double t2682;
  double t2720;
  double t2787;
  double t2936;
  double t2946;
  double t2953;
  double t3197;
  double t3202;
  double t3245;
  double t3260;
  double t2479;
  double t2488;
  double t2499;
  double t2519;
  double t2529;
  double t2531;
  double t3889;
  double t3894;
  double t3915;
  double t2345;
  double t2349;
  double t2358;
  double t2362;
  double t2426;
  double t2993;
  double t3003;
  double t3051;
  double t3081;
  double t3088;
  double t3090;
  double t3299;
  double t3328;
  double t3366;
  double t3373;
  double t3379;
  double t3418;
  double t5155;
  double t5165;
  double t5166;
  double t1912;
  double t1916;
  double t1921;
  double t1923;
  double t1927;
  double t1970;
  double t1971;
  double t1972;
  double t1977;
  double t1978;
  double t2472;
  double t2473;
  double t2503;
  double t2504;
  double t2506;
  double t2508;
  double t2512;
  double t2513;
  double t2514;
  double t2517;
  double t2547;
  double t2558;
  double t2573;
  double t2574;
  double t2576;
  double t5827;
  double t5836;
  double t5855;
  double t5217;
  double t5220;
  double t5263;
  double t5528;
  double t5552;
  double t5566;
  double t2263;
  double t2275;
  double t2276;
  double t2277;
  double t2279;
  double t2280;
  double t2281;
  double t3515;
  double t3516;
  double t3520;
  double t3563;
  double t3571;
  double t3606;
  double t3727;
  double t3764;
  double t3842;
  double t3848;
  double t3868;
  double t3877;
  double t6486;
  double t6569;
  double t6661;
  double t6664;
  double t6666;
  double t6691;
  double t7004;
  double t7067;
  double t7151;
  double t7190;
  double t7219;
  double t7379;
  double t7484;
  double t7504;
  double t7520;
  double t7568;
  double t7579;
  double t7606;
  double t7670;
  double t7675;
  double t7677;
  double t7679;
  double t7719;
  double t7726;
  double t7736;
  double t7643;
  double t7663;
  double t7667;
  double t6671;
  double t6728;
  double t6766;
  double t6781;
  double t6826;
  double t6841;
  double t7537;
  double t7550;
  double t7553;
  double t7376;
  double t7403;
  double t7468;
  double t7826;
  double t7836;
  double t7849;
  double t7678;
  double t7680;
  double t7681;
  double t7738;
  double t7740;
  double t7741;
  double t7853;
  double t7854;
  double t7855;
  double t7858;
  double t7859;
  double t7770;
  double t7772;
  double t7774;
  double t6503;
  double t6624;
  double t6776;
  double t6930;
  double t7521;
  double t7642;
  double t7682;
  double t7769;
  double t7776;
  double t7784;
  double t7788;
  double t7791;
  double t7795;
  double t7796;
  double t7807;
  double t7808;
  double t7810;
  double t7824;
  double t7850;
  double t7852;
  double t7856;
  double t7861;
  double t7863;
  double t7864;
  double t7865;
  double t7873;
  double t7881;
  double t7893;
  double t7903;
  double t7904;
  double t7920;
  double t7942;
  double t7944;
  double t7957;
  double t7962;
  double t7963;
  double t8051;
  double t8054;
  double t8060;
  double t8066;
  double t8069;
  double t8073;
  double t8075;
  double t8076;
  double t7803;
  double t7922;
  double t7933;
  double t7934;
  double t8039;
  double t8040;
  double t8041;
  double t8043;
  double t8046;
  double t8048;
  double t8061;
  double t8072;
  double t8077;
  double t8078;
  double t8080;
  double t8081;
  double t8083;
  double t8084;
  double t8085;
  double t8087;
  double t8088;
  double t8128;
  double t8137;
  double t8160;
  double t8232;
  double t8234;
  double t8214;
  double t8222;
  double t8175;
  double t7945;
  double t7964;
  double t7973;
  double t7974;
  double t7975;
  double t7986;
  double t7988;
  double t8000;
  double t8002;
  double t8003;
  double t8008;
  double t8010;
  double t8015;
  double t8021;
  double t8023;
  double t8025;
  double t8392;
  double t8398;
  double t8367;
  double t8368;
  double t8374;
  double t8375;
  double t8378;
  double t8384;
  double t8385;
  double t8387;
  double t8381;
  double t8382;
  double t8464;
  double t8468;
  double t8373;
  double t8379;
  double t8383;
  double t8390;
  double t8394;
  double t8411;
  double t8414;
  double t8419;
  double t8420;
  double t8429;
  double t8437;
  double t8439;
  double t8440;
  double t8441;
  double t8445;
  double t8205;
  double t8213;
  double t8454;
  double t8455;
  double t8459;
  double t8463;
  double t8465;
  double t8476;
  double t8481;
  double t8485;
  double t8486;
  double t8498;
  double t8499;
  double t8501;
  double t8509;
  double t8523;
  double t8529;
  double t8001;
  double t8029;
  double t8038;
  double t8449;
  double t8538;
  double t8539;
  double t8548;
  double t8549;
  double t8551;
  double t8560;
  double t8567;
  double t8585;
  double t8588;
  double t8589;
  double t8590;
  double t8591;
  double t8728;
  double t8729;
  double t8732;
  double t8739;
  double t8688;
  double t8691;
  double t8694;
  double t8714;
  double t8717;
  double t8722;
  double t8783;
  double t8774;
  double t8776;
  double t8777;
  double t8832;
  double t8833;
  double t8836;
  double t8319;
  double t8321;
  double t8323;
  double t8326;
  double t8328;
  double t8331;
  double t8334;
  double t8343;
  double t8344;
  double t8346;
  double t8349;
  double t8354;
  double t8362;
  double t8605;
  double t8606;
  double t8607;
  double t8610;
  double t8612;
  double t8614;
  double t8623;
  double t8632;
  double t8633;
  double t8634;
  double t8644;
  double t8645;
  double t8646;
  double t8647;
  double t8648;
  double t8650;
  double t8653;
  double t8654;
  double t8659;
  double t8661;
  double t8662;
  t21 = Cos(var1[8]);
  t46 = Cos(var1[9]);
  t57 = -1.*t46;
  t64 = 1. + t57;
  t126 = Sin(var1[9]);
  t141 = Sin(var1[8]);
  t219 = -1.*var1[9];
  t220 = 0.226893 + t219;
  t313 = Cos(t220);
  t319 = -1.*t313;
  t325 = 1. + t319;
  t356 = Sin(t220);
  t466 = -1.*t21*t126;
  t508 = -1.*t46*t141;
  t523 = t466 + t508;
  t618 = t46*t21;
  t622 = -1.*t126*t141;
  t628 = t618 + t622;
  t635 = Cos(var1[13]);
  t644 = -1.*t635;
  t648 = 1. + t644;
  t676 = Sin(var1[13]);
  t721 = t356*t523;
  t732 = t313*t628;
  t733 = t721 + t732;
  t762 = t313*t523;
  t763 = -1.*t356*t628;
  t764 = t762 + t763;
  t147 = -0.21*t64;
  t198 = 0.049*t126;
  t199 = t147 + t198;
  t109 = -0.049*t64;
  t129 = -0.21*t126;
  t130 = t109 + t129;
  t563 = 0.01841*t325;
  t598 = -0.70544*t356;
  t611 = t563 + t598;
  t332 = -0.70544*t325;
  t376 = -0.01841*t356;
  t447 = t332 + t376;
  t740 = -1.11344*t648;
  t742 = 0.02159*t676;
  t745 = t740 + t742;
  t920 = t21*t126;
  t930 = t46*t141;
  t931 = t920 + t930;
  t663 = -0.02159*t648;
  t678 = -1.11344*t676;
  t687 = t663 + t678;
  t945 = -1.*t356*t931;
  t974 = t945 + t732;
  t993 = t313*t931;
  t1040 = t356*t628;
  t1044 = t993 + t1040;
  t773 = -1.*t676*t733;
  t778 = t635*t764;
  t815 = t773 + t778;
  t43 = 0.049*t21;
  t132 = t21*t130;
  t146 = -0.09*t141;
  t207 = -1.*t199*t141;
  t525 = t447*t523;
  t634 = t611*t628;
  t735 = t687*t733;
  t770 = t745*t764;
  t834 = -1.11344*t815;
  t842 = t635*t733;
  t845 = t676*t764;
  t846 = t842 + t845;
  t878 = -0.02159*t846;
  t879 = t43 + t132 + t146 + t207 + t525 + t634 + t735 + t770 + t834 + t878;
  t894 = 0.09*t21;
  t899 = t21*t199;
  t901 = 0.049*t141;
  t914 = t130*t141;
  t938 = t611*t931;
  t939 = t447*t628;
  t981 = t745*t974;
  t1069 = t687*t1044;
  t1074 = t676*t974;
  t1080 = t635*t1044;
  t1086 = t1074 + t1080;
  t1093 = -0.02159*t1086;
  t1112 = t635*t974;
  t1115 = -1.*t676*t1044;
  t1126 = t1112 + t1115;
  t1151 = -1.11344*t1126;
  t1152 = t894 + t899 + t901 + t914 + t938 + t939 + t981 + t1069 + t1093 + t1151;
  t1230 = 0.02159*t635;
  t1239 = t1230 + t678;
  t1198 = -1.11344*t635;
  t1209 = -0.02159*t676;
  t1220 = t1198 + t1209;
  t1426 = -1.*t46*t21;
  t1427 = t126*t141;
  t1439 = t1426 + t1427;
  t1453 = -1.*t356*t523;
  t1457 = t313*t1439;
  t1462 = t1453 + t1457;
  t1478 = t356*t1439;
  t1502 = t762 + t1478;
  t892 = Power(t879,2);
  t1158 = Power(t1152,2);
  t1175 = 0.00002025 + t892 + t1158;
  t1190 = Power(t1175,-1.5);
  t1407 = 2.*t879*t1152;
  t1409 = -0.09*t21;
  t1419 = -1.*t21*t199;
  t1421 = -0.049*t141;
  t1422 = -1.*t130*t141;
  t1423 = t611*t523;
  t1445 = t447*t1439;
  t1474 = t745*t1462;
  t1532 = t687*t1502;
  t1547 = t676*t1462;
  t1552 = t635*t1502;
  t1569 = t1547 + t1552;
  t1580 = -0.02159*t1569;
  t1586 = t635*t1462;
  t1592 = -1.*t676*t1502;
  t1596 = t1586 + t1592;
  t1597 = -1.11344*t1596;
  t1598 = t1409 + t1419 + t1421 + t1422 + t1423 + t1445 + t1474 + t1532 + t1580 + t1597;
  t1603 = 2.*t879*t1598;
  t1608 = t1407 + t1603;
  t1723 = t356*t931;
  t1760 = t1723 + t1457;
  t1799 = -1.*t356*t1439;
  t1800 = t993 + t1799;
  t1651 = 1/Sqrt(t1175);
  t1221 = t1220*t733;
  t1242 = t1239*t764;
  t1255 = -0.02159*t815;
  t1260 = -1.*t635*t733;
  t1263 = -1.*t676*t764;
  t1277 = t1260 + t1263;
  t1288 = -1.11344*t1277;
  t1307 = t1221 + t1242 + t1255 + t1288;
  t1312 = t1239*t974;
  t1313 = t1220*t1044;
  t1321 = -1.*t676*t974;
  t1336 = -1.*t635*t1044;
  t1360 = t1321 + t1336;
  t1370 = -1.11344*t1360;
  t1372 = -0.02159*t1126;
  t1374 = t1312 + t1313 + t1370 + t1372;
  t2037 = t762 + t993;
  t2042 = t721 + t1723;
  t1994 = -0.21*t46;
  t2002 = -0.049*t126;
  t2003 = t1994 + t2002;
  t1991 = 0.049*t46;
  t1992 = t1991 + t129;
  t2025 = 0.01841*t313;
  t2029 = 0.70544*t356;
  t2034 = t2025 + t2029;
  t2013 = 0.70544*t313;
  t2017 = t2013 + t376;
  t2081 = t732 + t1457;
  t2095 = t1040 + t1478;
  t1993 = t21*t1992;
  t2009 = t2003*t141;
  t2020 = t2017*t931;
  t2035 = t2034*t628;
  t2041 = t745*t2037;
  t2043 = t687*t2042;
  t2045 = t676*t2037;
  t2054 = t635*t2042;
  t2059 = t2045 + t2054;
  t2062 = -0.02159*t2059;
  t2066 = t635*t2037;
  t2067 = -1.*t676*t2042;
  t2069 = t2066 + t2067;
  t2070 = -1.11344*t2069;
  t2071 = t1993 + t2009 + t525 + t2020 + t634 + t2035 + t2041 + t2043 + t2062 + t2070;
  t1699 = t447*t931;
  t1709 = t611*t1439;
  t2073 = t21*t2003;
  t2077 = -1.*t1992*t141;
  t2078 = t2034*t523;
  t2079 = t2017*t628;
  t2089 = t745*t2081;
  t2096 = t687*t2095;
  t2100 = t676*t2081;
  t2103 = t635*t2095;
  t2105 = t2100 + t2103;
  t2108 = -0.02159*t2105;
  t2109 = t635*t2081;
  t2111 = -1.*t676*t2095;
  t2113 = t2109 + t2111;
  t2115 = -1.11344*t2113;
  t2117 = t2073 + t2077 + t1423 + t2078 + t2079 + t1445 + t2089 + t2096 + t2108 + t2115;
  t1655 = -0.049*t21;
  t1666 = -1.*t21*t130;
  t1671 = 0.09*t141;
  t1684 = t199*t141;
  t2168 = -1.*t1220*t733;
  t2175 = -1.*t1239*t764;
  t2178 = 0.02159*t815;
  t2179 = 1.11344*t1277;
  t2180 = t2168 + t2175 + t2178 + t2179;
  t2181 = -1.*t447*t523;
  t2186 = -1.*t611*t628;
  t2188 = -1.*t687*t733;
  t2190 = -1.*t745*t764;
  t2194 = 1.11344*t815;
  t2195 = 0.02159*t846;
  t2196 = t1655 + t1666 + t1671 + t1684 + t2181 + t2186 + t2188 + t2190 + t2194 + t2195;
  t2200 = Power(t2196,2);
  t2202 = -1.*t611*t931;
  t2204 = -1.*t447*t628;
  t2208 = -1.*t745*t974;
  t2210 = -1.*t687*t1044;
  t2224 = 0.02159*t1086;
  t2228 = 1.11344*t1126;
  t2229 = t1409 + t1419 + t1421 + t1422 + t2202 + t2204 + t2208 + t2210 + t2224 + t2228;
  t2253 = Power(t2229,2);
  t2255 = t2200 + t2253;
  t2256 = 1/t2255;
  t1928 = -1.*t676*t1462;
  t1957 = -1.*t635*t1502;
  t1961 = t1928 + t1957;
  t2266 = -1.*t1239*t974;
  t2267 = -1.*t1220*t1044;
  t2270 = 1.11344*t1360;
  t2271 = 0.02159*t1126;
  t2272 = t2266 + t2267 + t2270 + t2271;
  t2283 = Power(t2255,-2);
  t2284 = 2.*t2196*t2229;
  t2285 = -1.*t611*t523;
  t2289 = -1.*t447*t1439;
  t2290 = -1.*t745*t1462;
  t2293 = -1.*t687*t1502;
  t2294 = 0.02159*t1569;
  t2296 = 1.11344*t1596;
  t2298 = t894 + t899 + t901 + t914 + t2285 + t2289 + t2290 + t2293 + t2294 + t2296;
  t2299 = 2.*t2196*t2298;
  t2302 = t2284 + t2299;
  t1808 = -1.*t676*t1760;
  t1813 = t635*t1800;
  t1818 = t1808 + t1813;
  t1840 = t635*t1760;
  t1853 = t676*t1800;
  t1859 = t1840 + t1853;
  t2311 = -1.*t447*t931;
  t2315 = -1.*t611*t1439;
  t2136 = -1.*t21*t1992;
  t2140 = -1.*t2003*t141;
  t2350 = -1.*t745*t2037;
  t2352 = -1.*t687*t2042;
  t2356 = 0.02159*t2059;
  t2357 = 1.11344*t2069;
  t2403 = -1.*t21*t2003;
  t2404 = t1992*t141;
  t2414 = -1.*t2034*t523;
  t2415 = -1.*t2017*t628;
  t2417 = -1.*t745*t2081;
  t2420 = -1.*t687*t2095;
  t2421 = 0.02159*t2105;
  t2422 = 1.11344*t2113;
  t2425 = t2403 + t2404 + t2285 + t2414 + t2415 + t2289 + t2417 + t2420 + t2421 + t2422;
  t2366 = -1.*t2017*t931;
  t2367 = -1.*t2034*t628;
  t2388 = t2136 + t2140 + t2181 + t2366 + t2186 + t2367 + t2350 + t2352 + t2356 + t2357;
  t1310 = 2.*t1307*t879;
  t1384 = 2.*t1152*t1374;
  t1392 = t1310 + t1384;
  t2072 = 2.*t2071*t1152;
  t2119 = 2.*t879*t2117;
  t2120 = t2072 + t2119;
  t2130 = 2.*t2071*t879;
  t2141 = t2017*t523;
  t2146 = t2034*t1439;
  t2148 = t2136 + t2140 + t2141 + t1699 + t1709 + t2146 + t2041 + t2043 + t2062 + t2070;
  t2152 = 2.*t2148*t879;
  t2153 = 2.*t1152*t2117;
  t2154 = 2.*t1598*t2117;
  t2158 = t2130 + t2152 + t2153 + t2154;
  t2966 = t721 + t1723 + t732 + t1457;
  t2974 = -1.*t313*t523;
  t2977 = -1.*t313*t931;
  t2980 = t2974 + t2977 + t1040 + t1478;
  t2682 = -0.049*t46;
  t2720 = 0.21*t126;
  t2787 = t2682 + t2720;
  t2936 = -0.70544*t313;
  t2946 = 0.01841*t356;
  t2953 = t2936 + t2946;
  t3197 = -1.*t313*t628;
  t3202 = -1.*t313*t1439;
  t3245 = t721 + t1723 + t3197 + t3202;
  t3260 = t762 + t993 + t1040 + t1478;
  t2479 = -1.*t676*t2037;
  t2488 = -1.*t635*t2042;
  t2499 = t2479 + t2488;
  t2519 = -1.*t676*t2081;
  t2529 = -1.*t635*t2095;
  t2531 = t2519 + t2529;
  t3889 = 2.*t2388*t2229;
  t3894 = 2.*t2196*t2425;
  t3915 = t3889 + t3894;
  t2345 = -1.*t2017*t523;
  t2349 = -1.*t2034*t1439;
  t2358 = t1993 + t2009 + t2345 + t2311 + t2315 + t2349 + t2350 + t2352 + t2356 + t2357;
  t2362 = t2358*t2229*t2256;
  t2426 = t879*t2425*t2256;
  t2993 = t676*t2966;
  t3003 = t635*t2980;
  t3051 = t2993 + t3003;
  t3081 = t635*t2966;
  t3088 = -1.*t676*t2980;
  t3090 = t3081 + t3088;
  t3299 = -1.*t676*t3245;
  t3328 = t635*t3260;
  t3366 = t3299 + t3328;
  t3373 = t635*t3245;
  t3379 = t676*t3260;
  t3418 = t3373 + t3379;
  t5155 = -0.02159*t635;
  t5165 = 1.11344*t676;
  t5166 = t5155 + t5165;
  t1912 = 2.*t1307*t1152;
  t1916 = 2.*t879*t1374;
  t1921 = 2.*t1307*t1598;
  t1923 = t1239*t1462;
  t1927 = t1220*t1502;
  t1970 = -1.11344*t1961;
  t1971 = -0.02159*t1596;
  t1972 = t1923 + t1927 + t1970 + t1971;
  t1977 = 2.*t879*t1972;
  t1978 = t1912 + t1916 + t1921 + t1977;
  t2472 = t1239*t2037;
  t2473 = t1220*t2042;
  t2503 = -1.11344*t2499;
  t2504 = -0.02159*t2069;
  t2506 = t2472 + t2473 + t2503 + t2504;
  t2508 = 2.*t2506*t1152;
  t2512 = 2.*t2071*t1374;
  t2513 = 2.*t1307*t2117;
  t2514 = t1239*t2081;
  t2517 = t1220*t2095;
  t2547 = -1.11344*t2531;
  t2558 = -0.02159*t2113;
  t2573 = t2514 + t2517 + t2547 + t2558;
  t2574 = 2.*t879*t2573;
  t2576 = t2508 + t2512 + t2513 + t2574;
  t5827 = 2.*t2180*t2196;
  t5836 = 2.*t2272*t2229;
  t5855 = t5827 + t5836;
  t5217 = t676*t733;
  t5220 = -1.*t635*t764;
  t5263 = t5217 + t5220;
  t5528 = -1.*t635*t974;
  t5552 = t676*t1044;
  t5566 = t5528 + t5552;
  t2263 = t2180*t879*t2256;
  t2275 = -1.*t1239*t1462;
  t2276 = -1.*t1220*t1502;
  t2277 = 1.11344*t1961;
  t2279 = 0.02159*t1596;
  t2280 = t2275 + t2276 + t2277 + t2279;
  t2281 = t2229*t2280*t2256;
  t3515 = -1.*t1239*t2037;
  t3516 = -1.*t1220*t2042;
  t3520 = 1.11344*t2499;
  t3563 = 0.02159*t2069;
  t3571 = t3515 + t3516 + t3520 + t3563;
  t3606 = t3571*t879*t2256;
  t3727 = -1.*t1239*t2081;
  t3764 = -1.*t1220*t2095;
  t3842 = 1.11344*t2531;
  t3848 = 0.02159*t2113;
  t3868 = t3727 + t3764 + t3842 + t3848;
  t3877 = t2229*t3868*t2256;
  t6486 = Cos(var1[16]);
  t6569 = Sin(var1[16]);
  t6661 = Cos(var1[17]);
  t6664 = -1.*t6661;
  t6666 = 1. + t6664;
  t6691 = Sin(var1[17]);
  t7004 = -1.*var1[17];
  t7067 = 0.226893 + t7004;
  t7151 = Cos(t7067);
  t7190 = -1.*t7151;
  t7219 = 1. + t7190;
  t7379 = Sin(t7067);
  t7484 = -1.*t6661*t6569;
  t7504 = -1.*t6486*t6691;
  t7520 = t7484 + t7504;
  t7568 = t6486*t6661;
  t7579 = -1.*t6569*t6691;
  t7606 = t7568 + t7579;
  t7670 = Cos(var1[21]);
  t7675 = -1.*t7670;
  t7677 = 1. + t7675;
  t7679 = Sin(var1[21]);
  t7719 = t7151*t7520;
  t7726 = -1.*t7379*t7606;
  t7736 = t7719 + t7726;
  t7643 = t7379*t7520;
  t7663 = t7151*t7606;
  t7667 = t7643 + t7663;
  t6671 = -0.049*t6666;
  t6728 = -0.21*t6691;
  t6766 = t6671 + t6728;
  t6781 = -0.21*t6666;
  t6826 = 0.049*t6691;
  t6841 = t6781 + t6826;
  t7537 = 0.01841*t7219;
  t7550 = -0.70544*t7379;
  t7553 = t7537 + t7550;
  t7376 = -0.70544*t7219;
  t7403 = -0.01841*t7379;
  t7468 = t7376 + t7403;
  t7826 = t6661*t6569;
  t7836 = t6486*t6691;
  t7849 = t7826 + t7836;
  t7678 = -0.02159*t7677;
  t7680 = -1.11344*t7679;
  t7681 = t7678 + t7680;
  t7738 = -1.11344*t7677;
  t7740 = 0.02159*t7679;
  t7741 = t7738 + t7740;
  t7853 = t7151*t7849;
  t7854 = t7379*t7606;
  t7855 = t7853 + t7854;
  t7858 = -1.*t7379*t7849;
  t7859 = t7858 + t7663;
  t7770 = t7670*t7736;
  t7772 = -1.*t7667*t7679;
  t7774 = t7770 + t7772;
  t6503 = 0.049*t6486;
  t6624 = -0.09*t6569;
  t6776 = t6486*t6766;
  t6930 = -1.*t6569*t6841;
  t7521 = t7468*t7520;
  t7642 = t7553*t7606;
  t7682 = t7667*t7681;
  t7769 = t7736*t7741;
  t7776 = -1.11344*t7774;
  t7784 = t7670*t7667;
  t7788 = t7736*t7679;
  t7791 = t7784 + t7788;
  t7795 = -0.02159*t7791;
  t7796 = t6503 + t6624 + t6776 + t6930 + t7521 + t7642 + t7682 + t7769 + t7776 + t7795;
  t7807 = 0.09*t6486;
  t7808 = 0.049*t6569;
  t7810 = t6569*t6766;
  t7824 = t6486*t6841;
  t7850 = t7553*t7849;
  t7852 = t7468*t7606;
  t7856 = t7855*t7681;
  t7861 = t7859*t7741;
  t7863 = t7670*t7855;
  t7864 = t7859*t7679;
  t7865 = t7863 + t7864;
  t7873 = -0.02159*t7865;
  t7881 = t7670*t7859;
  t7893 = -1.*t7855*t7679;
  t7903 = t7881 + t7893;
  t7904 = -1.11344*t7903;
  t7920 = t7807 + t7808 + t7810 + t7824 + t7850 + t7852 + t7856 + t7861 + t7873 + t7904;
  t7942 = 0.02159*t7670;
  t7944 = t7942 + t7680;
  t7957 = -1.11344*t7670;
  t7962 = -0.02159*t7679;
  t7963 = t7957 + t7962;
  t8051 = -1.*t6486*t6661;
  t8054 = t6569*t6691;
  t8060 = t8051 + t8054;
  t8066 = t7379*t8060;
  t8069 = t7719 + t8066;
  t8073 = -1.*t7379*t7520;
  t8075 = t7151*t8060;
  t8076 = t8073 + t8075;
  t7803 = Power(t7796,2);
  t7922 = Power(t7920,2);
  t7933 = 0.00002025 + t7803 + t7922;
  t7934 = Power(t7933,-1.5);
  t8039 = 2.*t7796*t7920;
  t8040 = -0.09*t6486;
  t8041 = -0.049*t6569;
  t8043 = -1.*t6569*t6766;
  t8046 = -1.*t6486*t6841;
  t8048 = t7553*t7520;
  t8061 = t7468*t8060;
  t8072 = t8069*t7681;
  t8077 = t8076*t7741;
  t8078 = t7670*t8069;
  t8080 = t8076*t7679;
  t8081 = t8078 + t8080;
  t8083 = -0.02159*t8081;
  t8084 = t7670*t8076;
  t8085 = -1.*t8069*t7679;
  t8087 = t8084 + t8085;
  t8088 = -1.11344*t8087;
  t8128 = t8040 + t8041 + t8043 + t8046 + t8048 + t8061 + t8072 + t8077 + t8083 + t8088;
  t8137 = 2.*t7796*t8128;
  t8160 = t8039 + t8137;
  t8232 = -1.*t7379*t8060;
  t8234 = t7853 + t8232;
  t8214 = t7379*t7849;
  t8222 = t8214 + t8075;
  t8175 = 1/Sqrt(t7933);
  t7945 = t7736*t7944;
  t7964 = t7667*t7963;
  t7973 = -0.02159*t7774;
  t7974 = -1.*t7670*t7667;
  t7975 = -1.*t7736*t7679;
  t7986 = t7974 + t7975;
  t7988 = -1.11344*t7986;
  t8000 = t7945 + t7964 + t7973 + t7988;
  t8002 = t7859*t7944;
  t8003 = t7855*t7963;
  t8008 = -1.*t7670*t7855;
  t8010 = -1.*t7859*t7679;
  t8015 = t8008 + t8010;
  t8021 = -1.11344*t8015;
  t8023 = -0.02159*t7903;
  t8025 = t8002 + t8003 + t8021 + t8023;
  t8392 = t7643 + t8214;
  t8398 = t7719 + t7853;
  t8367 = 0.049*t6661;
  t8368 = t8367 + t6728;
  t8374 = -0.21*t6661;
  t8375 = -0.049*t6691;
  t8378 = t8374 + t8375;
  t8384 = 0.01841*t7151;
  t8385 = 0.70544*t7379;
  t8387 = t8384 + t8385;
  t8381 = 0.70544*t7151;
  t8382 = t8381 + t7403;
  t8464 = t7854 + t8066;
  t8468 = t7663 + t8075;
  t8373 = t6486*t8368;
  t8379 = t6569*t8378;
  t8383 = t8382*t7849;
  t8390 = t8387*t7606;
  t8394 = t8392*t7681;
  t8411 = t8398*t7741;
  t8414 = t7670*t8392;
  t8419 = t8398*t7679;
  t8420 = t8414 + t8419;
  t8429 = -0.02159*t8420;
  t8437 = t7670*t8398;
  t8439 = -1.*t8392*t7679;
  t8440 = t8437 + t8439;
  t8441 = -1.11344*t8440;
  t8445 = t8373 + t8379 + t7521 + t8383 + t7642 + t8390 + t8394 + t8411 + t8429 + t8441;
  t8205 = t7468*t7849;
  t8213 = t7553*t8060;
  t8454 = -1.*t6569*t8368;
  t8455 = t6486*t8378;
  t8459 = t8387*t7520;
  t8463 = t8382*t7606;
  t8465 = t8464*t7681;
  t8476 = t8468*t7741;
  t8481 = t7670*t8464;
  t8485 = t8468*t7679;
  t8486 = t8481 + t8485;
  t8498 = -0.02159*t8486;
  t8499 = t7670*t8468;
  t8501 = -1.*t8464*t7679;
  t8509 = t8499 + t8501;
  t8523 = -1.11344*t8509;
  t8529 = t8454 + t8455 + t8048 + t8459 + t8463 + t8061 + t8465 + t8476 + t8498 + t8523;
  t8001 = 2.*t8000*t7796;
  t8029 = 2.*t7920*t8025;
  t8038 = t8001 + t8029;
  t8449 = 2.*t8445*t7920;
  t8538 = 2.*t7796*t8529;
  t8539 = t8449 + t8538;
  t8548 = 2.*t8445*t7796;
  t8549 = -1.*t6486*t8368;
  t8551 = -1.*t6569*t8378;
  t8560 = t8382*t7520;
  t8567 = t8387*t8060;
  t8585 = t8549 + t8551 + t8560 + t8205 + t8213 + t8567 + t8394 + t8411 + t8429 + t8441;
  t8588 = 2.*t8585*t7796;
  t8589 = 2.*t7920*t8529;
  t8590 = 2.*t8128*t8529;
  t8591 = t8548 + t8588 + t8589 + t8590;
  t8728 = -1.*t7151*t7520;
  t8729 = -1.*t7151*t7849;
  t8732 = t8728 + t8729 + t7854 + t8066;
  t8739 = t7643 + t8214 + t7663 + t8075;
  t8688 = -0.049*t6661;
  t8691 = 0.21*t6691;
  t8694 = t8688 + t8691;
  t8714 = -0.70544*t7151;
  t8717 = 0.01841*t7379;
  t8722 = t8714 + t8717;
  t8783 = t7719 + t7853 + t7854 + t8066;
  t8774 = -1.*t7151*t7606;
  t8776 = -1.*t7151*t8060;
  t8777 = t7643 + t8214 + t8774 + t8776;
  t8832 = -0.02159*t7670;
  t8833 = 1.11344*t7679;
  t8836 = t8832 + t8833;
  t8319 = 2.*t8000*t7920;
  t8321 = 2.*t7796*t8025;
  t8323 = 2.*t8000*t8128;
  t8326 = t8076*t7944;
  t8328 = t8069*t7963;
  t8331 = -1.*t7670*t8069;
  t8334 = -1.*t8076*t7679;
  t8343 = t8331 + t8334;
  t8344 = -1.11344*t8343;
  t8346 = -0.02159*t8087;
  t8349 = t8326 + t8328 + t8344 + t8346;
  t8354 = 2.*t7796*t8349;
  t8362 = t8319 + t8321 + t8323 + t8354;
  t8605 = t8398*t7944;
  t8606 = t8392*t7963;
  t8607 = -1.*t7670*t8392;
  t8610 = -1.*t8398*t7679;
  t8612 = t8607 + t8610;
  t8614 = -1.11344*t8612;
  t8623 = -0.02159*t8440;
  t8632 = t8605 + t8606 + t8614 + t8623;
  t8633 = 2.*t8632*t7920;
  t8634 = 2.*t8445*t8025;
  t8644 = 2.*t8000*t8529;
  t8645 = t8468*t7944;
  t8646 = t8464*t7963;
  t8647 = -1.*t7670*t8464;
  t8648 = -1.*t8468*t7679;
  t8650 = t8647 + t8648;
  t8653 = -1.11344*t8650;
  t8654 = -0.02159*t8509;
  t8659 = t8645 + t8646 + t8653 + t8654;
  t8661 = 2.*t7796*t8659;
  t8662 = t8633 + t8634 + t8644 + t8661;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=-0.25*t1190*Power(t1608,2)*var2[8] + 0.5*t1651*(2.*t1152*t1598 + 2.*Power(t1598,2) + 2.*(t1655 + t1666 + t1671 + t1684 + t1699 + t1709 - 1.11344*t1818 - 0.02159*t1859 + t1760*t687 + t1800*t745)*t879 + 2.*t892)*var2[8] - 0.25*t1190*t1608*t2120*var2[9] + 0.5*t1651*t2158*var2[9] - 0.25*t1190*t1392*t1608*var2[13] + 0.5*t1651*t1978*var2[13];
  p_output1[77]=(t1598*t2196*t2256 + t2196*t2256*t2298 - 1.*t2229*t2283*t2298*t2302 + t2229*t2256*(t132 + t146 + 1.11344*t1818 + 0.02159*t1859 + t207 + t2311 + t2315 + t43 - 1.*t1760*t687 - 1.*t1800*t745) + t2256*t2298*t879 - 1.*t2196*t2283*t2302*t879)*var2[8] + (t2362 + t1598*t2256*t2388 + t2196*t2256*t2425 - 1.*t2229*t2283*t2302*t2425 + t2426 - 1.*t2283*t2302*t2388*t879)*var2[9] + (t2180*t2196*t2256 + t2263 + t1598*t2256*t2272 + t2281 - 1.*t2180*t2229*t2283*t2302 - 1.*t2272*t2283*t2302*t879)*var2[13];
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=-0.25*t1190*t1608*t2120*var2[8] + 0.5*t1651*t2158*var2[8] - 0.25*t1190*Power(t2120,2)*var2[9] + 0.5*t1651*(2.*Power(t2071,2) + 2.*Power(t2117,2) + 2.*(t1699 + t1709 + 2.*t1439*t2034 + t2035 + t2140 + t21*t2787 - 1.11344*t3366 - 0.02159*t3418 + 2.*t2017*t523 + t2953*t523 + t3245*t687 + t3260*t745)*t879 + 2.*t1152*(t1423 + t1445 + t2073 + t141*t2787 - 0.02159*t3051 - 1.11344*t3090 + 2.*t2034*t523 + 2.*t2017*t628 + t2953*t628 + t2980*t687 + t2966*t745 + t2034*t931))*var2[9] - 0.25*t1190*t1392*t2120*var2[13] + 0.5*t1651*t2576*var2[13];
  p_output1[86]=(t2117*t2196*t2256 + t2362 + t2256*t2298*t2388 + t2426 - 1.*t2229*t2283*t2298*t3915 - 1.*t2196*t2283*t3915*t879)*var2[8] + (t2117*t2256*t2388 + t2256*t2388*t2425 - 1.*t2229*t2283*t2425*t3915 + t2229*t2256*(t2009 - 2.*t1439*t2034 + t2311 + t2315 + t2367 - 1.*t21*t2787 + 1.11344*t3366 + 0.02159*t3418 - 2.*t2017*t523 - 1.*t2953*t523 - 1.*t3245*t687 - 1.*t3260*t745) - 1.*t2283*t2388*t3915*t879 + t2256*t879*(t2285 + t2289 + t2403 - 1.*t141*t2787 + 0.02159*t3051 + 1.11344*t3090 - 2.*t2034*t523 - 2.*t2017*t628 - 1.*t2953*t628 - 1.*t2980*t687 - 1.*t2966*t745 - 1.*t2034*t931))*var2[9] + (t2117*t2256*t2272 + t2180*t2256*t2388 + t3606 + t3877 - 1.*t2180*t2229*t2283*t3915 - 1.*t2272*t2283*t3915*t879)*var2[13];
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=-0.25*t1190*t1392*t1608*var2[8] + 0.5*t1651*t1978*var2[8] - 0.25*t1190*t1392*t2120*var2[9] + 0.5*t1651*t2576*var2[9] - 0.25*t1190*Power(t1392,2)*var2[13] + 0.5*t1651*(2.*Power(t1307,2) + 2.*Power(t1374,2) + 2.*(-0.02159*t1277 - 1.11344*t5263 + t5166*t733 + t1220*t764)*t879 + 2.*t1152*(-0.02159*t1360 + t1044*t5166 - 1.11344*t5566 + t1220*t974))*var2[13];
  p_output1[122]=(t1307*t2196*t2256 + t2263 + t2281 + t2256*t2272*t2298 - 1.*t2229*t2283*t2298*t5855 - 1.*t2196*t2283*t5855*t879)*var2[8] + (t1307*t2256*t2388 + t2256*t2272*t2425 + t3606 + t3877 - 1.*t2229*t2283*t2425*t5855 - 1.*t2283*t2388*t5855*t879)*var2[9] + (t1307*t2256*t2272 + t2180*t2256*t2272 - 1.*t2180*t2229*t2283*t5855 + t2229*t2256*(0.02159*t1277 + 1.11344*t5263 - 1.*t5166*t733 - 1.*t1220*t764) - 1.*t2272*t2283*t5855*t879 + t2256*t879*(0.02159*t1360 - 1.*t1044*t5166 + 1.11344*t5566 - 1.*t1220*t974))*var2[13];
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=-0.25*t7934*Power(t8160,2)*var2[16] + 0.5*t8175*(2.*t7803 + 2.*t7920*t8128 + 2.*Power(t8128,2) + 2.*t7796*(-0.049*t6486 + 0.09*t6569 - 1.*t6486*t6766 + t6569*t6841 + t8205 + t8213 + t7681*t8222 + t7741*t8234 - 1.11344*(-1.*t7679*t8222 + t7670*t8234) - 0.02159*(t7670*t8222 + t7679*t8234)))*var2[16] - 0.25*t7934*t8160*t8539*var2[17] + 0.5*t8175*t8591*var2[17] - 0.25*t7934*t8038*t8160*var2[21] + 0.5*t8175*t8362*var2[21];
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=-0.25*t7934*t8160*t8539*var2[16] + 0.5*t8175*t8591*var2[16] - 0.25*t7934*Power(t8539,2)*var2[17] + 0.5*t8175*(2.*Power(t8445,2) + 2.*Power(t8529,2) + 2.*t7920*(t8048 + t8061 + 2.*t7606*t8382 + 2.*t7520*t8387 + t7849*t8387 + t8455 + t6569*t8694 + t7606*t8722 + t7681*t8732 + t7741*t8739 - 1.11344*(-1.*t7679*t8732 + t7670*t8739) - 0.02159*(t7670*t8732 + t7679*t8739)) + 2.*t7796*(t8205 + t8213 + 2.*t7520*t8382 + 2.*t8060*t8387 + t8390 + t8551 + t6486*t8694 + t7520*t8722 + t7681*t8777 + t7741*t8783 - 1.11344*(-1.*t7679*t8777 + t7670*t8783) - 0.02159*(t7670*t8777 + t7679*t8783)))*var2[17] - 0.25*t7934*t8038*t8539*var2[21] + 0.5*t8175*t8662*var2[21];
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=-0.25*t7934*t8038*t8160*var2[16] + 0.5*t8175*t8362*var2[16] - 0.25*t7934*t8038*t8539*var2[17] + 0.5*t8175*t8662*var2[17] - 0.25*t7934*Power(t8038,2)*var2[21] + 0.5*t8175*(2.*Power(t8000,2) + 2.*Power(t8025,2) + 2.*t7796*(-1.11344*(t7667*t7679 - 1.*t7670*t7736) + t7736*t7963 - 0.02159*t7986 + t7667*t8836) + 2.*t7920*(-1.11344*(t7679*t7855 - 1.*t7670*t7859) + t7859*t7963 - 0.02159*t8015 + t7855*t8836))*var2[21];
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=1.;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=1.;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=1.;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=1.;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0.5*t1608*t1651;
  p_output1[275]=t2229*t2256*t2298 + t2196*t2256*t879;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0.5*t1651*t2120;
  p_output1[284]=t2229*t2256*t2425 + t2256*t2388*t879;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0.5*t1392*t1651;
  p_output1[320]=t2180*t2229*t2256 + t2256*t2272*t879;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=-1.;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=1.;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0.5*t8160*t8175;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0.5*t8175*t8539;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0.5*t8038*t8175;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 44, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void DLfya_RightStanceActual_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




