/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:55 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "DLfya_RightStanceActual.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t9;
  double t17;
  double t22;
  double t25;
  double t27;
  double t40;
  double t92;
  double t94;
  double t99;
  double t101;
  double t105;
  double t111;
  double t137;
  double t139;
  double t144;
  double t154;
  double t159;
  double t165;
  double t182;
  double t183;
  double t184;
  double t189;
  double t193;
  double t206;
  double t212;
  double t227;
  double t228;
  double t229;
  double t60;
  double t69;
  double t72;
  double t26;
  double t30;
  double t35;
  double t150;
  double t152;
  double t153;
  double t108;
  double t113;
  double t131;
  double t221;
  double t222;
  double t224;
  double t274;
  double t276;
  double t278;
  double t188;
  double t190;
  double t191;
  double t288;
  double t290;
  double t292;
  double t301;
  double t303;
  double t232;
  double t238;
  double t240;
  double t10;
  double t37;
  double t56;
  double t81;
  double t145;
  double t177;
  double t217;
  double t230;
  double t243;
  double t250;
  double t252;
  double t255;
  double t257;
  double t259;
  double t269;
  double t270;
  double t272;
  double t273;
  double t280;
  double t281;
  double t291;
  double t306;
  double t309;
  double t315;
  double t318;
  double t323;
  double t324;
  double t325;
  double t328;
  double t331;
  double t332;
  double t374;
  double t375;
  double t353;
  double t355;
  double t365;
  double t458;
  double t461;
  double t462;
  double t468;
  double t473;
  double t474;
  double t477;
  double t488;
  double t261;
  double t338;
  double t349;
  double t352;
  double t443;
  double t449;
  double t450;
  double t452;
  double t455;
  double t456;
  double t463;
  double t475;
  double t489;
  double t492;
  double t508;
  double t513;
  double t523;
  double t546;
  double t554;
  double t556;
  double t565;
  double t569;
  double t570;
  double t577;
  double t623;
  double t624;
  double t643;
  double t644;
  double t596;
  double t372;
  double t376;
  double t379;
  double t382;
  double t386;
  double t389;
  double t392;
  double t394;
  double t398;
  double t407;
  double t408;
  double t409;
  double t413;
  double t417;
  double t418;
  double t421;
  double t1173;
  double t1244;
  double t880;
  double t959;
  double t1010;
  double t860;
  double t869;
  double t1098;
  double t1104;
  double t1111;
  double t1045;
  double t1054;
  double t1402;
  double t1417;
  double t876;
  double t1033;
  double t1088;
  double t1138;
  double t1211;
  double t1245;
  double t1273;
  double t1274;
  double t1278;
  double t1317;
  double t1319;
  double t1324;
  double t1326;
  double t1341;
  double t1357;
  double t620;
  double t622;
  double t1377;
  double t1392;
  double t1400;
  double t1401;
  double t1409;
  double t1421;
  double t1446;
  double t1447;
  double t1465;
  double t1493;
  double t1497;
  double t1549;
  double t1571;
  double t1595;
  double t1603;
  double t611;
  double t613;
  double t618;
  double t619;
  double t1845;
  double t1852;
  double t1855;
  double t1875;
  double t1877;
  double t1879;
  double t1897;
  double t1922;
  double t1959;
  double t1962;
  double t1992;
  double t1996;
  double t2004;
  double t2007;
  double t2013;
  double t2014;
  double t2038;
  double t2067;
  double t2084;
  double t2136;
  double t2165;
  double t2174;
  double t2223;
  double t713;
  double t742;
  double t759;
  double t2287;
  double t2291;
  double t2351;
  double t2375;
  double t2381;
  double t2496;
  double t2500;
  double t2514;
  double t2525;
  double t2566;
  double t2578;
  double t2629;
  double t2721;
  double t2800;
  double t2801;
  double t2816;
  double t649;
  double t651;
  double t657;
  double t661;
  double t669;
  double t672;
  double t2957;
  double t2962;
  double t1665;
  double t1678;
  double t3225;
  double t3229;
  double t3237;
  double t3300;
  double t3433;
  double t3475;
  double t3481;
  double t3509;
  double t3519;
  double t3530;
  double t3573;
  double t3581;
  double t3583;
  double t3329;
  double t3349;
  double t3351;
  double t396;
  double t426;
  double t442;
  double t1376;
  double t1626;
  double t1634;
  double t1660;
  double t1684;
  double t1698;
  double t1704;
  double t1708;
  double t1719;
  double t1798;
  double t1823;
  double t4459;
  double t4483;
  double t4508;
  double t4513;
  double t4354;
  double t4358;
  double t4370;
  double t4419;
  double t4421;
  double t4424;
  double t4798;
  double t4858;
  double t4868;
  double t4881;
  double t3846;
  double t3851;
  double t3878;
  double t4096;
  double t4101;
  double t4134;
  double t5243;
  double t5264;
  double t5319;
  double t3212;
  double t3218;
  double t3315;
  double t3316;
  double t3591;
  double t4518;
  double t4526;
  double t4530;
  double t4567;
  double t4613;
  double t4615;
  double t4923;
  double t4925;
  double t4931;
  double t4937;
  double t4966;
  double t4986;
  double t5625;
  double t5635;
  double t5637;
  double t695;
  double t697;
  double t701;
  double t708;
  double t712;
  double t760;
  double t761;
  double t768;
  double t769;
  double t771;
  double t3791;
  double t3821;
  double t3889;
  double t3969;
  double t3999;
  double t4008;
  double t4034;
  double t4052;
  double t4061;
  double t4091;
  double t4151;
  double t4168;
  double t4169;
  double t4176;
  double t4177;
  double t5848;
  double t5850;
  double t5851;
  double t5680;
  double t5697;
  double t5726;
  double t5786;
  double t5789;
  double t5802;
  double t2234;
  double t2399;
  double t2403;
  double t2413;
  double t2420;
  double t2447;
  double t2474;
  double t5071;
  double t5076;
  double t5078;
  double t5080;
  double t5112;
  double t5135;
  double t5146;
  double t5149;
  double t5156;
  double t5158;
  double t5168;
  double t5216;
  double t5932;
  double t5986;
  double t6025;
  double t6032;
  double t6046;
  double t6052;
  double t6113;
  double t6116;
  double t6118;
  double t6119;
  double t6120;
  double t6125;
  double t6129;
  double t6131;
  double t6135;
  double t6162;
  double t6163;
  double t6168;
  double t6215;
  double t6220;
  double t6222;
  double t6226;
  double t6247;
  double t6250;
  double t6262;
  double t6178;
  double t6208;
  double t6211;
  double t6051;
  double t6068;
  double t6069;
  double t6086;
  double t6087;
  double t6091;
  double t6137;
  double t6141;
  double t6150;
  double t6124;
  double t6127;
  double t6128;
  double t6338;
  double t6343;
  double t6351;
  double t6225;
  double t6232;
  double t6243;
  double t6264;
  double t6269;
  double t6270;
  double t6355;
  double t6359;
  double t6360;
  double t6379;
  double t6380;
  double t6279;
  double t6280;
  double t6282;
  double t5965;
  double t5993;
  double t6077;
  double t6092;
  double t6136;
  double t6177;
  double t6244;
  double t6277;
  double t6284;
  double t6285;
  double t6288;
  double t6290;
  double t6294;
  double t6295;
  double t6303;
  double t6304;
  double t6318;
  double t6328;
  double t6353;
  double t6354;
  double t6363;
  double t6382;
  double t6385;
  double t6386;
  double t6387;
  double t6392;
  double t6403;
  double t6409;
  double t6410;
  double t6417;
  double t6419;
  double t6455;
  double t6457;
  double t6470;
  double t6474;
  double t6480;
  double t6558;
  double t6564;
  double t6565;
  double t6567;
  double t6569;
  double t6571;
  double t6573;
  double t6574;
  double t6299;
  double t6421;
  double t6429;
  double t6444;
  double t6531;
  double t6536;
  double t6541;
  double t6542;
  double t6556;
  double t6557;
  double t6566;
  double t6570;
  double t6575;
  double t6587;
  double t6588;
  double t6603;
  double t6604;
  double t6607;
  double t6608;
  double t6609;
  double t6617;
  double t6619;
  double t6620;
  double t6622;
  double t6663;
  double t6664;
  double t6660;
  double t6661;
  double t6640;
  double t6463;
  double t6481;
  double t6500;
  double t6505;
  double t6507;
  double t6508;
  double t6511;
  double t6512;
  double t6515;
  double t6516;
  double t6517;
  double t6518;
  double t6519;
  double t6521;
  double t6522;
  double t6523;
  double t6758;
  double t6760;
  double t6735;
  double t6736;
  double t6738;
  double t6739;
  double t6740;
  double t6750;
  double t6751;
  double t6753;
  double t6744;
  double t6745;
  double t6782;
  double t6786;
  double t6737;
  double t6742;
  double t6749;
  double t6754;
  double t6759;
  double t6764;
  double t6765;
  double t6766;
  double t6768;
  double t6769;
  double t6770;
  double t6771;
  double t6772;
  double t6773;
  double t6774;
  double t6655;
  double t6656;
  double t6776;
  double t6778;
  double t6779;
  double t6780;
  double t6783;
  double t6792;
  double t6794;
  double t6797;
  double t6798;
  double t6802;
  double t6803;
  double t6805;
  double t6809;
  double t6810;
  double t6811;
  double t6513;
  double t6524;
  double t6527;
  double t6775;
  double t6812;
  double t6813;
  double t6822;
  double t6824;
  double t6828;
  double t6831;
  double t6832;
  double t6833;
  double t6834;
  double t6840;
  double t6842;
  double t6843;
  double t6916;
  double t6917;
  double t6919;
  double t6921;
  double t6899;
  double t6901;
  double t6902;
  double t6910;
  double t6912;
  double t6914;
  double t6949;
  double t6943;
  double t6945;
  double t6946;
  double t6982;
  double t6988;
  double t6989;
  double t6710;
  double t6717;
  double t6718;
  double t6719;
  double t6722;
  double t6723;
  double t6724;
  double t6725;
  double t6726;
  double t6728;
  double t6729;
  double t6732;
  double t6733;
  double t6859;
  double t6865;
  double t6868;
  double t6869;
  double t6870;
  double t6873;
  double t6874;
  double t6877;
  double t6879;
  double t6880;
  double t6881;
  double t6882;
  double t6883;
  double t6886;
  double t6887;
  double t6888;
  double t6889;
  double t6890;
  double t6891;
  double t6892;
  double t6893;
  t9 = Cos(var1[8]);
  t17 = Cos(var1[9]);
  t22 = -1.*t17;
  t25 = 1. + t22;
  t27 = Sin(var1[9]);
  t40 = Sin(var1[8]);
  t92 = -1.*var1[9];
  t94 = 0.226893 + t92;
  t99 = Cos(t94);
  t101 = -1.*t99;
  t105 = 1. + t101;
  t111 = Sin(t94);
  t137 = -1.*t9*t27;
  t139 = -1.*t17*t40;
  t144 = t137 + t139;
  t154 = t17*t9;
  t159 = -1.*t27*t40;
  t165 = t154 + t159;
  t182 = Cos(var1[13]);
  t183 = -1.*t182;
  t184 = 1. + t183;
  t189 = Sin(var1[13]);
  t193 = t111*t144;
  t206 = t99*t165;
  t212 = t193 + t206;
  t227 = t99*t144;
  t228 = -1.*t111*t165;
  t229 = t227 + t228;
  t60 = -0.21*t25;
  t69 = 0.049*t27;
  t72 = t60 + t69;
  t26 = -0.049*t25;
  t30 = -0.21*t27;
  t35 = t26 + t30;
  t150 = 0.01841*t105;
  t152 = -0.70544*t111;
  t153 = t150 + t152;
  t108 = -0.70544*t105;
  t113 = -0.01841*t111;
  t131 = t108 + t113;
  t221 = -1.11344*t184;
  t222 = 0.02159*t189;
  t224 = t221 + t222;
  t274 = t9*t27;
  t276 = t17*t40;
  t278 = t274 + t276;
  t188 = -0.02159*t184;
  t190 = -1.11344*t189;
  t191 = t188 + t190;
  t288 = -1.*t111*t278;
  t290 = t288 + t206;
  t292 = t99*t278;
  t301 = t111*t165;
  t303 = t292 + t301;
  t232 = -1.*t189*t212;
  t238 = t182*t229;
  t240 = t232 + t238;
  t10 = 0.049*t9;
  t37 = t9*t35;
  t56 = -0.09*t40;
  t81 = -1.*t72*t40;
  t145 = t131*t144;
  t177 = t153*t165;
  t217 = t191*t212;
  t230 = t224*t229;
  t243 = -1.11344*t240;
  t250 = t182*t212;
  t252 = t189*t229;
  t255 = t250 + t252;
  t257 = -0.02159*t255;
  t259 = t10 + t37 + t56 + t81 + t145 + t177 + t217 + t230 + t243 + t257;
  t269 = 0.09*t9;
  t270 = t9*t72;
  t272 = 0.049*t40;
  t273 = t35*t40;
  t280 = t153*t278;
  t281 = t131*t165;
  t291 = t224*t290;
  t306 = t191*t303;
  t309 = t189*t290;
  t315 = t182*t303;
  t318 = t309 + t315;
  t323 = -0.02159*t318;
  t324 = t182*t290;
  t325 = -1.*t189*t303;
  t328 = t324 + t325;
  t331 = -1.11344*t328;
  t332 = t269 + t270 + t272 + t273 + t280 + t281 + t291 + t306 + t323 + t331;
  t374 = 0.02159*t182;
  t375 = t374 + t190;
  t353 = -1.11344*t182;
  t355 = -0.02159*t189;
  t365 = t353 + t355;
  t458 = -1.*t17*t9;
  t461 = t27*t40;
  t462 = t458 + t461;
  t468 = -1.*t111*t144;
  t473 = t99*t462;
  t474 = t468 + t473;
  t477 = t111*t462;
  t488 = t227 + t477;
  t261 = Power(t259,2);
  t338 = Power(t332,2);
  t349 = 0.00002025 + t261 + t338;
  t352 = Power(t349,-1.5);
  t443 = 2.*t259*t332;
  t449 = -0.09*t9;
  t450 = -1.*t9*t72;
  t452 = -0.049*t40;
  t455 = -1.*t35*t40;
  t456 = t153*t144;
  t463 = t131*t462;
  t475 = t224*t474;
  t489 = t191*t488;
  t492 = t189*t474;
  t508 = t182*t488;
  t513 = t492 + t508;
  t523 = -0.02159*t513;
  t546 = t182*t474;
  t554 = -1.*t189*t488;
  t556 = t546 + t554;
  t565 = -1.11344*t556;
  t569 = t449 + t450 + t452 + t455 + t456 + t463 + t475 + t489 + t523 + t565;
  t570 = 2.*t259*t569;
  t577 = t443 + t570;
  t623 = t111*t278;
  t624 = t623 + t473;
  t643 = -1.*t111*t462;
  t644 = t292 + t643;
  t596 = 1/Sqrt(t349);
  t372 = t365*t212;
  t376 = t375*t229;
  t379 = -0.02159*t240;
  t382 = -1.*t182*t212;
  t386 = -1.*t189*t229;
  t389 = t382 + t386;
  t392 = -1.11344*t389;
  t394 = t372 + t376 + t379 + t392;
  t398 = t375*t290;
  t407 = t365*t303;
  t408 = -1.*t189*t290;
  t409 = -1.*t182*t303;
  t413 = t408 + t409;
  t417 = -1.11344*t413;
  t418 = -0.02159*t328;
  t421 = t398 + t407 + t417 + t418;
  t1173 = t227 + t292;
  t1244 = t193 + t623;
  t880 = -0.21*t17;
  t959 = -0.049*t27;
  t1010 = t880 + t959;
  t860 = 0.049*t17;
  t869 = t860 + t30;
  t1098 = 0.01841*t99;
  t1104 = 0.70544*t111;
  t1111 = t1098 + t1104;
  t1045 = 0.70544*t99;
  t1054 = t1045 + t113;
  t1402 = t206 + t473;
  t1417 = t301 + t477;
  t876 = t9*t869;
  t1033 = t1010*t40;
  t1088 = t1054*t278;
  t1138 = t1111*t165;
  t1211 = t224*t1173;
  t1245 = t191*t1244;
  t1273 = t189*t1173;
  t1274 = t182*t1244;
  t1278 = t1273 + t1274;
  t1317 = -0.02159*t1278;
  t1319 = t182*t1173;
  t1324 = -1.*t189*t1244;
  t1326 = t1319 + t1324;
  t1341 = -1.11344*t1326;
  t1357 = t876 + t1033 + t145 + t1088 + t177 + t1138 + t1211 + t1245 + t1317 + t1341;
  t620 = t131*t278;
  t622 = t153*t462;
  t1377 = t9*t1010;
  t1392 = -1.*t869*t40;
  t1400 = t1111*t144;
  t1401 = t1054*t165;
  t1409 = t224*t1402;
  t1421 = t191*t1417;
  t1446 = t189*t1402;
  t1447 = t182*t1417;
  t1465 = t1446 + t1447;
  t1493 = -0.02159*t1465;
  t1497 = t182*t1402;
  t1549 = -1.*t189*t1417;
  t1571 = t1497 + t1549;
  t1595 = -1.11344*t1571;
  t1603 = t1377 + t1392 + t456 + t1400 + t1401 + t463 + t1409 + t1421 + t1493 + t1595;
  t611 = -0.049*t9;
  t613 = -1.*t9*t35;
  t618 = 0.09*t40;
  t619 = t72*t40;
  t1845 = -1.*t365*t212;
  t1852 = -1.*t375*t229;
  t1855 = 0.02159*t240;
  t1875 = 1.11344*t389;
  t1877 = t1845 + t1852 + t1855 + t1875;
  t1879 = -1.*t131*t144;
  t1897 = -1.*t153*t165;
  t1922 = -1.*t191*t212;
  t1959 = -1.*t224*t229;
  t1962 = 1.11344*t240;
  t1992 = 0.02159*t255;
  t1996 = t611 + t613 + t618 + t619 + t1879 + t1897 + t1922 + t1959 + t1962 + t1992;
  t2004 = Power(t1996,2);
  t2007 = -1.*t153*t278;
  t2013 = -1.*t131*t165;
  t2014 = -1.*t224*t290;
  t2038 = -1.*t191*t303;
  t2067 = 0.02159*t318;
  t2084 = 1.11344*t328;
  t2136 = t449 + t450 + t452 + t455 + t2007 + t2013 + t2014 + t2038 + t2067 + t2084;
  t2165 = Power(t2136,2);
  t2174 = t2004 + t2165;
  t2223 = 1/t2174;
  t713 = -1.*t189*t474;
  t742 = -1.*t182*t488;
  t759 = t713 + t742;
  t2287 = -1.*t375*t290;
  t2291 = -1.*t365*t303;
  t2351 = 1.11344*t413;
  t2375 = 0.02159*t328;
  t2381 = t2287 + t2291 + t2351 + t2375;
  t2496 = Power(t2174,-2);
  t2500 = 2.*t1996*t2136;
  t2514 = -1.*t153*t144;
  t2525 = -1.*t131*t462;
  t2566 = -1.*t224*t474;
  t2578 = -1.*t191*t488;
  t2629 = 0.02159*t513;
  t2721 = 1.11344*t556;
  t2800 = t269 + t270 + t272 + t273 + t2514 + t2525 + t2566 + t2578 + t2629 + t2721;
  t2801 = 2.*t1996*t2800;
  t2816 = t2500 + t2801;
  t649 = -1.*t189*t624;
  t651 = t182*t644;
  t657 = t649 + t651;
  t661 = t182*t624;
  t669 = t189*t644;
  t672 = t661 + t669;
  t2957 = -1.*t131*t278;
  t2962 = -1.*t153*t462;
  t1665 = -1.*t9*t869;
  t1678 = -1.*t1010*t40;
  t3225 = -1.*t224*t1173;
  t3229 = -1.*t191*t1244;
  t3237 = 0.02159*t1278;
  t3300 = 1.11344*t1326;
  t3433 = -1.*t9*t1010;
  t3475 = t869*t40;
  t3481 = -1.*t1111*t144;
  t3509 = -1.*t1054*t165;
  t3519 = -1.*t224*t1402;
  t3530 = -1.*t191*t1417;
  t3573 = 0.02159*t1465;
  t3581 = 1.11344*t1571;
  t3583 = t3433 + t3475 + t2514 + t3481 + t3509 + t2525 + t3519 + t3530 + t3573 + t3581;
  t3329 = -1.*t1054*t278;
  t3349 = -1.*t1111*t165;
  t3351 = t1665 + t1678 + t1879 + t3329 + t1897 + t3349 + t3225 + t3229 + t3237 + t3300;
  t396 = 2.*t394*t259;
  t426 = 2.*t332*t421;
  t442 = t396 + t426;
  t1376 = 2.*t1357*t332;
  t1626 = 2.*t259*t1603;
  t1634 = t1376 + t1626;
  t1660 = 2.*t1357*t259;
  t1684 = t1054*t144;
  t1698 = t1111*t462;
  t1704 = t1665 + t1678 + t1684 + t620 + t622 + t1698 + t1211 + t1245 + t1317 + t1341;
  t1708 = 2.*t1704*t259;
  t1719 = 2.*t332*t1603;
  t1798 = 2.*t569*t1603;
  t1823 = t1660 + t1708 + t1719 + t1798;
  t4459 = t193 + t623 + t206 + t473;
  t4483 = -1.*t99*t144;
  t4508 = -1.*t99*t278;
  t4513 = t4483 + t4508 + t301 + t477;
  t4354 = -0.049*t17;
  t4358 = 0.21*t27;
  t4370 = t4354 + t4358;
  t4419 = -0.70544*t99;
  t4421 = 0.01841*t111;
  t4424 = t4419 + t4421;
  t4798 = -1.*t99*t165;
  t4858 = -1.*t99*t462;
  t4868 = t193 + t623 + t4798 + t4858;
  t4881 = t227 + t292 + t301 + t477;
  t3846 = -1.*t189*t1173;
  t3851 = -1.*t182*t1244;
  t3878 = t3846 + t3851;
  t4096 = -1.*t189*t1402;
  t4101 = -1.*t182*t1417;
  t4134 = t4096 + t4101;
  t5243 = 2.*t3351*t2136;
  t5264 = 2.*t1996*t3583;
  t5319 = t5243 + t5264;
  t3212 = -1.*t1054*t144;
  t3218 = -1.*t1111*t462;
  t3315 = t876 + t1033 + t3212 + t2957 + t2962 + t3218 + t3225 + t3229 + t3237 + t3300;
  t3316 = t3315*t2136*t2223;
  t3591 = t259*t3583*t2223;
  t4518 = t189*t4459;
  t4526 = t182*t4513;
  t4530 = t4518 + t4526;
  t4567 = t182*t4459;
  t4613 = -1.*t189*t4513;
  t4615 = t4567 + t4613;
  t4923 = -1.*t189*t4868;
  t4925 = t182*t4881;
  t4931 = t4923 + t4925;
  t4937 = t182*t4868;
  t4966 = t189*t4881;
  t4986 = t4937 + t4966;
  t5625 = -0.02159*t182;
  t5635 = 1.11344*t189;
  t5637 = t5625 + t5635;
  t695 = 2.*t394*t332;
  t697 = 2.*t259*t421;
  t701 = 2.*t394*t569;
  t708 = t375*t474;
  t712 = t365*t488;
  t760 = -1.11344*t759;
  t761 = -0.02159*t556;
  t768 = t708 + t712 + t760 + t761;
  t769 = 2.*t259*t768;
  t771 = t695 + t697 + t701 + t769;
  t3791 = t375*t1173;
  t3821 = t365*t1244;
  t3889 = -1.11344*t3878;
  t3969 = -0.02159*t1326;
  t3999 = t3791 + t3821 + t3889 + t3969;
  t4008 = 2.*t3999*t332;
  t4034 = 2.*t1357*t421;
  t4052 = 2.*t394*t1603;
  t4061 = t375*t1402;
  t4091 = t365*t1417;
  t4151 = -1.11344*t4134;
  t4168 = -0.02159*t1571;
  t4169 = t4061 + t4091 + t4151 + t4168;
  t4176 = 2.*t259*t4169;
  t4177 = t4008 + t4034 + t4052 + t4176;
  t5848 = 2.*t1877*t1996;
  t5850 = 2.*t2381*t2136;
  t5851 = t5848 + t5850;
  t5680 = t189*t212;
  t5697 = -1.*t182*t229;
  t5726 = t5680 + t5697;
  t5786 = -1.*t182*t290;
  t5789 = t189*t303;
  t5802 = t5786 + t5789;
  t2234 = t1877*t259*t2223;
  t2399 = -1.*t375*t474;
  t2403 = -1.*t365*t488;
  t2413 = 1.11344*t759;
  t2420 = 0.02159*t556;
  t2447 = t2399 + t2403 + t2413 + t2420;
  t2474 = t2136*t2447*t2223;
  t5071 = -1.*t375*t1173;
  t5076 = -1.*t365*t1244;
  t5078 = 1.11344*t3878;
  t5080 = 0.02159*t1326;
  t5112 = t5071 + t5076 + t5078 + t5080;
  t5135 = t5112*t259*t2223;
  t5146 = -1.*t375*t1402;
  t5149 = -1.*t365*t1417;
  t5156 = 1.11344*t4134;
  t5158 = 0.02159*t1571;
  t5168 = t5146 + t5149 + t5156 + t5158;
  t5216 = t2136*t5168*t2223;
  t5932 = Cos(var1[16]);
  t5986 = Sin(var1[16]);
  t6025 = Cos(var1[17]);
  t6032 = -1.*t6025;
  t6046 = 1. + t6032;
  t6052 = Sin(var1[17]);
  t6113 = -1.*var1[17];
  t6116 = 0.226893 + t6113;
  t6118 = Cos(t6116);
  t6119 = -1.*t6118;
  t6120 = 1. + t6119;
  t6125 = Sin(t6116);
  t6129 = -1.*t6025*t5986;
  t6131 = -1.*t5932*t6052;
  t6135 = t6129 + t6131;
  t6162 = t5932*t6025;
  t6163 = -1.*t5986*t6052;
  t6168 = t6162 + t6163;
  t6215 = Cos(var1[21]);
  t6220 = -1.*t6215;
  t6222 = 1. + t6220;
  t6226 = Sin(var1[21]);
  t6247 = t6118*t6135;
  t6250 = -1.*t6125*t6168;
  t6262 = t6247 + t6250;
  t6178 = t6125*t6135;
  t6208 = t6118*t6168;
  t6211 = t6178 + t6208;
  t6051 = -0.049*t6046;
  t6068 = -0.21*t6052;
  t6069 = t6051 + t6068;
  t6086 = -0.21*t6046;
  t6087 = 0.049*t6052;
  t6091 = t6086 + t6087;
  t6137 = 0.01841*t6120;
  t6141 = -0.70544*t6125;
  t6150 = t6137 + t6141;
  t6124 = -0.70544*t6120;
  t6127 = -0.01841*t6125;
  t6128 = t6124 + t6127;
  t6338 = t6025*t5986;
  t6343 = t5932*t6052;
  t6351 = t6338 + t6343;
  t6225 = -0.02159*t6222;
  t6232 = -1.11344*t6226;
  t6243 = t6225 + t6232;
  t6264 = -1.11344*t6222;
  t6269 = 0.02159*t6226;
  t6270 = t6264 + t6269;
  t6355 = t6118*t6351;
  t6359 = t6125*t6168;
  t6360 = t6355 + t6359;
  t6379 = -1.*t6125*t6351;
  t6380 = t6379 + t6208;
  t6279 = t6215*t6262;
  t6280 = -1.*t6211*t6226;
  t6282 = t6279 + t6280;
  t5965 = 0.049*t5932;
  t5993 = -0.09*t5986;
  t6077 = t5932*t6069;
  t6092 = -1.*t5986*t6091;
  t6136 = t6128*t6135;
  t6177 = t6150*t6168;
  t6244 = t6211*t6243;
  t6277 = t6262*t6270;
  t6284 = -1.11344*t6282;
  t6285 = t6215*t6211;
  t6288 = t6262*t6226;
  t6290 = t6285 + t6288;
  t6294 = -0.02159*t6290;
  t6295 = t5965 + t5993 + t6077 + t6092 + t6136 + t6177 + t6244 + t6277 + t6284 + t6294;
  t6303 = 0.09*t5932;
  t6304 = 0.049*t5986;
  t6318 = t5986*t6069;
  t6328 = t5932*t6091;
  t6353 = t6150*t6351;
  t6354 = t6128*t6168;
  t6363 = t6360*t6243;
  t6382 = t6380*t6270;
  t6385 = t6215*t6360;
  t6386 = t6380*t6226;
  t6387 = t6385 + t6386;
  t6392 = -0.02159*t6387;
  t6403 = t6215*t6380;
  t6409 = -1.*t6360*t6226;
  t6410 = t6403 + t6409;
  t6417 = -1.11344*t6410;
  t6419 = t6303 + t6304 + t6318 + t6328 + t6353 + t6354 + t6363 + t6382 + t6392 + t6417;
  t6455 = 0.02159*t6215;
  t6457 = t6455 + t6232;
  t6470 = -1.11344*t6215;
  t6474 = -0.02159*t6226;
  t6480 = t6470 + t6474;
  t6558 = -1.*t5932*t6025;
  t6564 = t5986*t6052;
  t6565 = t6558 + t6564;
  t6567 = t6125*t6565;
  t6569 = t6247 + t6567;
  t6571 = -1.*t6125*t6135;
  t6573 = t6118*t6565;
  t6574 = t6571 + t6573;
  t6299 = Power(t6295,2);
  t6421 = Power(t6419,2);
  t6429 = 0.00002025 + t6299 + t6421;
  t6444 = Power(t6429,-1.5);
  t6531 = 2.*t6295*t6419;
  t6536 = -0.09*t5932;
  t6541 = -0.049*t5986;
  t6542 = -1.*t5986*t6069;
  t6556 = -1.*t5932*t6091;
  t6557 = t6150*t6135;
  t6566 = t6128*t6565;
  t6570 = t6569*t6243;
  t6575 = t6574*t6270;
  t6587 = t6215*t6569;
  t6588 = t6574*t6226;
  t6603 = t6587 + t6588;
  t6604 = -0.02159*t6603;
  t6607 = t6215*t6574;
  t6608 = -1.*t6569*t6226;
  t6609 = t6607 + t6608;
  t6617 = -1.11344*t6609;
  t6619 = t6536 + t6541 + t6542 + t6556 + t6557 + t6566 + t6570 + t6575 + t6604 + t6617;
  t6620 = 2.*t6295*t6619;
  t6622 = t6531 + t6620;
  t6663 = -1.*t6125*t6565;
  t6664 = t6355 + t6663;
  t6660 = t6125*t6351;
  t6661 = t6660 + t6573;
  t6640 = 1/Sqrt(t6429);
  t6463 = t6262*t6457;
  t6481 = t6211*t6480;
  t6500 = -0.02159*t6282;
  t6505 = -1.*t6215*t6211;
  t6507 = -1.*t6262*t6226;
  t6508 = t6505 + t6507;
  t6511 = -1.11344*t6508;
  t6512 = t6463 + t6481 + t6500 + t6511;
  t6515 = t6380*t6457;
  t6516 = t6360*t6480;
  t6517 = -1.*t6215*t6360;
  t6518 = -1.*t6380*t6226;
  t6519 = t6517 + t6518;
  t6521 = -1.11344*t6519;
  t6522 = -0.02159*t6410;
  t6523 = t6515 + t6516 + t6521 + t6522;
  t6758 = t6178 + t6660;
  t6760 = t6247 + t6355;
  t6735 = 0.049*t6025;
  t6736 = t6735 + t6068;
  t6738 = -0.21*t6025;
  t6739 = -0.049*t6052;
  t6740 = t6738 + t6739;
  t6750 = 0.01841*t6118;
  t6751 = 0.70544*t6125;
  t6753 = t6750 + t6751;
  t6744 = 0.70544*t6118;
  t6745 = t6744 + t6127;
  t6782 = t6359 + t6567;
  t6786 = t6208 + t6573;
  t6737 = t5932*t6736;
  t6742 = t5986*t6740;
  t6749 = t6745*t6351;
  t6754 = t6753*t6168;
  t6759 = t6758*t6243;
  t6764 = t6760*t6270;
  t6765 = t6215*t6758;
  t6766 = t6760*t6226;
  t6768 = t6765 + t6766;
  t6769 = -0.02159*t6768;
  t6770 = t6215*t6760;
  t6771 = -1.*t6758*t6226;
  t6772 = t6770 + t6771;
  t6773 = -1.11344*t6772;
  t6774 = t6737 + t6742 + t6136 + t6749 + t6177 + t6754 + t6759 + t6764 + t6769 + t6773;
  t6655 = t6128*t6351;
  t6656 = t6150*t6565;
  t6776 = -1.*t5986*t6736;
  t6778 = t5932*t6740;
  t6779 = t6753*t6135;
  t6780 = t6745*t6168;
  t6783 = t6782*t6243;
  t6792 = t6786*t6270;
  t6794 = t6215*t6782;
  t6797 = t6786*t6226;
  t6798 = t6794 + t6797;
  t6802 = -0.02159*t6798;
  t6803 = t6215*t6786;
  t6805 = -1.*t6782*t6226;
  t6809 = t6803 + t6805;
  t6810 = -1.11344*t6809;
  t6811 = t6776 + t6778 + t6557 + t6779 + t6780 + t6566 + t6783 + t6792 + t6802 + t6810;
  t6513 = 2.*t6512*t6295;
  t6524 = 2.*t6419*t6523;
  t6527 = t6513 + t6524;
  t6775 = 2.*t6774*t6419;
  t6812 = 2.*t6295*t6811;
  t6813 = t6775 + t6812;
  t6822 = 2.*t6774*t6295;
  t6824 = -1.*t5932*t6736;
  t6828 = -1.*t5986*t6740;
  t6831 = t6745*t6135;
  t6832 = t6753*t6565;
  t6833 = t6824 + t6828 + t6831 + t6655 + t6656 + t6832 + t6759 + t6764 + t6769 + t6773;
  t6834 = 2.*t6833*t6295;
  t6840 = 2.*t6419*t6811;
  t6842 = 2.*t6619*t6811;
  t6843 = t6822 + t6834 + t6840 + t6842;
  t6916 = -1.*t6118*t6135;
  t6917 = -1.*t6118*t6351;
  t6919 = t6916 + t6917 + t6359 + t6567;
  t6921 = t6178 + t6660 + t6208 + t6573;
  t6899 = -0.049*t6025;
  t6901 = 0.21*t6052;
  t6902 = t6899 + t6901;
  t6910 = -0.70544*t6118;
  t6912 = 0.01841*t6125;
  t6914 = t6910 + t6912;
  t6949 = t6247 + t6355 + t6359 + t6567;
  t6943 = -1.*t6118*t6168;
  t6945 = -1.*t6118*t6565;
  t6946 = t6178 + t6660 + t6943 + t6945;
  t6982 = -0.02159*t6215;
  t6988 = 1.11344*t6226;
  t6989 = t6982 + t6988;
  t6710 = 2.*t6512*t6419;
  t6717 = 2.*t6295*t6523;
  t6718 = 2.*t6512*t6619;
  t6719 = t6574*t6457;
  t6722 = t6569*t6480;
  t6723 = -1.*t6215*t6569;
  t6724 = -1.*t6574*t6226;
  t6725 = t6723 + t6724;
  t6726 = -1.11344*t6725;
  t6728 = -0.02159*t6609;
  t6729 = t6719 + t6722 + t6726 + t6728;
  t6732 = 2.*t6295*t6729;
  t6733 = t6710 + t6717 + t6718 + t6732;
  t6859 = t6760*t6457;
  t6865 = t6758*t6480;
  t6868 = -1.*t6215*t6758;
  t6869 = -1.*t6760*t6226;
  t6870 = t6868 + t6869;
  t6873 = -1.11344*t6870;
  t6874 = -0.02159*t6772;
  t6877 = t6859 + t6865 + t6873 + t6874;
  t6879 = 2.*t6877*t6419;
  t6880 = 2.*t6774*t6523;
  t6881 = 2.*t6512*t6811;
  t6882 = t6786*t6457;
  t6883 = t6782*t6480;
  t6886 = -1.*t6215*t6782;
  t6887 = -1.*t6786*t6226;
  t6888 = t6886 + t6887;
  t6889 = -1.11344*t6888;
  t6890 = -0.02159*t6809;
  t6891 = t6882 + t6883 + t6889 + t6890;
  t6892 = 2.*t6295*t6891;
  t6893 = t6879 + t6880 + t6881 + t6892;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=-0.25*t352*Power(t577,2)*var2[8] + 0.5*t596*(2.*t261 + 2.*t332*t569 + 2.*Power(t569,2) + 2.*t259*(t611 + t613 + t618 + t619 + t620 + t622 + t191*t624 + t224*t644 - 1.11344*t657 - 0.02159*t672))*var2[8] - 0.25*t1634*t352*t577*var2[9] + 0.5*t1823*t596*var2[9] - 0.25*t352*t442*t577*var2[13] + 0.5*t596*t771*var2[13];
  p_output1[77]=(t1996*t2223*t2800 + t2223*t259*t2800 - 1.*t1996*t2496*t259*t2816 - 1.*t2136*t2496*t2800*t2816 + t1996*t2223*t569 + t2136*t2223*(t10 + t2957 + t2962 + t37 + t56 - 1.*t191*t624 - 1.*t224*t644 + 1.11344*t657 + 0.02159*t672 + t81))*var2[8] + (t3316 - 1.*t2496*t259*t2816*t3351 + t1996*t2223*t3583 - 1.*t2136*t2496*t2816*t3583 + t3591 + t2223*t3351*t569)*var2[9] + (t1877*t1996*t2223 + t2234 + t2474 - 1.*t1877*t2136*t2496*t2816 - 1.*t2381*t2496*t259*t2816 + t2223*t2381*t569)*var2[13];
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=-0.25*t1634*t352*t577*var2[8] + 0.5*t1823*t596*var2[8] - 0.25*Power(t1634,2)*t352*var2[9] + 0.5*t596*(2.*Power(t1357,2) + 2.*Power(t1603,2) + 2.*t332*(t1377 + 2.*t1111*t144 + 2.*t1054*t165 + t1111*t278 + t40*t4370 + t165*t4424 + t224*t4459 + t191*t4513 - 0.02159*t4530 + t456 - 1.11344*t4615 + t463) + 2.*t259*(t1138 + 2.*t1054*t144 + t1678 + t144*t4424 + 2.*t1111*t462 + t191*t4868 + t224*t4881 - 1.11344*t4931 - 0.02159*t4986 + t620 + t622 + t4370*t9))*var2[9] - 0.25*t1634*t352*t442*var2[13] + 0.5*t4177*t596*var2[13];
  p_output1[86]=(t1603*t1996*t2223 + t3316 + t2223*t2800*t3351 + t3591 - 1.*t1996*t2496*t259*t5319 - 1.*t2136*t2496*t2800*t5319)*var2[8] + (t1603*t2223*t3351 + t2223*t3351*t3583 + t2223*t259*(-2.*t1111*t144 - 2.*t1054*t165 + t2514 + t2525 - 1.*t1111*t278 + t3433 - 1.*t40*t4370 - 1.*t165*t4424 - 1.*t224*t4459 - 1.*t191*t4513 + 0.02159*t4530 + 1.11344*t4615) - 1.*t2496*t259*t3351*t5319 - 1.*t2136*t2496*t3583*t5319 + t2136*t2223*(t1033 - 2.*t1054*t144 + t2957 + t2962 + t3349 - 1.*t144*t4424 - 2.*t1111*t462 - 1.*t191*t4868 - 1.*t224*t4881 + 1.11344*t4931 + 0.02159*t4986 - 1.*t4370*t9))*var2[9] + (t1603*t2223*t2381 + t1877*t2223*t3351 + t5135 + t5216 - 1.*t1877*t2136*t2496*t5319 - 1.*t2381*t2496*t259*t5319)*var2[13];
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=0;
  p_output1[121]=-0.25*t352*t442*t577*var2[8] + 0.5*t596*t771*var2[8] - 0.25*t1634*t352*t442*var2[9] + 0.5*t4177*t596*var2[9] - 0.25*t352*Power(t442,2)*var2[13] + 0.5*(2.*Power(t394,2) + 2.*Power(t421,2) + 2.*t259*(t229*t365 - 0.02159*t389 + t212*t5637 - 1.11344*t5726) + 2.*t332*(t290*t365 - 0.02159*t413 + t303*t5637 - 1.11344*t5802))*t596*var2[13];
  p_output1[122]=(t2234 + t2474 + t2223*t2381*t2800 + t1996*t2223*t394 - 1.*t1996*t2496*t259*t5851 - 1.*t2136*t2496*t2800*t5851)*var2[8] + (t2223*t2381*t3583 + t2223*t3351*t394 + t5135 + t5216 - 1.*t2496*t259*t3351*t5851 - 1.*t2136*t2496*t3583*t5851)*var2[9] + (t1877*t2223*t2381 + t2223*t2381*t394 + t2136*t2223*(-1.*t229*t365 + 0.02159*t389 - 1.*t212*t5637 + 1.11344*t5726) + t2223*t259*(-1.*t290*t365 + 0.02159*t413 - 1.*t303*t5637 + 1.11344*t5802) - 1.*t1877*t2136*t2496*t5851 - 1.*t2381*t2496*t259*t5851)*var2[13];
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=-0.25*t6444*Power(t6622,2)*var2[16] + 0.5*t6640*(2.*t6299 + 2.*t6419*t6619 + 2.*Power(t6619,2) + 2.*t6295*(-0.049*t5932 + 0.09*t5986 - 1.*t5932*t6069 + t5986*t6091 + t6655 + t6656 + t6243*t6661 + t6270*t6664 - 1.11344*(-1.*t6226*t6661 + t6215*t6664) - 0.02159*(t6215*t6661 + t6226*t6664)))*var2[16] - 0.25*t6444*t6622*t6813*var2[17] + 0.5*t6640*t6843*var2[17] - 0.25*t6444*t6527*t6622*var2[21] + 0.5*t6640*t6733*var2[21];
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=-0.25*t6444*t6622*t6813*var2[16] + 0.5*t6640*t6843*var2[16] - 0.25*t6444*Power(t6813,2)*var2[17] + 0.5*t6640*(2.*Power(t6774,2) + 2.*Power(t6811,2) + 2.*t6419*(t6557 + t6566 + 2.*t6168*t6745 + 2.*t6135*t6753 + t6351*t6753 + t6778 + t5986*t6902 + t6168*t6914 + t6243*t6919 + t6270*t6921 - 1.11344*(-1.*t6226*t6919 + t6215*t6921) - 0.02159*(t6215*t6919 + t6226*t6921)) + 2.*t6295*(t6655 + t6656 + 2.*t6135*t6745 + 2.*t6565*t6753 + t6754 + t6828 + t5932*t6902 + t6135*t6914 + t6243*t6946 + t6270*t6949 - 1.11344*(-1.*t6226*t6946 + t6215*t6949) - 0.02159*(t6215*t6946 + t6226*t6949)))*var2[17] - 0.25*t6444*t6527*t6813*var2[21] + 0.5*t6640*t6893*var2[21];
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=-0.25*t6444*t6527*t6622*var2[16] + 0.5*t6640*t6733*var2[16] - 0.25*t6444*t6527*t6813*var2[17] + 0.5*t6640*t6893*var2[17] - 0.25*t6444*Power(t6527,2)*var2[21] + 0.5*t6640*(2.*Power(t6512,2) + 2.*Power(t6523,2) + 2.*t6295*(-1.11344*(t6211*t6226 - 1.*t6215*t6262) + t6262*t6480 - 0.02159*t6508 + t6211*t6989) + 2.*t6419*(-1.11344*(t6226*t6360 - 1.*t6215*t6380) + t6380*t6480 - 0.02159*t6519 + t6360*t6989))*var2[21];
  p_output1[193]=0;
  p_output1[194]=0;
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=1.;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=1.;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=1.;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=0;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=1.;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0;
  p_output1[274]=0.5*t577*t596;
  p_output1[275]=t1996*t2223*t259 + t2136*t2223*t2800;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0;
  p_output1[283]=0.5*t1634*t596;
  p_output1[284]=t2223*t259*t3351 + t2136*t2223*t3583;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0;
  p_output1[319]=0.5*t442*t596;
  p_output1[320]=t1877*t2136*t2223 + t2223*t2381*t259;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=-1.;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=0;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=1.;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=0;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0.5*t6622*t6640;
  p_output1[346]=0;
  p_output1[347]=0;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0.5*t6640*t6813;
  p_output1[355]=0;
  p_output1[356]=0;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0.5*t6527*t6640;
  p_output1[391]=0;
  p_output1[392]=0;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 44, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void DLfya_RightStanceActual_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




