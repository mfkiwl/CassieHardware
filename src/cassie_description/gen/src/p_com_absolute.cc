/*
 * Automatically Generated from Mathematica.
 * Mon 13 Sep 2021 16:09:06 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "p_com_absolute.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t24;
  double t135;
  double t143;
  double t151;
  double t686;
  double t933;
  double t724;
  double t944;
  double t1032;
  double t1084;
  double t1259;
  double t1318;
  double t1329;
  double t1343;
  double t1091;
  double t1095;
  double t1096;
  double t1103;
  double t1116;
  double t1129;
  double t1333;
  double t1345;
  double t1387;
  double t1388;
  double t1392;
  double t1399;
  double t1400;
  double t1401;
  double t1408;
  double t1446;
  double t1460;
  double t1527;
  double t1530;
  double t1539;
  double t1575;
  double t1476;
  double t1488;
  double t1490;
  double t1572;
  double t1580;
  double t1581;
  double t1586;
  double t1590;
  double t1591;
  double t1601;
  double t1622;
  double t1630;
  double t1633;
  double t1638;
  double t1686;
  double t1689;
  double t1693;
  double t1698;
  double t1648;
  double t1655;
  double t1657;
  double t1694;
  double t1701;
  double t1702;
  double t1707;
  double t1711;
  double t1712;
  double t1713;
  double t1725;
  double t1727;
  double t1740;
  double t1745;
  double t1778;
  double t1779;
  double t1786;
  double t1795;
  double t1748;
  double t1756;
  double t1757;
  double t1791;
  double t1796;
  double t1799;
  double t1802;
  double t1804;
  double t1805;
  double t1806;
  double t1807;
  double t1812;
  double t1820;
  double t1822;
  double t1837;
  double t1839;
  double t1841;
  double t1864;
  double t1825;
  double t1826;
  double t1829;
  double t1927;
  double t1930;
  double t1934;
  double t1953;
  double t1842;
  double t1866;
  double t1868;
  double t1881;
  double t1882;
  double t1886;
  double t1887;
  double t1893;
  double t1970;
  double t1894;
  double t1895;
  double t1897;
  double t1941;
  double t2003;
  double t1901;
  double t1911;
  double t1916;
  double t2021;
  double t2031;
  double t2009;
  double t2053;
  double t2004;
  double t2076;
  double t1971;
  double t2045;
  double t1956;
  double t2144;
  double t2164;
  double t2166;
  double t2183;
  double t600;
  double t2229;
  double t2237;
  double t2230;
  double t2232;
  double t2233;
  double t2243;
  double t2276;
  double t2279;
  double t2280;
  double t2246;
  double t2254;
  double t2257;
  double t2302;
  double t2304;
  double t2309;
  double t2314;
  double t2311;
  double t2315;
  double t2317;
  double t2324;
  double t2334;
  double t2354;
  double t2358;
  double t2363;
  double t2365;
  double t2369;
  double t2371;
  double t2379;
  double t2380;
  double t2392;
  double t2426;
  double t2434;
  double t2438;
  double t2456;
  double t2454;
  double t2461;
  double t2495;
  double t2497;
  double t2502;
  double t2505;
  double t2506;
  double t2520;
  double t2522;
  double t2527;
  double t2568;
  double t2609;
  double t2615;
  double t2616;
  double t2620;
  double t2575;
  double t2576;
  double t2584;
  double t2618;
  double t2622;
  double t2624;
  double t2627;
  double t2635;
  double t2636;
  double t2638;
  double t2643;
  double t2647;
  double t2651;
  double t2657;
  double t2799;
  double t2807;
  double t2808;
  double t2812;
  double t2676;
  double t2703;
  double t2718;
  double t2811;
  double t2816;
  double t2824;
  double t2825;
  double t2880;
  double t2900;
  double t2908;
  double t2910;
  double t2919;
  double t2925;
  double t2931;
  double t3059;
  double t3092;
  double t3108;
  double t3202;
  double t2938;
  double t2954;
  double t2955;
  double t3629;
  double t3644;
  double t3661;
  double t3674;
  double t3146;
  double t3209;
  double t3227;
  double t3269;
  double t3297;
  double t3304;
  double t3316;
  double t3324;
  double t3667;
  double t3380;
  double t3397;
  double t3434;
  double t3698;
  double t3784;
  double t3454;
  double t3483;
  double t3507;
  double t3938;
  double t3944;
  double t3850;
  double t3983;
  double t3805;
  double t4004;
  double t3678;
  double t3967;
  double t3702;
  double t4132;
  double t4134;
  double t4137;
  double t4141;
  double t4217;
  double t4245;
  double t4232;
  double t4251;
  double t4261;
  double t4270;
  double t4282;
  double t4289;
  double t4297;
  double t4299;
  double t4301;
  double t4303;
  double t4304;
  double t4306;
  double t4310;
  double t4313;
  double t4326;
  double t4327;
  double t4333;
  double t4338;
  double t4341;
  double t4345;
  double t4352;
  double t4357;
  double t4366;
  double t4374;
  double t4377;
  double t4379;
  double t4385;
  double t4404;
  double t4406;
  double t4407;
  double t4425;
  double t4430;
  double t4431;
  double t4437;
  double t4441;
  double t4447;
  double t4449;
  double t4453;
  double t4469;
  double t4472;
  double t4473;
  double t4475;
  double t4480;
  double t4486;
  double t4488;
  double t4492;
  double t1922;
  double t1935;
  double t1961;
  double t1969;
  double t1980;
  double t1986;
  double t1989;
  double t4505;
  double t4507;
  double t1996;
  double t2000;
  double t2005;
  double t2006;
  double t2010;
  double t2011;
  double t2014;
  double t4520;
  double t4524;
  double t4525;
  double t2016;
  double t2017;
  double t2024;
  double t2026;
  double t2035;
  double t2037;
  double t2041;
  double t4528;
  double t4533;
  double t4534;
  double t2049;
  double t2057;
  double t2068;
  double t2069;
  double t2079;
  double t2082;
  double t2084;
  double t2094;
  double t2099;
  double t2104;
  double t2110;
  double t2117;
  double t2168;
  double t2185;
  double t2186;
  double t2188;
  double t2190;
  double t2192;
  double t4298;
  double t4732;
  double t4733;
  double t4750;
  double t4751;
  double t4756;
  double t4735;
  double t4740;
  double t4741;
  double t4784;
  double t4798;
  double t4801;
  double t4805;
  double t4810;
  double t4817;
  double t4819;
  double t4821;
  double t4827;
  double t4831;
  double t4832;
  double t4834;
  double t4835;
  double t4838;
  double t4860;
  double t4878;
  double t4893;
  double t4894;
  double t4902;
  double t4906;
  double t4907;
  double t4933;
  double t4947;
  double t4950;
  double t4977;
  double t4978;
  double t4980;
  double t4984;
  double t4990;
  double t4999;
  double t5005;
  double t5011;
  double t3623;
  double t3665;
  double t3690;
  double t3694;
  double t3706;
  double t3707;
  double t3715;
  double t5025;
  double t5026;
  double t3755;
  double t3782;
  double t3813;
  double t3835;
  double t3872;
  double t3901;
  double t3902;
  double t5029;
  double t5030;
  double t5031;
  double t3929;
  double t3931;
  double t3940;
  double t3941;
  double t3955;
  double t3957;
  double t3962;
  double t5037;
  double t5044;
  double t5046;
  double t3980;
  double t3987;
  double t3994;
  double t3995;
  double t4006;
  double t4015;
  double t4020;
  double t4025;
  double t4048;
  double t4050;
  double t4068;
  double t4074;
  double t4138;
  double t4144;
  double t4145;
  double t4148;
  double t4150;
  double t4159;
  double t5273;
  double t5293;
  double t5294;
  double t5313;
  double t5330;
  double t5342;
  double t5352;
  double t5357;
  double t5358;
  double t5364;
  double t5368;
  double t5384;
  double t5387;
  double t5389;
  double t5405;
  double t5407;
  double t5409;
  double t5410;
  double t5422;
  double t5446;
  double t5466;
  double t5482;
  double t5551;
  double t5580;
  double t5581;
  double t5600;
  double t5604;
  double t5639;
  double t5650;
  double t5656;
  double t5696;
  double t5702;
  double t5717;
  double t5718;
  double t5722;
  double t5739;
  double t5742;
  double t5750;
  double t5765;
  double t5766;
  double t5780;
  double t5781;
  double t5786;
  double t5806;
  double t5808;
  double t5822;
  double t5848;
  double t5851;
  double t5858;
  double t5862;
  double t5866;
  double t5879;
  double t5884;
  double t5891;
  double t5355;
  double t6020;
  double t6023;
  double t6061;
  double t6062;
  double t6073;
  double t6041;
  double t6042;
  double t6051;
  double t6114;
  double t6124;
  double t6142;
  double t6174;
  double t6177;
  double t6195;
  double t6196;
  double t6199;
  double t6238;
  double t6244;
  double t6245;
  double t6246;
  double t6255;
  double t6259;
  double t6260;
  double t6266;
  double t6289;
  double t6290;
  double t6293;
  double t6294;
  double t6295;
  double t6303;
  double t6306;
  double t6307;
  double t6340;
  double t6343;
  double t6348;
  double t6360;
  double t6362;
  double t6405;
  double t6408;
  double t6414;
  double t6440;
  double t6442;
  double t6444;
  double t6447;
  double t6456;
  double t6461;
  double t6477;
  double t6487;
  t24 = Cos(var1[4]);
  t135 = Cos(var1[5]);
  t143 = Sin(var1[4]);
  t151 = Sin(var1[5]);
  t686 = Sin(var1[14]);
  t933 = Cos(var1[14]);
  t724 = 0.135*t686*t143;
  t944 = -1.*t933;
  t1032 = 1. + t944;
  t1084 = 0.135*t1032*t24*t151;
  t1259 = Cos(var1[15]);
  t1318 = -1.*t1259;
  t1329 = 1. + t1318;
  t1343 = Sin(var1[15]);
  t1091 = t686*t143;
  t1095 = -1.*t933*t24*t151;
  t1096 = t1091 + t1095;
  t1103 = t933*t143;
  t1116 = t24*t686*t151;
  t1129 = t1103 + t1116;
  t1333 = -0.049*t1329;
  t1345 = -0.135*t1343;
  t1387 = t1333 + t1345;
  t1388 = t24*t135*t1387;
  t1392 = -0.135*t1329;
  t1399 = 0.049*t1343;
  t1400 = t1392 + t1399;
  t1401 = t1400*t1096;
  t1408 = -1.*t24*t135*t1343;
  t1446 = t1259*t1096;
  t1460 = t1408 + t1446;
  t1527 = Cos(var1[16]);
  t1530 = -1.*t1527;
  t1539 = 1. + t1530;
  t1575 = Sin(var1[16]);
  t1476 = t1259*t24*t135;
  t1488 = t1343*t1096;
  t1490 = t1476 + t1488;
  t1572 = -0.09*t1539;
  t1580 = 0.049*t1575;
  t1581 = t1572 + t1580;
  t1586 = t1581*t1129;
  t1590 = -0.049*t1539;
  t1591 = -0.09*t1575;
  t1601 = t1590 + t1591;
  t1622 = t1601*t1490;
  t1630 = t1575*t1129;
  t1633 = t1527*t1490;
  t1638 = t1630 + t1633;
  t1686 = Cos(var1[17]);
  t1689 = -1.*t1686;
  t1693 = 1. + t1689;
  t1698 = Sin(var1[17]);
  t1648 = t1527*t1129;
  t1655 = -1.*t1575*t1490;
  t1657 = t1648 + t1655;
  t1694 = -0.049*t1693;
  t1701 = -0.21*t1698;
  t1702 = t1694 + t1701;
  t1707 = t1702*t1638;
  t1711 = -0.21*t1693;
  t1712 = 0.049*t1698;
  t1713 = t1711 + t1712;
  t1725 = t1713*t1657;
  t1727 = -1.*t1698*t1638;
  t1740 = t1686*t1657;
  t1745 = t1727 + t1740;
  t1778 = Cos(var1[18]);
  t1779 = -1.*t1778;
  t1786 = 1. + t1779;
  t1795 = Sin(var1[18]);
  t1748 = t1686*t1638;
  t1756 = t1698*t1657;
  t1757 = t1748 + t1756;
  t1791 = -0.27068*t1786;
  t1796 = 0.00159*t1795;
  t1799 = t1791 + t1796;
  t1802 = t1799*t1745;
  t1804 = -0.00159*t1786;
  t1805 = -0.27068*t1795;
  t1806 = t1804 + t1805;
  t1807 = t1806*t1757;
  t1812 = t1795*t1745;
  t1820 = t1778*t1757;
  t1822 = t1812 + t1820;
  t1837 = Cos(var1[19]);
  t1839 = -1.*t1837;
  t1841 = 1. + t1839;
  t1864 = Sin(var1[19]);
  t1825 = t1778*t1745;
  t1826 = -1.*t1795*t1757;
  t1829 = t1825 + t1826;
  t1927 = Cos(var1[20]);
  t1930 = -1.*t1927;
  t1934 = 1. + t1930;
  t1953 = Sin(var1[20]);
  t1842 = 0.01841*t1841;
  t1866 = -0.70544*t1864;
  t1868 = t1842 + t1866;
  t1881 = t1868*t1822;
  t1882 = -0.70544*t1841;
  t1886 = -0.01841*t1864;
  t1887 = t1882 + t1886;
  t1893 = t1887*t1829;
  t1970 = 0.005481192614*t1934;
  t1894 = -1.*t1864*t1822;
  t1895 = t1837*t1829;
  t1897 = t1894 + t1895;
  t1941 = 0.07769774964800001*t1934;
  t2003 = -0.0004284921280000001*t1934;
  t1901 = t1837*t1822;
  t1911 = t1864*t1829;
  t1916 = t1901 + t1911;
  t2021 = 0.005498*t1953;
  t2031 = 0.996943*t1953;
  t2009 = -0.077936*t1953;
  t2053 = 0.0004284921280000001*t1934;
  t2004 = -0.996943*t1953;
  t2076 = -0.005481192614*t1934;
  t1971 = 0.077936*t1953;
  t2045 = -0.07769774964800001*t1934;
  t1956 = -0.005498*t1953;
  t2144 = Cos(var1[21]);
  t2164 = -1.*t2144;
  t2166 = 1. + t2164;
  t2183 = Sin(var1[21]);
  t600 = -0.0233*t24*t135;
  t2229 = Cos(var1[6]);
  t2237 = Sin(var1[6]);
  t2230 = -1.*t2229;
  t2232 = 1. + t2230;
  t2233 = -0.135*t24*t2232*t151;
  t2243 = -0.135*t143*t2237;
  t2276 = t2229*t143;
  t2279 = t24*t151*t2237;
  t2280 = t2276 + t2279;
  t2246 = -1.*t24*t2229*t151;
  t2254 = t143*t2237;
  t2257 = t2246 + t2254;
  t2302 = Cos(var1[7]);
  t2304 = -1.*t2302;
  t2309 = 1. + t2304;
  t2314 = Sin(var1[7]);
  t2311 = 0.135*t2309;
  t2315 = 0.049*t2314;
  t2317 = t2311 + t2315;
  t2324 = t2257*t2317;
  t2334 = -0.049*t2309;
  t2354 = 0.135*t2314;
  t2358 = t2334 + t2354;
  t2363 = t24*t135*t2358;
  t2365 = t2302*t2257;
  t2369 = -1.*t24*t135*t2314;
  t2371 = t2365 + t2369;
  t2379 = t24*t135*t2302;
  t2380 = t2257*t2314;
  t2392 = t2379 + t2380;
  t2426 = Cos(var1[8]);
  t2434 = -1.*t2426;
  t2438 = 1. + t2434;
  t2456 = Sin(var1[8]);
  t2454 = -0.049*t2438;
  t2461 = -0.09*t2456;
  t2495 = t2454 + t2461;
  t2497 = t2392*t2495;
  t2502 = -0.09*t2438;
  t2505 = 0.049*t2456;
  t2506 = t2502 + t2505;
  t2520 = t2280*t2506;
  t2522 = t2426*t2392;
  t2527 = t2280*t2456;
  t2568 = t2522 + t2527;
  t2609 = Cos(var1[9]);
  t2615 = -1.*t2609;
  t2616 = 1. + t2615;
  t2620 = Sin(var1[9]);
  t2575 = t2426*t2280;
  t2576 = -1.*t2392*t2456;
  t2584 = t2575 + t2576;
  t2618 = -0.049*t2616;
  t2622 = -0.21*t2620;
  t2624 = t2618 + t2622;
  t2627 = t2624*t2568;
  t2635 = -0.21*t2616;
  t2636 = 0.049*t2620;
  t2638 = t2635 + t2636;
  t2643 = t2638*t2584;
  t2647 = -1.*t2620*t2568;
  t2651 = t2609*t2584;
  t2657 = t2647 + t2651;
  t2799 = Cos(var1[10]);
  t2807 = -1.*t2799;
  t2808 = 1. + t2807;
  t2812 = Sin(var1[10]);
  t2676 = t2609*t2568;
  t2703 = t2620*t2584;
  t2718 = t2676 + t2703;
  t2811 = -0.27068*t2808;
  t2816 = 0.00159*t2812;
  t2824 = t2811 + t2816;
  t2825 = t2824*t2657;
  t2880 = -0.00159*t2808;
  t2900 = -0.27068*t2812;
  t2908 = t2880 + t2900;
  t2910 = t2908*t2718;
  t2919 = t2812*t2657;
  t2925 = t2799*t2718;
  t2931 = t2919 + t2925;
  t3059 = Cos(var1[11]);
  t3092 = -1.*t3059;
  t3108 = 1. + t3092;
  t3202 = Sin(var1[11]);
  t2938 = t2799*t2657;
  t2954 = -1.*t2812*t2718;
  t2955 = t2938 + t2954;
  t3629 = Cos(var1[12]);
  t3644 = -1.*t3629;
  t3661 = 1. + t3644;
  t3674 = Sin(var1[12]);
  t3146 = 0.01841*t3108;
  t3209 = -0.70544*t3202;
  t3227 = t3146 + t3209;
  t3269 = t3227*t2931;
  t3297 = -0.70544*t3108;
  t3304 = -0.01841*t3202;
  t3316 = t3297 + t3304;
  t3324 = t3316*t2955;
  t3667 = -0.005481192614*t3661;
  t3380 = -1.*t3202*t2931;
  t3397 = t3059*t2955;
  t3434 = t3380 + t3397;
  t3698 = -0.07769774964800001*t3661;
  t3784 = -0.0004284921280000001*t3661;
  t3454 = t3059*t2931;
  t3483 = t3202*t2955;
  t3507 = t3454 + t3483;
  t3938 = -0.005498*t3674;
  t3944 = 0.996943*t3674;
  t3850 = 0.077936*t3674;
  t3983 = 0.0004284921280000001*t3661;
  t3805 = -0.996943*t3674;
  t4004 = 0.005481192614*t3661;
  t3678 = -0.077936*t3674;
  t3967 = 0.07769774964800001*t3661;
  t3702 = 0.005498*t3674;
  t4132 = Cos(var1[13]);
  t4134 = -1.*t4132;
  t4137 = 1. + t4134;
  t4141 = Sin(var1[13]);
  t4217 = Sin(var1[3]);
  t4245 = Cos(var1[3]);
  t4232 = t135*t4217*t143;
  t4251 = t4245*t151;
  t4261 = t4232 + t4251;
  t4270 = t4245*t135;
  t4282 = -1.*t4217*t143*t151;
  t4289 = t4270 + t4282;
  t4297 = -0.135*t24*t686*t4217;
  t4299 = -0.135*t1032*t4289;
  t4301 = -1.*t24*t686*t4217;
  t4303 = t933*t4289;
  t4304 = t4301 + t4303;
  t4306 = -1.*t933*t24*t4217;
  t4310 = -1.*t686*t4289;
  t4313 = t4306 + t4310;
  t4326 = t1387*t4261;
  t4327 = t1400*t4304;
  t4333 = -1.*t1343*t4261;
  t4338 = t1259*t4304;
  t4341 = t4333 + t4338;
  t4345 = t1259*t4261;
  t4352 = t1343*t4304;
  t4357 = t4345 + t4352;
  t4366 = t1581*t4313;
  t4374 = t1601*t4357;
  t4377 = t1575*t4313;
  t4379 = t1527*t4357;
  t4385 = t4377 + t4379;
  t4404 = t1527*t4313;
  t4406 = -1.*t1575*t4357;
  t4407 = t4404 + t4406;
  t4425 = t1702*t4385;
  t4430 = t1713*t4407;
  t4431 = -1.*t1698*t4385;
  t4437 = t1686*t4407;
  t4441 = t4431 + t4437;
  t4447 = t1686*t4385;
  t4449 = t1698*t4407;
  t4453 = t4447 + t4449;
  t4469 = t1799*t4441;
  t4472 = t1806*t4453;
  t4473 = t1795*t4441;
  t4475 = t1778*t4453;
  t4480 = t4473 + t4475;
  t4486 = t1778*t4441;
  t4488 = -1.*t1795*t4453;
  t4492 = t4486 + t4488;
  t1922 = 2.1934241414728571e-7*var1[20];
  t1935 = -0.000033783761634830594*t1934;
  t1961 = t1941 + t1956;
  t1969 = -0.021877537552*t1961;
  t1980 = t1970 + t1971;
  t1986 = -0.6934341012630001*t1980;
  t1989 = t1922 + t1935 + t1969 + t1986;
  t4505 = t1868*t4480;
  t4507 = t1887*t4492;
  t1996 = -1.2096424700126054e-9*var1[20];
  t2000 = -0.6934128581485427*t1934;
  t2005 = t2003 + t2004;
  t2006 = -0.021877537552*t2005;
  t2010 = t1970 + t2009;
  t2011 = -0.005534467322*t2010;
  t2014 = t1996 + t2000 + t2006 + t2011;
  t4520 = -1.*t1864*t4480;
  t4524 = t1837*t4492;
  t4525 = t4520 + t4524;
  t2016 = -1.7147089040178687e-8*var1[20];
  t2017 = -0.021744644052735636*t1934;
  t2024 = t1941 + t2021;
  t2026 = -0.005534467322*t2024;
  t2035 = t2003 + t2031;
  t2037 = -0.6934341012630001*t2035;
  t2041 = t2016 + t2017 + t2026 + t2037;
  t4528 = t1837*t4480;
  t4533 = t1864*t4492;
  t4534 = t4528 + t4533;
  t2049 = t2045 + t2021;
  t2057 = t2053 + t2031;
  t2068 = -0.993925573253*t1934;
  t2069 = 1. + t2068;
  t2079 = t2076 + t2009;
  t2082 = -0.999969365345*t1934;
  t2084 = 1. + t2082;
  t2094 = t2053 + t2004;
  t2099 = -0.006104248100000001*t1934;
  t2104 = 1. + t2099;
  t2110 = t2076 + t1971;
  t2117 = t2045 + t1956;
  t2168 = -1.11344*t2166;
  t2185 = 0.02159*t2183;
  t2186 = t2168 + t2185;
  t2188 = -0.02159*t2166;
  t2190 = -1.11344*t2183;
  t2192 = t2188 + t2190;
  t4298 = -0.0233*t4261;
  t4732 = 0.135*t2232*t4289;
  t4733 = 0.135*t24*t4217*t2237;
  t4750 = -1.*t24*t2229*t4217;
  t4751 = -1.*t4289*t2237;
  t4756 = t4750 + t4751;
  t4735 = t2229*t4289;
  t4740 = -1.*t24*t4217*t2237;
  t4741 = t4735 + t4740;
  t4784 = t4741*t2317;
  t4798 = t4261*t2358;
  t4801 = t2302*t4741;
  t4805 = -1.*t4261*t2314;
  t4810 = t4801 + t4805;
  t4817 = t2302*t4261;
  t4819 = t4741*t2314;
  t4821 = t4817 + t4819;
  t4827 = t4821*t2495;
  t4831 = t4756*t2506;
  t4832 = t2426*t4821;
  t4834 = t4756*t2456;
  t4835 = t4832 + t4834;
  t4838 = t2426*t4756;
  t4860 = -1.*t4821*t2456;
  t4878 = t4838 + t4860;
  t4893 = t2624*t4835;
  t4894 = t2638*t4878;
  t4902 = -1.*t2620*t4835;
  t4906 = t2609*t4878;
  t4907 = t4902 + t4906;
  t4933 = t2609*t4835;
  t4947 = t2620*t4878;
  t4950 = t4933 + t4947;
  t4977 = t2824*t4907;
  t4978 = t2908*t4950;
  t4980 = t2812*t4907;
  t4984 = t2799*t4950;
  t4990 = t4980 + t4984;
  t4999 = t2799*t4907;
  t5005 = -1.*t2812*t4950;
  t5011 = t4999 + t5005;
  t3623 = -2.1934241414728571e-7*var1[12];
  t3665 = 0.000033783761634830594*t3661;
  t3690 = t3667 + t3678;
  t3694 = -0.6934341012630001*t3690;
  t3706 = t3698 + t3702;
  t3707 = -0.021877537552*t3706;
  t3715 = t3623 + t3665 + t3694 + t3707;
  t5025 = t3227*t4990;
  t5026 = t3316*t5011;
  t3755 = -1.2096424700126054e-9*var1[12];
  t3782 = -0.6934128581485427*t3661;
  t3813 = t3784 + t3805;
  t3835 = -0.021877537552*t3813;
  t3872 = t3667 + t3850;
  t3901 = 0.005534467322*t3872;
  t3902 = t3755 + t3782 + t3835 + t3901;
  t5029 = -1.*t3202*t4990;
  t5030 = t3059*t5011;
  t5031 = t5029 + t5030;
  t3929 = -1.7147089040178687e-8*var1[12];
  t3931 = -0.021744644052735636*t3661;
  t3940 = t3698 + t3938;
  t3941 = 0.005534467322*t3940;
  t3955 = t3784 + t3944;
  t3957 = -0.6934341012630001*t3955;
  t3962 = t3929 + t3931 + t3941 + t3957;
  t5037 = t3059*t4990;
  t5044 = t3202*t5011;
  t5046 = t5037 + t5044;
  t3980 = t3967 + t3938;
  t3987 = t3983 + t3944;
  t3994 = -0.993925573253*t3661;
  t3995 = 1. + t3994;
  t4006 = t4004 + t3850;
  t4015 = -0.999969365345*t3661;
  t4020 = 1. + t4015;
  t4025 = t3983 + t3805;
  t4048 = -0.006104248100000001*t3661;
  t4050 = 1. + t4048;
  t4068 = t4004 + t3678;
  t4074 = t3967 + t3702;
  t4138 = -1.11344*t4137;
  t4144 = 0.02159*t4141;
  t4145 = t4138 + t4144;
  t4148 = -0.02159*t4137;
  t4150 = -1.11344*t4141;
  t4159 = t4148 + t4150;
  t5273 = -1.*t4245*t135*t143;
  t5293 = t4217*t151;
  t5294 = t5273 + t5293;
  t5313 = t135*t4217;
  t5330 = t4245*t143*t151;
  t5342 = t5313 + t5330;
  t5352 = 0.135*t4245*t24*t686;
  t5357 = -0.135*t1032*t5342;
  t5358 = t4245*t24*t686;
  t5364 = t933*t5342;
  t5368 = t5358 + t5364;
  t5384 = t933*t4245*t24;
  t5387 = -1.*t686*t5342;
  t5389 = t5384 + t5387;
  t5405 = t1387*t5294;
  t5407 = t1400*t5368;
  t5409 = -1.*t1343*t5294;
  t5410 = t1259*t5368;
  t5422 = t5409 + t5410;
  t5446 = t1259*t5294;
  t5466 = t1343*t5368;
  t5482 = t5446 + t5466;
  t5551 = t1581*t5389;
  t5580 = t1601*t5482;
  t5581 = t1575*t5389;
  t5600 = t1527*t5482;
  t5604 = t5581 + t5600;
  t5639 = t1527*t5389;
  t5650 = -1.*t1575*t5482;
  t5656 = t5639 + t5650;
  t5696 = t1702*t5604;
  t5702 = t1713*t5656;
  t5717 = -1.*t1698*t5604;
  t5718 = t1686*t5656;
  t5722 = t5717 + t5718;
  t5739 = t1686*t5604;
  t5742 = t1698*t5656;
  t5750 = t5739 + t5742;
  t5765 = t1799*t5722;
  t5766 = t1806*t5750;
  t5780 = t1795*t5722;
  t5781 = t1778*t5750;
  t5786 = t5780 + t5781;
  t5806 = t1778*t5722;
  t5808 = -1.*t1795*t5750;
  t5822 = t5806 + t5808;
  t5848 = t1868*t5786;
  t5851 = t1887*t5822;
  t5858 = -1.*t1864*t5786;
  t5862 = t1837*t5822;
  t5866 = t5858 + t5862;
  t5879 = t1837*t5786;
  t5884 = t1864*t5822;
  t5891 = t5879 + t5884;
  t5355 = -0.0233*t5294;
  t6020 = 0.135*t2232*t5342;
  t6023 = -0.135*t4245*t24*t2237;
  t6061 = t4245*t24*t2229;
  t6062 = -1.*t5342*t2237;
  t6073 = t6061 + t6062;
  t6041 = t2229*t5342;
  t6042 = t4245*t24*t2237;
  t6051 = t6041 + t6042;
  t6114 = t6051*t2317;
  t6124 = t5294*t2358;
  t6142 = t2302*t6051;
  t6174 = -1.*t5294*t2314;
  t6177 = t6142 + t6174;
  t6195 = t2302*t5294;
  t6196 = t6051*t2314;
  t6199 = t6195 + t6196;
  t6238 = t6199*t2495;
  t6244 = t6073*t2506;
  t6245 = t2426*t6199;
  t6246 = t6073*t2456;
  t6255 = t6245 + t6246;
  t6259 = t2426*t6073;
  t6260 = -1.*t6199*t2456;
  t6266 = t6259 + t6260;
  t6289 = t2624*t6255;
  t6290 = t2638*t6266;
  t6293 = -1.*t2620*t6255;
  t6294 = t2609*t6266;
  t6295 = t6293 + t6294;
  t6303 = t2609*t6255;
  t6306 = t2620*t6266;
  t6307 = t6303 + t6306;
  t6340 = t2824*t6295;
  t6343 = t2908*t6307;
  t6348 = t2812*t6295;
  t6360 = t2799*t6307;
  t6362 = t6348 + t6360;
  t6405 = t2799*t6295;
  t6408 = -1.*t2812*t6307;
  t6414 = t6405 + t6408;
  t6440 = t3227*t6362;
  t6442 = t3316*t6414;
  t6444 = -1.*t3202*t6362;
  t6447 = t3059*t6414;
  t6456 = t6444 + t6447;
  t6461 = t3059*t6362;
  t6477 = t3202*t6414;
  t6487 = t6461 + t6477;
  p_output1[0]=0.0288377642750394*(1.316608*(t2233 + t2243 - 0.0343*t2280 + t2324 + t2363 + 0.135*t2371 - 0.049*t2392 + var1[0]) + 10.33*(0.02841*t143 + 0.05066*t135*t24 - 0.000346*t151*t24 + var1[0]) + 5.79228*(t2233 + t2243 + t2324 + t2363 + 0.17081*t2371 + t2497 + t2520 - 0.04895*t2568 - 0.14946*t2584 + var1[0]) + 1.03008*(t2233 + t2243 + t2324 + t2363 + 0.132168*t2371 + t2497 + t2520 + t2627 + t2643 - 0.255862*t2657 - 0.007761*t2718 + var1[0]) + 0.763*(t2233 + t2243 + t2324 + t2363 + 0.130288*t2371 + t2497 + t2520 + t2627 + t2643 + t2825 + t2910 - 0.000421*t2931 - 0.45406*t2955 + var1[0]) + 1.03*(t2233 + t2243 + t2324 + t2363 + 0.127241*t2371 + t2497 + t2520 + t2627 + t2643 + t2825 + t2910 + t3269 + t3324 - 0.826587*t3434 - 0.004179*t3507 + var1[0]) + 0.126*(t2233 + t2243 + t2324 + t2363 + t2497 + t2520 + t2627 + t2643 + t2825 + t2910 + t3269 + t3324 + t2371*t3715 + t3434*t3902 + t3507*t3962 + 0.01889*(t2371*t3980 + t3434*t3987 + t3507*t3995) - 0.617968*(t2371*t4006 + t3434*t4020 + t3507*t4025) + 0.126739*(t2371*t4050 + t3434*t4068 + t3507*t4074) + var1[0]) + 0.1498*(t2233 + t2243 + t2324 + t2363 + 0.13064*t2371 + t2497 + t2520 + t2627 + t2643 + t2825 + t2910 + t3269 + t3324 + 0.00589*(t3507*t4132 + t3434*t4141) - 1.11818*(t3434*t4132 - 1.*t3507*t4141) + t3434*t4145 + t3507*t4159 + var1[0]) + 1.965608*(t2233 + t2243 + 0.1351*t2257 + 0.01793*t2280 + t600 + var1[0]) + 1.316608*(t1084 - 0.0343*t1129 + t1388 + t1401 - 0.135*t1460 - 0.049*t1490 + t724 + var1[0]) + 5.79228*(t1084 + t1388 + t1401 - 0.17081*t1460 + t1586 + t1622 - 0.04895*t1638 - 0.14946*t1657 + t724 + var1[0]) + 1.03008*(t1084 + t1388 + t1401 - 0.132168*t1460 + t1586 + t1622 + t1707 + t1725 - 0.255862*t1745 - 0.007761*t1757 + t724 + var1[0]) + 0.763*(t1084 + t1388 + t1401 - 0.130288*t1460 + t1586 + t1622 + t1707 + t1725 + t1802 + t1807 - 0.000421*t1822 - 0.45406*t1829 + t724 + var1[0]) + 1.03*(t1084 + t1388 + t1401 - 0.127241*t1460 + t1586 + t1622 + t1707 + t1725 + t1802 + t1807 + t1881 + t1893 - 0.826587*t1897 - 0.004179*t1916 + t724 + var1[0]) + 0.126*(t1084 + t1388 + t1401 + t1586 + t1622 + t1707 + t1725 + t1802 + t1807 + t1881 + t1893 + t1460*t1989 + t1897*t2014 + t1916*t2041 + 0.01889*(t1460*t2049 + t1897*t2057 + t1916*t2069) - 0.617968*(t1460*t2079 + t1897*t2084 + t1916*t2094) - 0.126739*(t1460*t2104 + t1897*t2110 + t1916*t2117) + t724 + var1[0]) + 0.1498*(t1084 + t1388 + t1401 - 0.13064*t1460 + t1586 + t1622 + t1707 + t1725 + t1802 + t1807 + t1881 + t1893 + 0.00589*(t1916*t2144 + t1897*t2183) - 1.11818*(t1897*t2144 - 1.*t1916*t2183) + t1897*t2186 + t1916*t2192 + t724 + var1[0]) + 1.965608*(t1084 - 0.1351*t1096 + 0.01793*t1129 + t600 + t724 + var1[0]));
  p_output1[1]=0.0288377642750394*(10.33*(-0.02841*t24*t4217 + 0.05066*t4261 + 0.000346*t4289 + var1[1]) + 1.965608*(t4297 + t4298 + t4299 - 0.1351*t4304 + 0.01793*t4313 + var1[1]) + 1.316608*(t4297 + t4299 - 0.0343*t4313 + t4326 + t4327 - 0.135*t4341 - 0.049*t4357 + var1[1]) + 5.79228*(t4297 + t4299 + t4326 + t4327 - 0.17081*t4341 + t4366 + t4374 - 0.04895*t4385 - 0.14946*t4407 + var1[1]) + 1.03008*(t4297 + t4299 + t4326 + t4327 - 0.132168*t4341 + t4366 + t4374 + t4425 + t4430 - 0.255862*t4441 - 0.007761*t4453 + var1[1]) + 0.763*(t4297 + t4299 + t4326 + t4327 - 0.130288*t4341 + t4366 + t4374 + t4425 + t4430 + t4469 + t4472 - 0.000421*t4480 - 0.45406*t4492 + var1[1]) + 1.03*(t4297 + t4299 + t4326 + t4327 - 0.127241*t4341 + t4366 + t4374 + t4425 + t4430 + t4469 + t4472 + t4505 + t4507 - 0.826587*t4525 - 0.004179*t4534 + var1[1]) + 0.126*(t4297 + t4299 + t4326 + t4327 + t1989*t4341 + t4366 + t4374 + t4425 + t4430 + t4469 + t4472 + t4505 + t4507 + t2014*t4525 + t2041*t4534 + 0.01889*(t2049*t4341 + t2057*t4525 + t2069*t4534) - 0.617968*(t2079*t4341 + t2084*t4525 + t2094*t4534) - 0.126739*(t2104*t4341 + t2110*t4525 + t2117*t4534) + var1[1]) + 0.1498*(t4297 + t4299 + t4326 + t4327 - 0.13064*t4341 + t4366 + t4374 + t4425 + t4430 + t4469 + t4472 + t4505 + t4507 + t2186*t4525 + t2192*t4534 + 0.00589*(t2183*t4525 + t2144*t4534) - 1.11818*(t2144*t4525 - 1.*t2183*t4534) + var1[1]) + 1.965608*(t4298 + t4732 + t4733 + 0.1351*t4741 + 0.01793*t4756 + var1[1]) + 1.316608*(t4732 + t4733 - 0.0343*t4756 + t4784 + t4798 + 0.135*t4810 - 0.049*t4821 + var1[1]) + 5.79228*(t4732 + t4733 + t4784 + t4798 + 0.17081*t4810 + t4827 + t4831 - 0.04895*t4835 - 0.14946*t4878 + var1[1]) + 1.03008*(t4732 + t4733 + t4784 + t4798 + 0.132168*t4810 + t4827 + t4831 + t4893 + t4894 - 0.255862*t4907 - 0.007761*t4950 + var1[1]) + 0.763*(t4732 + t4733 + t4784 + t4798 + 0.130288*t4810 + t4827 + t4831 + t4893 + t4894 + t4977 + t4978 - 0.000421*t4990 - 0.45406*t5011 + var1[1]) + 1.03*(t4732 + t4733 + t4784 + t4798 + 0.127241*t4810 + t4827 + t4831 + t4893 + t4894 + t4977 + t4978 + t5025 + t5026 - 0.826587*t5031 - 0.004179*t5046 + var1[1]) + 0.126*(t4732 + t4733 + t4784 + t4798 + t3715*t4810 + t4827 + t4831 + t4893 + t4894 + t4977 + t4978 + t5025 + t5026 + t3902*t5031 + t3962*t5046 + 0.01889*(t3980*t4810 + t3987*t5031 + t3995*t5046) - 0.617968*(t4006*t4810 + t4020*t5031 + t4025*t5046) + 0.126739*(t4050*t4810 + t4068*t5031 + t4074*t5046) + var1[1]) + 0.1498*(t4732 + t4733 + t4784 + t4798 + 0.13064*t4810 + t4827 + t4831 + t4893 + t4894 + t4977 + t4978 + t5025 + t5026 + t4145*t5031 + t4159*t5046 + 0.00589*(t4141*t5031 + t4132*t5046) - 1.11818*(t4132*t5031 - 1.*t4141*t5046) + var1[1]));
  p_output1[2]=0.0288377642750394*(10.33*(0.02841*t24*t4245 + 0.05066*t5294 + 0.000346*t5342 + var1[2]) + 1.965608*(t5352 + t5355 + t5357 - 0.1351*t5368 + 0.01793*t5389 + var1[2]) + 1.316608*(t5352 + t5357 - 0.0343*t5389 + t5405 + t5407 - 0.135*t5422 - 0.049*t5482 + var1[2]) + 5.79228*(t5352 + t5357 + t5405 + t5407 - 0.17081*t5422 + t5551 + t5580 - 0.04895*t5604 - 0.14946*t5656 + var1[2]) + 1.03008*(t5352 + t5357 + t5405 + t5407 - 0.132168*t5422 + t5551 + t5580 + t5696 + t5702 - 0.255862*t5722 - 0.007761*t5750 + var1[2]) + 0.763*(t5352 + t5357 + t5405 + t5407 - 0.130288*t5422 + t5551 + t5580 + t5696 + t5702 + t5765 + t5766 - 0.000421*t5786 - 0.45406*t5822 + var1[2]) + 1.03*(t5352 + t5357 + t5405 + t5407 - 0.127241*t5422 + t5551 + t5580 + t5696 + t5702 + t5765 + t5766 + t5848 + t5851 - 0.826587*t5866 - 0.004179*t5891 + var1[2]) + 0.126*(t5352 + t5357 + t5405 + t5407 + t1989*t5422 + t5551 + t5580 + t5696 + t5702 + t5765 + t5766 + t5848 + t5851 + t2014*t5866 + t2041*t5891 + 0.01889*(t2049*t5422 + t2057*t5866 + t2069*t5891) - 0.617968*(t2079*t5422 + t2084*t5866 + t2094*t5891) - 0.126739*(t2104*t5422 + t2110*t5866 + t2117*t5891) + var1[2]) + 0.1498*(t5352 + t5357 + t5405 + t5407 - 0.13064*t5422 + t5551 + t5580 + t5696 + t5702 + t5765 + t5766 + t5848 + t5851 + t2186*t5866 + t2192*t5891 + 0.00589*(t2183*t5866 + t2144*t5891) - 1.11818*(t2144*t5866 - 1.*t2183*t5891) + var1[2]) + 1.965608*(t5355 + t6020 + t6023 + 0.1351*t6051 + 0.01793*t6073 + var1[2]) + 1.316608*(t6020 + t6023 - 0.0343*t6073 + t6114 + t6124 + 0.135*t6177 - 0.049*t6199 + var1[2]) + 5.79228*(t6020 + t6023 + t6114 + t6124 + 0.17081*t6177 + t6238 + t6244 - 0.04895*t6255 - 0.14946*t6266 + var1[2]) + 1.03008*(t6020 + t6023 + t6114 + t6124 + 0.132168*t6177 + t6238 + t6244 + t6289 + t6290 - 0.255862*t6295 - 0.007761*t6307 + var1[2]) + 0.763*(t6020 + t6023 + t6114 + t6124 + 0.130288*t6177 + t6238 + t6244 + t6289 + t6290 + t6340 + t6343 - 0.000421*t6362 - 0.45406*t6414 + var1[2]) + 1.03*(t6020 + t6023 + t6114 + t6124 + 0.127241*t6177 + t6238 + t6244 + t6289 + t6290 + t6340 + t6343 + t6440 + t6442 - 0.826587*t6456 - 0.004179*t6487 + var1[2]) + 0.126*(t6020 + t6023 + t6114 + t6124 + t3715*t6177 + t6238 + t6244 + t6289 + t6290 + t6340 + t6343 + t6440 + t6442 + t3902*t6456 + t3962*t6487 + 0.01889*(t3980*t6177 + t3987*t6456 + t3995*t6487) - 0.617968*(t4006*t6177 + t4020*t6456 + t4025*t6487) + 0.126739*(t4050*t6177 + t4068*t6456 + t4074*t6487) + var1[2]) + 0.1498*(t6020 + t6023 + t6114 + t6124 + 0.13064*t6177 + t6238 + t6244 + t6289 + t6290 + t6340 + t6343 + t6440 + t6442 + t4145*t6456 + t4159*t6487 + 0.00589*(t4141*t6456 + t4132*t6487) - 1.11818*(t4132*t6456 - 1.*t4141*t6487) + var1[2]));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void p_com_absolute_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




