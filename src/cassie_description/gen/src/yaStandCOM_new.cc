/*
 * Automatically Generated from Mathematica.
 * Mon 4 Oct 2021 16:12:10 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "yaStandCOM_new.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t98;
  double t333;
  double t127;
  double t149;
  double t167;
  double t208;
  double t231;
  double t242;
  double t251;
  double t111;
  double t509;
  double t510;
  double t514;
  double t534;
  double t558;
  double t570;
  double t600;
  double t619;
  double t635;
  double t643;
  double t764;
  double t780;
  double t796;
  double t812;
  double t828;
  double t846;
  double t855;
  double t879;
  double t907;
  double t919;
  double t972;
  double t981;
  double t984;
  double t995;
  double t1024;
  double t1037;
  double t1057;
  double t1089;
  double t1094;
  double t1097;
  double t1122;
  double t1130;
  double t1133;
  double t1147;
  double t1148;
  double t1152;
  double t1169;
  double t1177;
  double t1178;
  double t1189;
  double t1203;
  double t1221;
  double t1238;
  double t1242;
  double t1250;
  double t1260;
  double t1265;
  double t1286;
  double t1288;
  double t1292;
  double t1332;
  double t1334;
  double t1336;
  double t374;
  double t1387;
  double t1409;
  double t1413;
  double t1414;
  double t1419;
  double t1391;
  double t1392;
  double t1401;
  double t1492;
  double t1502;
  double t1509;
  double t1519;
  double t1478;
  double t1480;
  double t1481;
  double t1533;
  double t1537;
  double t1541;
  double t1557;
  double t1564;
  double t1565;
  double t1573;
  double t1580;
  double t1583;
  double t1587;
  double t1632;
  double t1636;
  double t1639;
  double t1646;
  double t1666;
  double t1677;
  double t1679;
  double t1690;
  double t1695;
  double t1696;
  double t1737;
  double t1740;
  double t1742;
  double t1749;
  double t1753;
  double t1757;
  double t1771;
  double t1777;
  double t1778;
  double t1782;
  double t1800;
  double t1801;
  double t1807;
  double t1820;
  double t1822;
  double t1826;
  double t1834;
  double t1837;
  double t1842;
  double t1846;
  double t1869;
  double t1881;
  double t1882;
  double t255;
  double t332;
  double t175;
  double t212;
  double t214;
  double t1943;
  double t1944;
  double t455;
  double t461;
  double t470;
  double t667;
  double t674;
  double t734;
  double t1963;
  double t1966;
  double t597;
  double t607;
  double t609;
  double t743;
  double t762;
  double t763;
  double t1978;
  double t1986;
  double t849;
  double t860;
  double t867;
  double t941;
  double t946;
  double t971;
  double t2012;
  double t2013;
  double t1052;
  double t1065;
  double t1081;
  double t1114;
  double t1119;
  double t1120;
  double t2042;
  double t2047;
  double t1154;
  double t1174;
  double t1175;
  double t1196;
  double t1200;
  double t1202;
  double t2107;
  double t2110;
  double t2114;
  double t2130;
  double t2075;
  double t2080;
  double t2147;
  double t2129;
  double t2175;
  double t2224;
  double t2231;
  double t2205;
  double t2247;
  double t2177;
  double t2271;
  double t2150;
  double t2236;
  double t2133;
  double t1261;
  double t1266;
  double t1272;
  double t1300;
  double t1325;
  double t1327;
  double t1354;
  double t1360;
  double t1361;
  double t1371;
  double t1373;
  double t1374;
  double t1940;
  double t386;
  double t432;
  double t2381;
  double t2382;
  double t1418;
  double t1428;
  double t1429;
  double t1433;
  double t1438;
  double t1446;
  double t1455;
  double t1457;
  double t1466;
  double t2401;
  double t2402;
  double t1517;
  double t1521;
  double t1525;
  double t1542;
  double t1547;
  double t1549;
  double t2413;
  double t2414;
  double t1569;
  double t1575;
  double t1576;
  double t1599;
  double t1600;
  double t1617;
  double t2437;
  double t2438;
  double t1678;
  double t1682;
  double t1689;
  double t1724;
  double t1726;
  double t1736;
  double t2458;
  double t2463;
  double t1762;
  double t1772;
  double t1775;
  double t1788;
  double t1797;
  double t1799;
  double t2495;
  double t2498;
  double t2504;
  double t2510;
  double t2478;
  double t2479;
  double t2509;
  double t2520;
  double t2542;
  double t2575;
  double t2580;
  double t2560;
  double t2617;
  double t2546;
  double t2650;
  double t2511;
  double t2592;
  double t2522;
  double t1829;
  double t1835;
  double t1836;
  double t1851;
  double t1853;
  double t1856;
  double t1887;
  double t1889;
  double t1891;
  double t1904;
  double t1907;
  double t1910;
  double t2791;
  double t2799;
  double t2811;
  double t2818;
  double t2819;
  double t2796;
  double t2803;
  double t2806;
  double t2826;
  double t2832;
  double t2835;
  double t2840;
  double t2845;
  double t2852;
  double t2875;
  double t2877;
  double t2881;
  double t2891;
  double t2901;
  double t2907;
  double t2909;
  double t2917;
  double t2920;
  double t2924;
  double t2928;
  double t2932;
  double t2935;
  double t2936;
  double t2939;
  double t2946;
  double t2947;
  double t2954;
  double t2959;
  double t2960;
  double t2971;
  double t2975;
  double t2977;
  double t2980;
  double t2989;
  double t2990;
  double t2993;
  double t3028;
  double t3030;
  double t3031;
  double t3048;
  double t3050;
  double t3053;
  double t3057;
  double t3058;
  double t3060;
  double t3063;
  double t3068;
  double t3069;
  double t3074;
  double t3075;
  double t3078;
  double t3080;
  double t3081;
  double t3085;
  double t3089;
  double t3090;
  double t3094;
  double t3105;
  double t3114;
  double t3115;
  double t3118;
  double t3119;
  double t3127;
  double t3131;
  double t3132;
  double t3134;
  double t3139;
  double t3142;
  double t3143;
  double t3192;
  double t3199;
  double t2863;
  double t2865;
  double t2866;
  double t3211;
  double t3212;
  double t3225;
  double t3229;
  double t3238;
  double t3239;
  double t3250;
  double t3251;
  double t2101;
  double t2119;
  double t2137;
  double t2139;
  double t2155;
  double t2156;
  double t2159;
  double t3259;
  double t3261;
  double t2162;
  double t2169;
  double t2191;
  double t2197;
  double t2207;
  double t2210;
  double t2212;
  double t2215;
  double t2223;
  double t2225;
  double t2229;
  double t2232;
  double t2233;
  double t2234;
  double t2237;
  double t2249;
  double t2255;
  double t2262;
  double t2278;
  double t2285;
  double t2286;
  double t2291;
  double t2301;
  double t2313;
  double t2322;
  double t2342;
  double t3000;
  double t3004;
  double t3008;
  double t3014;
  double t3016;
  double t3018;
  double t3195;
  double t3336;
  double t3341;
  double t3040;
  double t3042;
  double t3043;
  double t3356;
  double t3357;
  double t3373;
  double t3376;
  double t3385;
  double t3387;
  double t3399;
  double t3401;
  double t2494;
  double t2507;
  double t2512;
  double t2515;
  double t2526;
  double t2530;
  double t2531;
  double t3416;
  double t3417;
  double t2536;
  double t2539;
  double t2549;
  double t2552;
  double t2561;
  double t2563;
  double t2566;
  double t2569;
  double t2574;
  double t2577;
  double t2579;
  double t2582;
  double t2584;
  double t2588;
  double t2606;
  double t2619;
  double t2631;
  double t2632;
  double t2653;
  double t2662;
  double t2668;
  double t2679;
  double t2695;
  double t2697;
  double t2707;
  double t2717;
  double t3149;
  double t3150;
  double t3153;
  double t3159;
  double t3165;
  double t3168;
  double t3511;
  double t3518;
  double t3519;
  double t3503;
  double t3505;
  double t3508;
  double t3528;
  double t3531;
  double t3533;
  double t3538;
  double t3544;
  double t3545;
  double t3558;
  double t3559;
  double t3560;
  double t3563;
  double t3564;
  double t3565;
  double t3567;
  double t3568;
  double t3569;
  double t3572;
  double t3577;
  double t3581;
  double t3587;
  double t3591;
  double t3594;
  double t3597;
  double t3600;
  double t3601;
  double t3609;
  double t3610;
  double t3611;
  double t3616;
  double t3619;
  double t3621;
  double t3623;
  double t3626;
  double t3630;
  double t3659;
  double t3661;
  double t3662;
  double t3676;
  double t3677;
  double t3678;
  double t3684;
  double t3686;
  double t3687;
  double t3692;
  double t3696;
  double t3697;
  double t3703;
  double t3705;
  double t3706;
  double t3717;
  double t3718;
  double t3720;
  double t3725;
  double t3726;
  double t3727;
  double t3734;
  double t3742;
  double t3744;
  double t3748;
  double t3749;
  double t3750;
  double t3755;
  double t3757;
  double t3759;
  double t3764;
  double t3765;
  double t3766;
  double t3804;
  double t3809;
  double t3550;
  double t3552;
  double t3555;
  double t3821;
  double t3824;
  double t3839;
  double t3847;
  double t3866;
  double t3868;
  double t3885;
  double t3886;
  double t3902;
  double t3908;
  double t3636;
  double t3645;
  double t3649;
  double t3654;
  double t3655;
  double t3656;
  double t3808;
  double t3999;
  double t4000;
  double t3667;
  double t3673;
  double t3674;
  double t4018;
  double t4023;
  double t4039;
  double t4043;
  double t4056;
  double t4057;
  double t4067;
  double t4068;
  double t4082;
  double t4084;
  double t3774;
  double t3775;
  double t3779;
  double t3782;
  double t3783;
  double t3785;
  t98 = Cos(var1[4]);
  t333 = Sin(var1[5]);
  t127 = Cos(var1[15]);
  t149 = -1.*t127;
  t167 = 1. + t149;
  t208 = Sin(var1[15]);
  t231 = Sin(var1[14]);
  t242 = Sin(var1[4]);
  t251 = Cos(var1[14]);
  t111 = Cos(var1[5]);
  t509 = t231*t242;
  t510 = -1.*t251*t98*t333;
  t514 = t509 + t510;
  t534 = Cos(var1[16]);
  t558 = -1.*t534;
  t570 = 1. + t558;
  t600 = Sin(var1[16]);
  t619 = t251*t242;
  t635 = t98*t231*t333;
  t643 = t619 + t635;
  t764 = t127*t98*t111;
  t780 = t208*t514;
  t796 = t764 + t780;
  t812 = Cos(var1[17]);
  t828 = -1.*t812;
  t846 = 1. + t828;
  t855 = Sin(var1[17]);
  t879 = t600*t643;
  t907 = t534*t796;
  t919 = t879 + t907;
  t972 = t534*t643;
  t981 = -1.*t600*t796;
  t984 = t972 + t981;
  t995 = Cos(var1[18]);
  t1024 = -1.*t995;
  t1037 = 1. + t1024;
  t1057 = Sin(var1[18]);
  t1089 = -1.*t855*t919;
  t1094 = t812*t984;
  t1097 = t1089 + t1094;
  t1122 = t812*t919;
  t1130 = t855*t984;
  t1133 = t1122 + t1130;
  t1147 = Cos(var1[19]);
  t1148 = -1.*t1147;
  t1152 = 1. + t1148;
  t1169 = Sin(var1[19]);
  t1177 = t1057*t1097;
  t1178 = t995*t1133;
  t1189 = t1177 + t1178;
  t1203 = t995*t1097;
  t1221 = -1.*t1057*t1133;
  t1238 = t1203 + t1221;
  t1242 = Cos(var1[21]);
  t1250 = -1.*t1242;
  t1260 = 1. + t1250;
  t1265 = Sin(var1[21]);
  t1286 = -1.*t1169*t1189;
  t1288 = t1147*t1238;
  t1292 = t1286 + t1288;
  t1332 = t1147*t1189;
  t1334 = t1169*t1238;
  t1336 = t1332 + t1334;
  t374 = Cos(var1[6]);
  t1387 = Sin(var1[6]);
  t1409 = Cos(var1[7]);
  t1413 = -1.*t1409;
  t1414 = 1. + t1413;
  t1419 = Sin(var1[7]);
  t1391 = -1.*t98*t374*t333;
  t1392 = t242*t1387;
  t1401 = t1391 + t1392;
  t1492 = Cos(var1[8]);
  t1502 = -1.*t1492;
  t1509 = 1. + t1502;
  t1519 = Sin(var1[8]);
  t1478 = t98*t111*t1409;
  t1480 = t1401*t1419;
  t1481 = t1478 + t1480;
  t1533 = t374*t242;
  t1537 = t98*t333*t1387;
  t1541 = t1533 + t1537;
  t1557 = Cos(var1[9]);
  t1564 = -1.*t1557;
  t1565 = 1. + t1564;
  t1573 = Sin(var1[9]);
  t1580 = t1492*t1481;
  t1583 = t1541*t1519;
  t1587 = t1580 + t1583;
  t1632 = t1492*t1541;
  t1636 = -1.*t1481*t1519;
  t1639 = t1632 + t1636;
  t1646 = Cos(var1[10]);
  t1666 = -1.*t1646;
  t1677 = 1. + t1666;
  t1679 = Sin(var1[10]);
  t1690 = -1.*t1573*t1587;
  t1695 = t1557*t1639;
  t1696 = t1690 + t1695;
  t1737 = t1557*t1587;
  t1740 = t1573*t1639;
  t1742 = t1737 + t1740;
  t1749 = Cos(var1[11]);
  t1753 = -1.*t1749;
  t1757 = 1. + t1753;
  t1771 = Sin(var1[11]);
  t1777 = t1679*t1696;
  t1778 = t1646*t1742;
  t1782 = t1777 + t1778;
  t1800 = t1646*t1696;
  t1801 = -1.*t1679*t1742;
  t1807 = t1800 + t1801;
  t1820 = Cos(var1[13]);
  t1822 = -1.*t1820;
  t1826 = 1. + t1822;
  t1834 = Sin(var1[13]);
  t1837 = -1.*t1771*t1782;
  t1842 = t1749*t1807;
  t1846 = t1837 + t1842;
  t1869 = t1749*t1782;
  t1881 = t1771*t1807;
  t1882 = t1869 + t1881;
  t255 = -1.*t251;
  t332 = 1. + t255;
  t175 = -0.049*t167;
  t212 = -0.135*t208;
  t214 = t175 + t212;
  t1943 = 0.135*t231*t242;
  t1944 = 0.135*t332*t98*t333;
  t455 = -0.135*t167;
  t461 = 0.049*t208;
  t470 = t455 + t461;
  t667 = -1.*t98*t111*t208;
  t674 = t127*t514;
  t734 = t667 + t674;
  t1963 = t98*t111*t214;
  t1966 = t470*t514;
  t597 = -0.09*t570;
  t607 = 0.049*t600;
  t609 = t597 + t607;
  t743 = -0.049*t570;
  t762 = -0.09*t600;
  t763 = t743 + t762;
  t1978 = t609*t643;
  t1986 = t763*t796;
  t849 = -0.049*t846;
  t860 = -0.21*t855;
  t867 = t849 + t860;
  t941 = -0.21*t846;
  t946 = 0.049*t855;
  t971 = t941 + t946;
  t2012 = t867*t919;
  t2013 = t971*t984;
  t1052 = -0.27068*t1037;
  t1065 = 0.00159*t1057;
  t1081 = t1052 + t1065;
  t1114 = -0.00159*t1037;
  t1119 = -0.27068*t1057;
  t1120 = t1114 + t1119;
  t2042 = t1081*t1097;
  t2047 = t1120*t1133;
  t1154 = 0.01841*t1152;
  t1174 = -0.70544*t1169;
  t1175 = t1154 + t1174;
  t1196 = -0.70544*t1152;
  t1200 = -0.01841*t1169;
  t1202 = t1196 + t1200;
  t2107 = Cos(var1[20]);
  t2110 = -1.*t2107;
  t2114 = 1. + t2110;
  t2130 = Sin(var1[20]);
  t2075 = t1175*t1189;
  t2080 = t1202*t1238;
  t2147 = 0.005481192614*t2114;
  t2129 = 0.07769774964800001*t2114;
  t2175 = -0.0004284921280000001*t2114;
  t2224 = 0.005498*t2130;
  t2231 = 0.996943*t2130;
  t2205 = -0.077936*t2130;
  t2247 = 0.0004284921280000001*t2114;
  t2177 = -0.996943*t2130;
  t2271 = -0.005481192614*t2114;
  t2150 = 0.077936*t2130;
  t2236 = -0.07769774964800001*t2114;
  t2133 = -0.005498*t2130;
  t1261 = -1.11344*t1260;
  t1266 = 0.02159*t1265;
  t1272 = t1261 + t1266;
  t1300 = -0.02159*t1260;
  t1325 = -1.11344*t1265;
  t1327 = t1300 + t1325;
  t1354 = t1265*t1292;
  t1360 = t1242*t1336;
  t1361 = t1354 + t1360;
  t1371 = t1242*t1292;
  t1373 = -1.*t1265*t1336;
  t1374 = t1371 + t1373;
  t1940 = -0.0233*t98*t111;
  t386 = -1.*t374;
  t432 = 1. + t386;
  t2381 = -0.135*t98*t432*t333;
  t2382 = -0.135*t242*t1387;
  t1418 = 0.135*t1414;
  t1428 = 0.049*t1419;
  t1429 = t1418 + t1428;
  t1433 = -0.049*t1414;
  t1438 = 0.135*t1419;
  t1446 = t1433 + t1438;
  t1455 = t1409*t1401;
  t1457 = -1.*t98*t111*t1419;
  t1466 = t1455 + t1457;
  t2401 = t1401*t1429;
  t2402 = t98*t111*t1446;
  t1517 = -0.049*t1509;
  t1521 = -0.09*t1519;
  t1525 = t1517 + t1521;
  t1542 = -0.09*t1509;
  t1547 = 0.049*t1519;
  t1549 = t1542 + t1547;
  t2413 = t1481*t1525;
  t2414 = t1541*t1549;
  t1569 = -0.049*t1565;
  t1575 = -0.21*t1573;
  t1576 = t1569 + t1575;
  t1599 = -0.21*t1565;
  t1600 = 0.049*t1573;
  t1617 = t1599 + t1600;
  t2437 = t1576*t1587;
  t2438 = t1617*t1639;
  t1678 = -0.27068*t1677;
  t1682 = 0.00159*t1679;
  t1689 = t1678 + t1682;
  t1724 = -0.00159*t1677;
  t1726 = -0.27068*t1679;
  t1736 = t1724 + t1726;
  t2458 = t1689*t1696;
  t2463 = t1736*t1742;
  t1762 = 0.01841*t1757;
  t1772 = -0.70544*t1771;
  t1775 = t1762 + t1772;
  t1788 = -0.70544*t1757;
  t1797 = -0.01841*t1771;
  t1799 = t1788 + t1797;
  t2495 = Cos(var1[12]);
  t2498 = -1.*t2495;
  t2504 = 1. + t2498;
  t2510 = Sin(var1[12]);
  t2478 = t1775*t1782;
  t2479 = t1799*t1807;
  t2509 = -0.005481192614*t2504;
  t2520 = -0.07769774964800001*t2504;
  t2542 = -0.0004284921280000001*t2504;
  t2575 = -0.005498*t2510;
  t2580 = 0.996943*t2510;
  t2560 = 0.077936*t2510;
  t2617 = 0.0004284921280000001*t2504;
  t2546 = -0.996943*t2510;
  t2650 = 0.005481192614*t2504;
  t2511 = -0.077936*t2510;
  t2592 = 0.07769774964800001*t2504;
  t2522 = 0.005498*t2510;
  t1829 = -1.11344*t1826;
  t1835 = 0.02159*t1834;
  t1836 = t1829 + t1835;
  t1851 = -0.02159*t1826;
  t1853 = -1.11344*t1834;
  t1856 = t1851 + t1853;
  t1887 = t1834*t1846;
  t1889 = t1820*t1882;
  t1891 = t1887 + t1889;
  t1904 = t1820*t1846;
  t1907 = -1.*t1834*t1882;
  t1910 = t1904 + t1907;
  t2791 = Sin(var1[3]);
  t2799 = Cos(var1[3]);
  t2811 = t2799*t111;
  t2818 = -1.*t2791*t242*t333;
  t2819 = t2811 + t2818;
  t2796 = t111*t2791*t242;
  t2803 = t2799*t333;
  t2806 = t2796 + t2803;
  t2826 = -1.*t98*t231*t2791;
  t2832 = t251*t2819;
  t2835 = t2826 + t2832;
  t2840 = -1.*t251*t98*t2791;
  t2845 = -1.*t231*t2819;
  t2852 = t2840 + t2845;
  t2875 = t127*t2806;
  t2877 = t208*t2835;
  t2881 = t2875 + t2877;
  t2891 = t600*t2852;
  t2901 = t534*t2881;
  t2907 = t2891 + t2901;
  t2909 = t534*t2852;
  t2917 = -1.*t600*t2881;
  t2920 = t2909 + t2917;
  t2924 = -1.*t855*t2907;
  t2928 = t812*t2920;
  t2932 = t2924 + t2928;
  t2935 = t812*t2907;
  t2936 = t855*t2920;
  t2939 = t2935 + t2936;
  t2946 = t1057*t2932;
  t2947 = t995*t2939;
  t2954 = t2946 + t2947;
  t2959 = t995*t2932;
  t2960 = -1.*t1057*t2939;
  t2971 = t2959 + t2960;
  t2975 = -1.*t1169*t2954;
  t2977 = t1147*t2971;
  t2980 = t2975 + t2977;
  t2989 = t1147*t2954;
  t2990 = t1169*t2971;
  t2993 = t2989 + t2990;
  t3028 = t374*t2819;
  t3030 = -1.*t98*t2791*t1387;
  t3031 = t3028 + t3030;
  t3048 = t1409*t2806;
  t3050 = t3031*t1419;
  t3053 = t3048 + t3050;
  t3057 = -1.*t98*t374*t2791;
  t3058 = -1.*t2819*t1387;
  t3060 = t3057 + t3058;
  t3063 = t1492*t3053;
  t3068 = t3060*t1519;
  t3069 = t3063 + t3068;
  t3074 = t1492*t3060;
  t3075 = -1.*t3053*t1519;
  t3078 = t3074 + t3075;
  t3080 = -1.*t1573*t3069;
  t3081 = t1557*t3078;
  t3085 = t3080 + t3081;
  t3089 = t1557*t3069;
  t3090 = t1573*t3078;
  t3094 = t3089 + t3090;
  t3105 = t1679*t3085;
  t3114 = t1646*t3094;
  t3115 = t3105 + t3114;
  t3118 = t1646*t3085;
  t3119 = -1.*t1679*t3094;
  t3127 = t3118 + t3119;
  t3131 = -1.*t1771*t3115;
  t3132 = t1749*t3127;
  t3134 = t3131 + t3132;
  t3139 = t1749*t3115;
  t3142 = t1771*t3127;
  t3143 = t3139 + t3142;
  t3192 = -0.135*t98*t231*t2791;
  t3199 = -0.135*t332*t2819;
  t2863 = -1.*t208*t2806;
  t2865 = t127*t2835;
  t2866 = t2863 + t2865;
  t3211 = t214*t2806;
  t3212 = t470*t2835;
  t3225 = t609*t2852;
  t3229 = t763*t2881;
  t3238 = t867*t2907;
  t3239 = t971*t2920;
  t3250 = t1081*t2932;
  t3251 = t1120*t2939;
  t2101 = 2.1934241414728571e-7*var1[20];
  t2119 = -0.000033783761634830594*t2114;
  t2137 = t2129 + t2133;
  t2139 = -0.021877537552*t2137;
  t2155 = t2147 + t2150;
  t2156 = -0.6934341012630001*t2155;
  t2159 = t2101 + t2119 + t2139 + t2156;
  t3259 = t1175*t2954;
  t3261 = t1202*t2971;
  t2162 = -1.2096424700126054e-9*var1[20];
  t2169 = -0.6934128581485427*t2114;
  t2191 = t2175 + t2177;
  t2197 = -0.021877537552*t2191;
  t2207 = t2147 + t2205;
  t2210 = -0.005534467322*t2207;
  t2212 = t2162 + t2169 + t2197 + t2210;
  t2215 = -1.7147089040178687e-8*var1[20];
  t2223 = -0.021744644052735636*t2114;
  t2225 = t2129 + t2224;
  t2229 = -0.005534467322*t2225;
  t2232 = t2175 + t2231;
  t2233 = -0.6934341012630001*t2232;
  t2234 = t2215 + t2223 + t2229 + t2233;
  t2237 = t2236 + t2224;
  t2249 = t2247 + t2231;
  t2255 = -0.993925573253*t2114;
  t2262 = 1. + t2255;
  t2278 = t2271 + t2205;
  t2285 = -0.999969365345*t2114;
  t2286 = 1. + t2285;
  t2291 = t2247 + t2177;
  t2301 = -0.006104248100000001*t2114;
  t2313 = 1. + t2301;
  t2322 = t2271 + t2150;
  t2342 = t2236 + t2133;
  t3000 = t1265*t2980;
  t3004 = t1242*t2993;
  t3008 = t3000 + t3004;
  t3014 = t1242*t2980;
  t3016 = -1.*t1265*t2993;
  t3018 = t3014 + t3016;
  t3195 = -0.0233*t2806;
  t3336 = 0.135*t432*t2819;
  t3341 = 0.135*t98*t2791*t1387;
  t3040 = t1409*t3031;
  t3042 = -1.*t2806*t1419;
  t3043 = t3040 + t3042;
  t3356 = t3031*t1429;
  t3357 = t2806*t1446;
  t3373 = t3053*t1525;
  t3376 = t3060*t1549;
  t3385 = t1576*t3069;
  t3387 = t1617*t3078;
  t3399 = t1689*t3085;
  t3401 = t1736*t3094;
  t2494 = -2.1934241414728571e-7*var1[12];
  t2507 = 0.000033783761634830594*t2504;
  t2512 = t2509 + t2511;
  t2515 = -0.6934341012630001*t2512;
  t2526 = t2520 + t2522;
  t2530 = -0.021877537552*t2526;
  t2531 = t2494 + t2507 + t2515 + t2530;
  t3416 = t1775*t3115;
  t3417 = t1799*t3127;
  t2536 = -1.2096424700126054e-9*var1[12];
  t2539 = -0.6934128581485427*t2504;
  t2549 = t2542 + t2546;
  t2552 = -0.021877537552*t2549;
  t2561 = t2509 + t2560;
  t2563 = 0.005534467322*t2561;
  t2566 = t2536 + t2539 + t2552 + t2563;
  t2569 = -1.7147089040178687e-8*var1[12];
  t2574 = -0.021744644052735636*t2504;
  t2577 = t2520 + t2575;
  t2579 = 0.005534467322*t2577;
  t2582 = t2542 + t2580;
  t2584 = -0.6934341012630001*t2582;
  t2588 = t2569 + t2574 + t2579 + t2584;
  t2606 = t2592 + t2575;
  t2619 = t2617 + t2580;
  t2631 = -0.993925573253*t2504;
  t2632 = 1. + t2631;
  t2653 = t2650 + t2560;
  t2662 = -0.999969365345*t2504;
  t2668 = 1. + t2662;
  t2679 = t2617 + t2546;
  t2695 = -0.006104248100000001*t2504;
  t2697 = 1. + t2695;
  t2707 = t2650 + t2511;
  t2717 = t2592 + t2522;
  t3149 = t1834*t3134;
  t3150 = t1820*t3143;
  t3153 = t3149 + t3150;
  t3159 = t1820*t3134;
  t3165 = -1.*t1834*t3143;
  t3168 = t3159 + t3165;
  t3511 = t111*t2791;
  t3518 = t2799*t242*t333;
  t3519 = t3511 + t3518;
  t3503 = -1.*t2799*t111*t242;
  t3505 = t2791*t333;
  t3508 = t3503 + t3505;
  t3528 = t2799*t98*t231;
  t3531 = t251*t3519;
  t3533 = t3528 + t3531;
  t3538 = t251*t2799*t98;
  t3544 = -1.*t231*t3519;
  t3545 = t3538 + t3544;
  t3558 = t127*t3508;
  t3559 = t208*t3533;
  t3560 = t3558 + t3559;
  t3563 = t600*t3545;
  t3564 = t534*t3560;
  t3565 = t3563 + t3564;
  t3567 = t534*t3545;
  t3568 = -1.*t600*t3560;
  t3569 = t3567 + t3568;
  t3572 = -1.*t855*t3565;
  t3577 = t812*t3569;
  t3581 = t3572 + t3577;
  t3587 = t812*t3565;
  t3591 = t855*t3569;
  t3594 = t3587 + t3591;
  t3597 = t1057*t3581;
  t3600 = t995*t3594;
  t3601 = t3597 + t3600;
  t3609 = t995*t3581;
  t3610 = -1.*t1057*t3594;
  t3611 = t3609 + t3610;
  t3616 = -1.*t1169*t3601;
  t3619 = t1147*t3611;
  t3621 = t3616 + t3619;
  t3623 = t1147*t3601;
  t3626 = t1169*t3611;
  t3630 = t3623 + t3626;
  t3659 = t374*t3519;
  t3661 = t2799*t98*t1387;
  t3662 = t3659 + t3661;
  t3676 = t1409*t3508;
  t3677 = t3662*t1419;
  t3678 = t3676 + t3677;
  t3684 = t2799*t98*t374;
  t3686 = -1.*t3519*t1387;
  t3687 = t3684 + t3686;
  t3692 = t1492*t3678;
  t3696 = t3687*t1519;
  t3697 = t3692 + t3696;
  t3703 = t1492*t3687;
  t3705 = -1.*t3678*t1519;
  t3706 = t3703 + t3705;
  t3717 = -1.*t1573*t3697;
  t3718 = t1557*t3706;
  t3720 = t3717 + t3718;
  t3725 = t1557*t3697;
  t3726 = t1573*t3706;
  t3727 = t3725 + t3726;
  t3734 = t1679*t3720;
  t3742 = t1646*t3727;
  t3744 = t3734 + t3742;
  t3748 = t1646*t3720;
  t3749 = -1.*t1679*t3727;
  t3750 = t3748 + t3749;
  t3755 = -1.*t1771*t3744;
  t3757 = t1749*t3750;
  t3759 = t3755 + t3757;
  t3764 = t1749*t3744;
  t3765 = t1771*t3750;
  t3766 = t3764 + t3765;
  t3804 = 0.135*t2799*t98*t231;
  t3809 = -0.135*t332*t3519;
  t3550 = -1.*t208*t3508;
  t3552 = t127*t3533;
  t3555 = t3550 + t3552;
  t3821 = t214*t3508;
  t3824 = t470*t3533;
  t3839 = t609*t3545;
  t3847 = t763*t3560;
  t3866 = t867*t3565;
  t3868 = t971*t3569;
  t3885 = t1081*t3581;
  t3886 = t1120*t3594;
  t3902 = t1175*t3601;
  t3908 = t1202*t3611;
  t3636 = t1265*t3621;
  t3645 = t1242*t3630;
  t3649 = t3636 + t3645;
  t3654 = t1242*t3621;
  t3655 = -1.*t1265*t3630;
  t3656 = t3654 + t3655;
  t3808 = -0.0233*t3508;
  t3999 = 0.135*t432*t3519;
  t4000 = -0.135*t2799*t98*t1387;
  t3667 = t1409*t3662;
  t3673 = -1.*t3508*t1419;
  t3674 = t3667 + t3673;
  t4018 = t3662*t1429;
  t4023 = t3508*t1446;
  t4039 = t3678*t1525;
  t4043 = t3687*t1549;
  t4056 = t1576*t3697;
  t4057 = t1617*t3706;
  t4067 = t1689*t3720;
  t4068 = t1736*t3727;
  t4082 = t1775*t3744;
  t4084 = t1799*t3750;
  t3774 = t1834*t3759;
  t3775 = t1820*t3766;
  t3779 = t3774 + t3775;
  t3782 = t1820*t3759;
  t3783 = -1.*t1834*t3766;
  t3785 = t3782 + t3783;
  p_output1[0]=0.5*(-1.*t1081*t1097 - 1.*t1120*t1133 - 1.*t1175*t1189 - 1.*t1202*t1238 - 1.*t1272*t1292 - 1.*t1327*t1336 - 0.0306*t1361 + 1.13106*t1374 - 1.*t1401*t1429 - 0.1305*t1466 - 1.*t1481*t1525 - 1.*t1541*t1549 - 1.*t1576*t1587 - 1.*t1617*t1639 - 1.*t1689*t1696 - 1.*t1736*t1742 - 1.*t1775*t1782 - 1.*t1799*t1807 - 1.*t1836*t1846 - 1.*t1856*t1882 - 0.0306*t1891 + 1.13106*t1910 + 0.135*t1387*t242 - 0.135*t231*t242 - 1.*t470*t514 - 1.*t609*t643 + 0.1305*t734 - 1.*t763*t796 - 1.*t867*t919 - 1.*t111*t1446*t98 - 1.*t111*t214*t98 - 0.135*t332*t333*t98 + 0.135*t333*t432*t98 - 1.*t971*t984 - 2.*var1[0]) + 0.0288377642750394*(1.965608*(0.1351*t1401 + 0.01793*t1541 + t1940 + t2381 + t2382 + var1[0]) + 1.316608*(0.135*t1466 - 0.049*t1481 - 0.0343*t1541 + t2381 + t2382 + t2401 + t2402 + var1[0]) + 5.79228*(0.17081*t1466 - 0.04895*t1587 - 0.14946*t1639 + t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + var1[0]) + 1.03008*(0.132168*t1466 - 0.255862*t1696 - 0.007761*t1742 + t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + t2437 + t2438 + var1[0]) + 0.763*(0.130288*t1466 - 0.000421*t1782 - 0.45406*t1807 + t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + t2437 + t2438 + t2458 + t2463 + var1[0]) + 1.03*(0.127241*t1466 - 0.826587*t1846 - 0.004179*t1882 + t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + t2437 + t2438 + t2458 + t2463 + t2478 + t2479 + var1[0]) + 0.1498*(0.13064*t1466 + t1836*t1846 + t1856*t1882 + 0.00589*t1891 - 1.11818*t1910 + t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + t2437 + t2438 + t2458 + t2463 + t2478 + t2479 + var1[0]) + 0.126*(t2381 + t2382 + t2401 + t2402 + t2413 + t2414 + t2437 + t2438 + t2458 + t2463 + t2478 + t2479 + t1466*t2531 + t1846*t2566 + t1882*t2588 + 0.01889*(t1466*t2606 + t1846*t2619 + t1882*t2632) - 0.617968*(t1466*t2653 + t1846*t2668 + t1882*t2679) + 0.126739*(t1466*t2697 + t1846*t2707 + t1882*t2717) + var1[0]) + 1.965608*(t1940 + t1943 + t1944 - 0.1351*t514 + 0.01793*t643 + var1[0]) + 1.03008*(-0.255862*t1097 - 0.007761*t1133 + t1943 + t1944 + t1963 + t1966 + t1978 + t1986 + t2012 + t2013 - 0.132168*t734 + var1[0]) + 0.1498*(t1272*t1292 + t1327*t1336 + 0.00589*t1361 - 1.11818*t1374 + t1943 + t1944 + t1963 + t1966 + t1978 + t1986 + t2012 + t2013 + t2042 + t2047 + t2075 + t2080 - 0.13064*t734 + var1[0]) + 0.763*(-0.000421*t1189 - 0.45406*t1238 + t1943 + t1944 + t1963 + t1966 + t1978 + t1986 + t2012 + t2013 + t2042 + t2047 - 0.130288*t734 + var1[0]) + 1.03*(-0.826587*t1292 - 0.004179*t1336 + t1943 + t1944 + t1963 + t1966 + t1978 + t1986 + t2012 + t2013 + t2042 + t2047 + t2075 + t2080 - 0.127241*t734 + var1[0]) + 0.126*(t1943 + t1944 + t1963 + t1966 + t1978 + t1986 + t2012 + t2013 + t2042 + t2047 + t2075 + t2080 + t1292*t2212 + t1336*t2234 + t2159*t734 + 0.01889*(t1292*t2249 + t1336*t2262 + t2237*t734) - 0.617968*(t1292*t2286 + t1336*t2291 + t2278*t734) - 0.126739*(t1292*t2322 + t1336*t2342 + t2313*t734) + var1[0]) + 1.316608*(t1943 + t1944 + t1963 + t1966 - 0.0343*t643 - 0.135*t734 - 0.049*t796 + var1[0]) + 10.33*(0.02841*t242 + 0.05066*t111*t98 - 0.000346*t333*t98 + var1[0]) + 5.79228*(t1943 + t1944 + t1963 + t1966 + t1978 + t1986 - 0.17081*t734 - 0.04895*t919 - 0.14946*t984 + var1[0]));
  p_output1[1]=0.5*(-1.*t1446*t2806 - 1.*t214*t2806 + 0.1305*t2866 - 1.*t1081*t2932 - 1.*t1120*t2939 - 1.*t1175*t2954 - 1.*t1202*t2971 - 1.*t1272*t2980 - 1.*t1327*t2993 - 0.0306*t3008 + 1.13106*t3018 - 1.*t1429*t3031 - 0.1305*t3043 - 1.*t1525*t3053 - 1.*t1549*t3060 - 1.*t1576*t3069 - 1.*t1617*t3078 - 1.*t1689*t3085 - 1.*t1736*t3094 - 1.*t1775*t3115 - 1.*t1799*t3127 - 1.*t1836*t3134 - 1.*t1856*t3143 - 0.0306*t3153 + 1.13106*t3168 + 0.135*t2819*t332 - 0.135*t2819*t432 - 1.*t2835*t470 - 1.*t2852*t609 - 1.*t2881*t763 - 1.*t2907*t867 - 1.*t2920*t971 - 0.135*t1387*t2791*t98 + 0.135*t231*t2791*t98 - 2.*var1[1]) + 0.0288377642750394*(1.965608*(-0.1351*t2835 + 0.01793*t2852 + t3192 + t3195 + t3199 + var1[1]) + 1.316608*(-0.0343*t2852 - 0.135*t2866 - 0.049*t2881 + t3192 + t3199 + t3211 + t3212 + var1[1]) + 5.79228*(-0.17081*t2866 - 0.04895*t2907 - 0.14946*t2920 + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + var1[1]) + 1.03008*(-0.132168*t2866 - 0.255862*t2932 - 0.007761*t2939 + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + t3238 + t3239 + var1[1]) + 0.763*(-0.130288*t2866 - 0.000421*t2954 - 0.45406*t2971 + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + t3238 + t3239 + t3250 + t3251 + var1[1]) + 1.03*(-0.127241*t2866 - 0.826587*t2980 - 0.004179*t2993 + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + t3238 + t3239 + t3250 + t3251 + t3259 + t3261 + var1[1]) + 0.126*(t2159*t2866 + t2212*t2980 + t2234*t2993 + 0.01889*(t2237*t2866 + t2249*t2980 + t2262*t2993) - 0.617968*(t2278*t2866 + t2286*t2980 + t2291*t2993) - 0.126739*(t2313*t2866 + t2322*t2980 + t2342*t2993) + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + t3238 + t3239 + t3250 + t3251 + t3259 + t3261 + var1[1]) + 0.1498*(-0.13064*t2866 + t1272*t2980 + t1327*t2993 + 0.00589*t3008 - 1.11818*t3018 + t3192 + t3199 + t3211 + t3212 + t3225 + t3229 + t3238 + t3239 + t3250 + t3251 + t3259 + t3261 + var1[1]) + 1.965608*(0.1351*t3031 + 0.01793*t3060 + t3195 + t3336 + t3341 + var1[1]) + 1.316608*(0.135*t3043 - 0.049*t3053 - 0.0343*t3060 + t3336 + t3341 + t3356 + t3357 + var1[1]) + 5.79228*(0.17081*t3043 - 0.04895*t3069 - 0.14946*t3078 + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + var1[1]) + 1.03008*(0.132168*t3043 - 0.255862*t3085 - 0.007761*t3094 + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + t3385 + t3387 + var1[1]) + 0.763*(0.130288*t3043 - 0.000421*t3115 - 0.45406*t3127 + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + t3385 + t3387 + t3399 + t3401 + var1[1]) + 1.03*(0.127241*t3043 - 0.826587*t3134 - 0.004179*t3143 + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + t3385 + t3387 + t3399 + t3401 + t3416 + t3417 + var1[1]) + 0.126*(t2531*t3043 + t2566*t3134 + t2588*t3143 + 0.01889*(t2606*t3043 + t2619*t3134 + t2632*t3143) - 0.617968*(t2653*t3043 + t2668*t3134 + t2679*t3143) + 0.126739*(t2697*t3043 + t2707*t3134 + t2717*t3143) + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + t3385 + t3387 + t3399 + t3401 + t3416 + t3417 + var1[1]) + 0.1498*(0.13064*t3043 + t1836*t3134 + t1856*t3143 + 0.00589*t3153 - 1.11818*t3168 + t3336 + t3341 + t3356 + t3357 + t3373 + t3376 + t3385 + t3387 + t3399 + t3401 + t3416 + t3417 + var1[1]) + 10.33*(0.05066*t2806 + 0.000346*t2819 - 0.02841*t2791*t98 + var1[1]));
  p_output1[2]=0.5*(-1.*t1446*t3508 - 1.*t214*t3508 + 0.135*t332*t3519 + 0.1305*t3555 - 1.*t1081*t3581 - 1.*t1120*t3594 - 1.*t1175*t3601 - 1.*t1202*t3611 - 1.*t1272*t3621 - 1.*t1327*t3630 - 0.0306*t3649 + 1.13106*t3656 - 1.*t1429*t3662 - 0.1305*t3674 - 1.*t1525*t3678 - 1.*t1549*t3687 - 1.*t1576*t3697 - 1.*t1617*t3706 - 1.*t1689*t3720 - 1.*t1736*t3727 - 1.*t1775*t3744 - 1.*t1799*t3750 - 1.*t1836*t3759 - 1.*t1856*t3766 - 0.0306*t3779 + 1.13106*t3785 - 0.135*t3519*t432 - 1.*t3533*t470 - 1.*t3545*t609 - 1.*t3560*t763 - 1.*t3565*t867 - 1.*t3569*t971 + 0.135*t1387*t2799*t98 - 0.135*t231*t2799*t98 - 2.*var1[2]) + 0.0288377642750394*(1.965608*(-0.1351*t3533 + 0.01793*t3545 + t3804 + t3808 + t3809 + var1[2]) + 1.316608*(-0.0343*t3545 - 0.135*t3555 - 0.049*t3560 + t3804 + t3809 + t3821 + t3824 + var1[2]) + 5.79228*(-0.17081*t3555 - 0.04895*t3565 - 0.14946*t3569 + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + var1[2]) + 1.03008*(-0.132168*t3555 - 0.255862*t3581 - 0.007761*t3594 + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + t3866 + t3868 + var1[2]) + 0.763*(-0.130288*t3555 - 0.000421*t3601 - 0.45406*t3611 + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + t3866 + t3868 + t3885 + t3886 + var1[2]) + 1.03*(-0.127241*t3555 - 0.826587*t3621 - 0.004179*t3630 + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + t3866 + t3868 + t3885 + t3886 + t3902 + t3908 + var1[2]) + 0.126*(t2159*t3555 + t2212*t3621 + t2234*t3630 + 0.01889*(t2237*t3555 + t2249*t3621 + t2262*t3630) - 0.617968*(t2278*t3555 + t2286*t3621 + t2291*t3630) - 0.126739*(t2313*t3555 + t2322*t3621 + t2342*t3630) + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + t3866 + t3868 + t3885 + t3886 + t3902 + t3908 + var1[2]) + 0.1498*(-0.13064*t3555 + t1272*t3621 + t1327*t3630 + 0.00589*t3649 - 1.11818*t3656 + t3804 + t3809 + t3821 + t3824 + t3839 + t3847 + t3866 + t3868 + t3885 + t3886 + t3902 + t3908 + var1[2]) + 1.965608*(0.1351*t3662 + 0.01793*t3687 + t3808 + t3999 + t4000 + var1[2]) + 1.316608*(0.135*t3674 - 0.049*t3678 - 0.0343*t3687 + t3999 + t4000 + t4018 + t4023 + var1[2]) + 5.79228*(0.17081*t3674 - 0.04895*t3697 - 0.14946*t3706 + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + var1[2]) + 1.03008*(0.132168*t3674 - 0.255862*t3720 - 0.007761*t3727 + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + t4056 + t4057 + var1[2]) + 0.763*(0.130288*t3674 - 0.000421*t3744 - 0.45406*t3750 + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + t4056 + t4057 + t4067 + t4068 + var1[2]) + 1.03*(0.127241*t3674 - 0.826587*t3759 - 0.004179*t3766 + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + t4056 + t4057 + t4067 + t4068 + t4082 + t4084 + var1[2]) + 0.126*(t2531*t3674 + t2566*t3759 + t2588*t3766 + 0.01889*(t2606*t3674 + t2619*t3759 + t2632*t3766) - 0.617968*(t2653*t3674 + t2668*t3759 + t2679*t3766) + 0.126739*(t2697*t3674 + t2707*t3759 + t2717*t3766) + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + t4056 + t4057 + t4067 + t4068 + t4082 + t4084 + var1[2]) + 0.1498*(0.13064*t3674 + t1836*t3759 + t1856*t3766 + 0.00589*t3779 - 1.11818*t3785 + t3999 + t4000 + t4018 + t4023 + t4039 + t4043 + t4056 + t4057 + t4067 + t4068 + t4082 + t4084 + var1[2]) + 10.33*(0.05066*t3508 + 0.000346*t3519 + 0.02841*t2799*t98 + var1[2]));
  p_output1[3]=var1[3];
  p_output1[4]=var1[4];
  p_output1[5]=var1[5];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 6, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void yaStandCOM_new_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




