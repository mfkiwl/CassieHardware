/*
 * Automatically Generated from Mathematica.
 * Mon 13 Sep 2021 16:09:04 GMT-07:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "p_com_RightStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t385;
  double t708;
  double t709;
  double t713;
  double t719;
  double t938;
  double t966;
  double t1035;
  double t1041;
  double t694;
  double t1065;
  double t1069;
  double t1077;
  double t1082;
  double t1086;
  double t1090;
  double t1105;
  double t1117;
  double t1129;
  double t1144;
  double t1183;
  double t1187;
  double t1195;
  double t1206;
  double t1218;
  double t1234;
  double t1248;
  double t1260;
  double t1265;
  double t1266;
  double t1272;
  double t1273;
  double t1274;
  double t1276;
  double t1277;
  double t1281;
  double t1285;
  double t1322;
  double t1337;
  double t1344;
  double t1384;
  double t1385;
  double t1386;
  double t1388;
  double t1389;
  double t1390;
  double t1393;
  double t1396;
  double t1397;
  double t1398;
  double t1443;
  double t1458;
  double t1480;
  double t1485;
  double t1487;
  double t1489;
  double t1491;
  double t1495;
  double t1504;
  double t1508;
  double t1541;
  double t1544;
  double t1548;
  double t1036;
  double t1037;
  double t715;
  double t800;
  double t847;
  double t1615;
  double t1616;
  double t1049;
  double t1053;
  double t1061;
  double t1152;
  double t1156;
  double t1160;
  double t1624;
  double t1625;
  double t1097;
  double t1109;
  double t1113;
  double t1171;
  double t1175;
  double t1179;
  double t1646;
  double t1666;
  double t1244;
  double t1252;
  double t1256;
  double t1268;
  double t1269;
  double t1270;
  double t1678;
  double t1679;
  double t1284;
  double t1299;
  double t1313;
  double t1371;
  double t1382;
  double t1383;
  double t1695;
  double t1696;
  double t1391;
  double t1394;
  double t1395;
  double t1407;
  double t1413;
  double t1437;
  double t1732;
  double t1733;
  double t1734;
  double t1738;
  double t1722;
  double t1724;
  double t1758;
  double t1737;
  double t1772;
  double t1947;
  double t1992;
  double t1814;
  double t2124;
  double t1776;
  double t2254;
  double t1762;
  double t2086;
  double t1746;
  double t1490;
  double t1493;
  double t1494;
  double t1523;
  double t1534;
  double t1540;
  double t1553;
  double t1554;
  double t1555;
  double t1565;
  double t1566;
  double t1571;
  double t1614;
  double t2656;
  double t2680;
  double t2665;
  double t2670;
  double t2674;
  double t2686;
  double t2733;
  double t2742;
  double t2758;
  double t2714;
  double t2722;
  double t2724;
  double t2818;
  double t2822;
  double t2831;
  double t3369;
  double t3329;
  double t3373;
  double t3380;
  double t3601;
  double t3609;
  double t3648;
  double t3661;
  double t3722;
  double t3739;
  double t3748;
  double t4034;
  double t4079;
  double t4141;
  double t4180;
  double t4364;
  double t4418;
  double t4442;
  double t4455;
  double t4451;
  double t4471;
  double t4478;
  double t4506;
  double t4547;
  double t4590;
  double t4594;
  double t4634;
  double t4646;
  double t4669;
  double t4676;
  double t5155;
  double t5159;
  double t5312;
  double t5341;
  double t4741;
  double t4876;
  double t4909;
  double t5337;
  double t5427;
  double t5616;
  double t5670;
  double t5715;
  double t5765;
  double t5786;
  double t5796;
  double t5813;
  double t5822;
  double t5916;
  double t5997;
  double t6110;
  double t6112;
  double t6123;
  double t5975;
  double t5976;
  double t5982;
  double t6116;
  double t6124;
  double t6127;
  double t6136;
  double t6138;
  double t6139;
  double t6140;
  double t6150;
  double t6151;
  double t6163;
  double t6164;
  double t6346;
  double t6453;
  double t6504;
  double t6517;
  double t6177;
  double t6180;
  double t6184;
  double t6959;
  double t6965;
  double t6968;
  double t7238;
  double t6516;
  double t6527;
  double t6534;
  double t6539;
  double t6554;
  double t6583;
  double t6584;
  double t6592;
  double t7188;
  double t6593;
  double t6601;
  double t6602;
  double t7427;
  double t7875;
  double t6701;
  double t6730;
  double t6734;
  double t8060;
  double t8119;
  double t7908;
  double t8363;
  double t7893;
  double t8707;
  double t7312;
  double t8243;
  double t7428;
  double t9397;
  double t9399;
  double t9400;
  double t9502;
  double t9932;
  double t9998;
  double t10024;
  double t10035;
  double t10036;
  double t9962;
  double t10011;
  double t10014;
  double t10043;
  double t10070;
  double t10147;
  double t10164;
  double t10202;
  double t10203;
  double t10330;
  double t10376;
  double t10377;
  double t10380;
  double t10388;
  double t10391;
  double t10393;
  double t10394;
  double t10400;
  double t10412;
  double t10413;
  double t10420;
  double t10467;
  double t10487;
  double t10511;
  double t10532;
  double t10537;
  double t10541;
  double t10548;
  double t10566;
  double t10703;
  double t10721;
  double t10737;
  double t10744;
  double t10753;
  double t10767;
  double t10769;
  double t11009;
  double t11045;
  double t10215;
  double t10216;
  double t10223;
  double t11073;
  double t11077;
  double t11147;
  double t11201;
  double t11240;
  double t11245;
  double t11307;
  double t11310;
  double t1730;
  double t1736;
  double t1750;
  double t1754;
  double t1763;
  double t1764;
  double t1766;
  double t11365;
  double t11374;
  double t1768;
  double t1771;
  double t1797;
  double t1813;
  double t1815;
  double t1816;
  double t1818;
  double t1905;
  double t1921;
  double t1982;
  double t1990;
  double t2001;
  double t2044;
  double t2074;
  double t2091;
  double t2142;
  double t2162;
  double t2200;
  double t2260;
  double t2277;
  double t2281;
  double t2298;
  double t2318;
  double t2321;
  double t2331;
  double t2381;
  double t10781;
  double t10783;
  double t10854;
  double t10882;
  double t10898;
  double t10930;
  double t11011;
  double t11622;
  double t11623;
  double t11676;
  double t11681;
  double t11687;
  double t11624;
  double t11640;
  double t11643;
  double t11725;
  double t11727;
  double t11728;
  double t11740;
  double t11752;
  double t11787;
  double t11801;
  double t11805;
  double t11820;
  double t11839;
  double t11857;
  double t11858;
  double t11861;
  double t11867;
  double t11870;
  double t11902;
  double t11955;
  double t11958;
  double t11959;
  double t11960;
  double t11973;
  double t11985;
  double t11986;
  double t11991;
  double t12015;
  double t12021;
  double t12028;
  double t12029;
  double t12034;
  double t12043;
  double t12054;
  double t12059;
  double t6956;
  double t7138;
  double t7419;
  double t7424;
  double t7436;
  double t7492;
  double t7498;
  double t12103;
  double t12107;
  double t7577;
  double t7664;
  double t7900;
  double t7905;
  double t7974;
  double t7994;
  double t8006;
  double t12110;
  double t12111;
  double t12113;
  double t8055;
  double t8059;
  double t8066;
  double t8067;
  double t8123;
  double t8140;
  double t8182;
  double t12120;
  double t12121;
  double t12122;
  double t8255;
  double t8366;
  double t8462;
  double t8550;
  double t8764;
  double t8768;
  double t8771;
  double t8807;
  double t8871;
  double t8880;
  double t8929;
  double t9077;
  double t9425;
  double t9531;
  double t9563;
  double t9580;
  double t9587;
  double t9588;
  double t12240;
  double t12241;
  double t12242;
  double t12232;
  double t12233;
  double t12235;
  double t12247;
  double t12250;
  double t12253;
  double t12258;
  double t12261;
  double t12266;
  double t12281;
  double t12283;
  double t12284;
  double t12288;
  double t12289;
  double t12296;
  double t12298;
  double t12303;
  double t12307;
  double t12316;
  double t12317;
  double t12323;
  double t12325;
  double t12328;
  double t12340;
  double t12345;
  double t12349;
  double t12352;
  double t12369;
  double t12372;
  double t12373;
  double t12377;
  double t12380;
  double t12381;
  double t12384;
  double t12390;
  double t12392;
  double t12430;
  double t12443;
  double t12273;
  double t12274;
  double t12278;
  double t12459;
  double t12466;
  double t12485;
  double t12488;
  double t12501;
  double t12503;
  double t12516;
  double t12517;
  double t12532;
  double t12538;
  double t12398;
  double t12402;
  double t12403;
  double t12411;
  double t12412;
  double t12413;
  double t12431;
  double t12593;
  double t12594;
  double t12602;
  double t12603;
  double t12604;
  double t12595;
  double t12596;
  double t12597;
  double t12621;
  double t12625;
  double t12627;
  double t12629;
  double t12630;
  double t12636;
  double t12638;
  double t12639;
  double t12652;
  double t12653;
  double t12655;
  double t12658;
  double t12661;
  double t12664;
  double t12665;
  double t12670;
  double t12676;
  double t12677;
  double t12678;
  double t12679;
  double t12681;
  double t12683;
  double t12684;
  double t12685;
  double t12690;
  double t12691;
  double t12692;
  double t12693;
  double t12694;
  double t12696;
  double t12697;
  double t12698;
  double t12703;
  double t12704;
  double t12705;
  double t12706;
  double t12707;
  double t12709;
  double t12710;
  double t12711;
  t385 = Cos(var1[4]);
  t708 = Cos(var1[15]);
  t709 = -1.*t708;
  t713 = 1. + t709;
  t719 = Sin(var1[15]);
  t938 = Sin(var1[14]);
  t966 = Sin(var1[4]);
  t1035 = Cos(var1[14]);
  t1041 = Sin(var1[5]);
  t694 = Cos(var1[5]);
  t1065 = t938*t966;
  t1069 = -1.*t1035*t385*t1041;
  t1077 = t1065 + t1069;
  t1082 = Cos(var1[16]);
  t1086 = -1.*t1082;
  t1090 = 1. + t1086;
  t1105 = Sin(var1[16]);
  t1117 = t1035*t966;
  t1129 = t385*t938*t1041;
  t1144 = t1117 + t1129;
  t1183 = t708*t385*t694;
  t1187 = t719*t1077;
  t1195 = t1183 + t1187;
  t1206 = Cos(var1[17]);
  t1218 = -1.*t1206;
  t1234 = 1. + t1218;
  t1248 = Sin(var1[17]);
  t1260 = t1105*t1144;
  t1265 = t1082*t1195;
  t1266 = t1260 + t1265;
  t1272 = t1082*t1144;
  t1273 = -1.*t1105*t1195;
  t1274 = t1272 + t1273;
  t1276 = Cos(var1[18]);
  t1277 = -1.*t1276;
  t1281 = 1. + t1277;
  t1285 = Sin(var1[18]);
  t1322 = -1.*t1248*t1266;
  t1337 = t1206*t1274;
  t1344 = t1322 + t1337;
  t1384 = t1206*t1266;
  t1385 = t1248*t1274;
  t1386 = t1384 + t1385;
  t1388 = Cos(var1[19]);
  t1389 = -1.*t1388;
  t1390 = 1. + t1389;
  t1393 = Sin(var1[19]);
  t1396 = t1285*t1344;
  t1397 = t1276*t1386;
  t1398 = t1396 + t1397;
  t1443 = t1276*t1344;
  t1458 = -1.*t1285*t1386;
  t1480 = t1443 + t1458;
  t1485 = Cos(var1[21]);
  t1487 = -1.*t1485;
  t1489 = 1. + t1487;
  t1491 = Sin(var1[21]);
  t1495 = -1.*t1393*t1398;
  t1504 = t1388*t1480;
  t1508 = t1495 + t1504;
  t1541 = t1388*t1398;
  t1544 = t1393*t1480;
  t1548 = t1541 + t1544;
  t1036 = -1.*t1035;
  t1037 = 1. + t1036;
  t715 = -0.049*t713;
  t800 = -0.135*t719;
  t847 = t715 + t800;
  t1615 = 0.135*t938*t966;
  t1616 = 0.135*t1037*t385*t1041;
  t1049 = -0.135*t713;
  t1053 = 0.049*t719;
  t1061 = t1049 + t1053;
  t1152 = -1.*t385*t694*t719;
  t1156 = t708*t1077;
  t1160 = t1152 + t1156;
  t1624 = t385*t694*t847;
  t1625 = t1061*t1077;
  t1097 = -0.09*t1090;
  t1109 = 0.049*t1105;
  t1113 = t1097 + t1109;
  t1171 = -0.049*t1090;
  t1175 = -0.09*t1105;
  t1179 = t1171 + t1175;
  t1646 = t1113*t1144;
  t1666 = t1179*t1195;
  t1244 = -0.049*t1234;
  t1252 = -0.21*t1248;
  t1256 = t1244 + t1252;
  t1268 = -0.21*t1234;
  t1269 = 0.049*t1248;
  t1270 = t1268 + t1269;
  t1678 = t1256*t1266;
  t1679 = t1270*t1274;
  t1284 = -0.27068*t1281;
  t1299 = 0.00159*t1285;
  t1313 = t1284 + t1299;
  t1371 = -0.00159*t1281;
  t1382 = -0.27068*t1285;
  t1383 = t1371 + t1382;
  t1695 = t1313*t1344;
  t1696 = t1383*t1386;
  t1391 = 0.01841*t1390;
  t1394 = -0.70544*t1393;
  t1395 = t1391 + t1394;
  t1407 = -0.70544*t1390;
  t1413 = -0.01841*t1393;
  t1437 = t1407 + t1413;
  t1732 = Cos(var1[20]);
  t1733 = -1.*t1732;
  t1734 = 1. + t1733;
  t1738 = Sin(var1[20]);
  t1722 = t1395*t1398;
  t1724 = t1437*t1480;
  t1758 = 0.005481192614*t1734;
  t1737 = 0.07769774964800001*t1734;
  t1772 = -0.0004284921280000001*t1734;
  t1947 = 0.005498*t1738;
  t1992 = 0.996943*t1738;
  t1814 = -0.077936*t1738;
  t2124 = 0.0004284921280000001*t1734;
  t1776 = -0.996943*t1738;
  t2254 = -0.005481192614*t1734;
  t1762 = 0.077936*t1738;
  t2086 = -0.07769774964800001*t1734;
  t1746 = -0.005498*t1738;
  t1490 = -1.11344*t1489;
  t1493 = 0.02159*t1491;
  t1494 = t1490 + t1493;
  t1523 = -0.02159*t1489;
  t1534 = -1.11344*t1491;
  t1540 = t1523 + t1534;
  t1553 = t1491*t1508;
  t1554 = t1485*t1548;
  t1555 = t1553 + t1554;
  t1565 = t1485*t1508;
  t1566 = -1.*t1491*t1548;
  t1571 = t1565 + t1566;
  t1614 = -0.0233*t385*t694;
  t2656 = Cos(var1[6]);
  t2680 = Sin(var1[6]);
  t2665 = -1.*t2656;
  t2670 = 1. + t2665;
  t2674 = -0.135*t385*t2670*t1041;
  t2686 = -0.135*t966*t2680;
  t2733 = t2656*t966;
  t2742 = t385*t1041*t2680;
  t2758 = t2733 + t2742;
  t2714 = -1.*t385*t2656*t1041;
  t2722 = t966*t2680;
  t2724 = t2714 + t2722;
  t2818 = Cos(var1[7]);
  t2822 = -1.*t2818;
  t2831 = 1. + t2822;
  t3369 = Sin(var1[7]);
  t3329 = 0.135*t2831;
  t3373 = 0.049*t3369;
  t3380 = t3329 + t3373;
  t3601 = t2724*t3380;
  t3609 = -0.049*t2831;
  t3648 = 0.135*t3369;
  t3661 = t3609 + t3648;
  t3722 = t385*t694*t3661;
  t3739 = t2818*t2724;
  t3748 = -1.*t385*t694*t3369;
  t4034 = t3739 + t3748;
  t4079 = t385*t694*t2818;
  t4141 = t2724*t3369;
  t4180 = t4079 + t4141;
  t4364 = Cos(var1[8]);
  t4418 = -1.*t4364;
  t4442 = 1. + t4418;
  t4455 = Sin(var1[8]);
  t4451 = -0.049*t4442;
  t4471 = -0.09*t4455;
  t4478 = t4451 + t4471;
  t4506 = t4180*t4478;
  t4547 = -0.09*t4442;
  t4590 = 0.049*t4455;
  t4594 = t4547 + t4590;
  t4634 = t2758*t4594;
  t4646 = t4364*t4180;
  t4669 = t2758*t4455;
  t4676 = t4646 + t4669;
  t5155 = Cos(var1[9]);
  t5159 = -1.*t5155;
  t5312 = 1. + t5159;
  t5341 = Sin(var1[9]);
  t4741 = t4364*t2758;
  t4876 = -1.*t4180*t4455;
  t4909 = t4741 + t4876;
  t5337 = -0.049*t5312;
  t5427 = -0.21*t5341;
  t5616 = t5337 + t5427;
  t5670 = t5616*t4676;
  t5715 = -0.21*t5312;
  t5765 = 0.049*t5341;
  t5786 = t5715 + t5765;
  t5796 = t5786*t4909;
  t5813 = -1.*t5341*t4676;
  t5822 = t5155*t4909;
  t5916 = t5813 + t5822;
  t5997 = Cos(var1[10]);
  t6110 = -1.*t5997;
  t6112 = 1. + t6110;
  t6123 = Sin(var1[10]);
  t5975 = t5155*t4676;
  t5976 = t5341*t4909;
  t5982 = t5975 + t5976;
  t6116 = -0.27068*t6112;
  t6124 = 0.00159*t6123;
  t6127 = t6116 + t6124;
  t6136 = t6127*t5916;
  t6138 = -0.00159*t6112;
  t6139 = -0.27068*t6123;
  t6140 = t6138 + t6139;
  t6150 = t6140*t5982;
  t6151 = t6123*t5916;
  t6163 = t5997*t5982;
  t6164 = t6151 + t6163;
  t6346 = Cos(var1[11]);
  t6453 = -1.*t6346;
  t6504 = 1. + t6453;
  t6517 = Sin(var1[11]);
  t6177 = t5997*t5916;
  t6180 = -1.*t6123*t5982;
  t6184 = t6177 + t6180;
  t6959 = Cos(var1[12]);
  t6965 = -1.*t6959;
  t6968 = 1. + t6965;
  t7238 = Sin(var1[12]);
  t6516 = 0.01841*t6504;
  t6527 = -0.70544*t6517;
  t6534 = t6516 + t6527;
  t6539 = t6534*t6164;
  t6554 = -0.70544*t6504;
  t6583 = -0.01841*t6517;
  t6584 = t6554 + t6583;
  t6592 = t6584*t6184;
  t7188 = -0.005481192614*t6968;
  t6593 = -1.*t6517*t6164;
  t6601 = t6346*t6184;
  t6602 = t6593 + t6601;
  t7427 = -0.07769774964800001*t6968;
  t7875 = -0.0004284921280000001*t6968;
  t6701 = t6346*t6164;
  t6730 = t6517*t6184;
  t6734 = t6701 + t6730;
  t8060 = -0.005498*t7238;
  t8119 = 0.996943*t7238;
  t7908 = 0.077936*t7238;
  t8363 = 0.0004284921280000001*t6968;
  t7893 = -0.996943*t7238;
  t8707 = 0.005481192614*t6968;
  t7312 = -0.077936*t7238;
  t8243 = 0.07769774964800001*t6968;
  t7428 = 0.005498*t7238;
  t9397 = Cos(var1[13]);
  t9399 = -1.*t9397;
  t9400 = 1. + t9399;
  t9502 = Sin(var1[13]);
  t9932 = Sin(var1[3]);
  t9998 = Cos(var1[3]);
  t10024 = t9998*t694;
  t10035 = -1.*t9932*t966*t1041;
  t10036 = t10024 + t10035;
  t9962 = t694*t9932*t966;
  t10011 = t9998*t1041;
  t10014 = t9962 + t10011;
  t10043 = -1.*t385*t938*t9932;
  t10070 = t1035*t10036;
  t10147 = t10043 + t10070;
  t10164 = -1.*t1035*t385*t9932;
  t10202 = -1.*t938*t10036;
  t10203 = t10164 + t10202;
  t10330 = t708*t10014;
  t10376 = t719*t10147;
  t10377 = t10330 + t10376;
  t10380 = t1105*t10203;
  t10388 = t1082*t10377;
  t10391 = t10380 + t10388;
  t10393 = t1082*t10203;
  t10394 = -1.*t1105*t10377;
  t10400 = t10393 + t10394;
  t10412 = -1.*t1248*t10391;
  t10413 = t1206*t10400;
  t10420 = t10412 + t10413;
  t10467 = t1206*t10391;
  t10487 = t1248*t10400;
  t10511 = t10467 + t10487;
  t10532 = t1285*t10420;
  t10537 = t1276*t10511;
  t10541 = t10532 + t10537;
  t10548 = t1276*t10420;
  t10566 = -1.*t1285*t10511;
  t10703 = t10548 + t10566;
  t10721 = -1.*t1393*t10541;
  t10737 = t1388*t10703;
  t10744 = t10721 + t10737;
  t10753 = t1388*t10541;
  t10767 = t1393*t10703;
  t10769 = t10753 + t10767;
  t11009 = -0.135*t385*t938*t9932;
  t11045 = -0.135*t1037*t10036;
  t10215 = -1.*t719*t10014;
  t10216 = t708*t10147;
  t10223 = t10215 + t10216;
  t11073 = t847*t10014;
  t11077 = t1061*t10147;
  t11147 = t1113*t10203;
  t11201 = t1179*t10377;
  t11240 = t1256*t10391;
  t11245 = t1270*t10400;
  t11307 = t1313*t10420;
  t11310 = t1383*t10511;
  t1730 = 2.1934241414728571e-7*var1[20];
  t1736 = -0.000033783761634830594*t1734;
  t1750 = t1737 + t1746;
  t1754 = -0.021877537552*t1750;
  t1763 = t1758 + t1762;
  t1764 = -0.6934341012630001*t1763;
  t1766 = t1730 + t1736 + t1754 + t1764;
  t11365 = t1395*t10541;
  t11374 = t1437*t10703;
  t1768 = -1.2096424700126054e-9*var1[20];
  t1771 = -0.6934128581485427*t1734;
  t1797 = t1772 + t1776;
  t1813 = -0.021877537552*t1797;
  t1815 = t1758 + t1814;
  t1816 = -0.005534467322*t1815;
  t1818 = t1768 + t1771 + t1813 + t1816;
  t1905 = -1.7147089040178687e-8*var1[20];
  t1921 = -0.021744644052735636*t1734;
  t1982 = t1737 + t1947;
  t1990 = -0.005534467322*t1982;
  t2001 = t1772 + t1992;
  t2044 = -0.6934341012630001*t2001;
  t2074 = t1905 + t1921 + t1990 + t2044;
  t2091 = t2086 + t1947;
  t2142 = t2124 + t1992;
  t2162 = -0.993925573253*t1734;
  t2200 = 1. + t2162;
  t2260 = t2254 + t1814;
  t2277 = -0.999969365345*t1734;
  t2281 = 1. + t2277;
  t2298 = t2124 + t1776;
  t2318 = -0.006104248100000001*t1734;
  t2321 = 1. + t2318;
  t2331 = t2254 + t1762;
  t2381 = t2086 + t1746;
  t10781 = t1491*t10744;
  t10783 = t1485*t10769;
  t10854 = t10781 + t10783;
  t10882 = t1485*t10744;
  t10898 = -1.*t1491*t10769;
  t10930 = t10882 + t10898;
  t11011 = -0.0233*t10014;
  t11622 = 0.135*t2670*t10036;
  t11623 = 0.135*t385*t9932*t2680;
  t11676 = -1.*t385*t2656*t9932;
  t11681 = -1.*t10036*t2680;
  t11687 = t11676 + t11681;
  t11624 = t2656*t10036;
  t11640 = -1.*t385*t9932*t2680;
  t11643 = t11624 + t11640;
  t11725 = t11643*t3380;
  t11727 = t10014*t3661;
  t11728 = t2818*t11643;
  t11740 = -1.*t10014*t3369;
  t11752 = t11728 + t11740;
  t11787 = t2818*t10014;
  t11801 = t11643*t3369;
  t11805 = t11787 + t11801;
  t11820 = t11805*t4478;
  t11839 = t11687*t4594;
  t11857 = t4364*t11805;
  t11858 = t11687*t4455;
  t11861 = t11857 + t11858;
  t11867 = t4364*t11687;
  t11870 = -1.*t11805*t4455;
  t11902 = t11867 + t11870;
  t11955 = t5616*t11861;
  t11958 = t5786*t11902;
  t11959 = -1.*t5341*t11861;
  t11960 = t5155*t11902;
  t11973 = t11959 + t11960;
  t11985 = t5155*t11861;
  t11986 = t5341*t11902;
  t11991 = t11985 + t11986;
  t12015 = t6127*t11973;
  t12021 = t6140*t11991;
  t12028 = t6123*t11973;
  t12029 = t5997*t11991;
  t12034 = t12028 + t12029;
  t12043 = t5997*t11973;
  t12054 = -1.*t6123*t11991;
  t12059 = t12043 + t12054;
  t6956 = -2.1934241414728571e-7*var1[12];
  t7138 = 0.000033783761634830594*t6968;
  t7419 = t7188 + t7312;
  t7424 = -0.6934341012630001*t7419;
  t7436 = t7427 + t7428;
  t7492 = -0.021877537552*t7436;
  t7498 = t6956 + t7138 + t7424 + t7492;
  t12103 = t6534*t12034;
  t12107 = t6584*t12059;
  t7577 = -1.2096424700126054e-9*var1[12];
  t7664 = -0.6934128581485427*t6968;
  t7900 = t7875 + t7893;
  t7905 = -0.021877537552*t7900;
  t7974 = t7188 + t7908;
  t7994 = 0.005534467322*t7974;
  t8006 = t7577 + t7664 + t7905 + t7994;
  t12110 = -1.*t6517*t12034;
  t12111 = t6346*t12059;
  t12113 = t12110 + t12111;
  t8055 = -1.7147089040178687e-8*var1[12];
  t8059 = -0.021744644052735636*t6968;
  t8066 = t7427 + t8060;
  t8067 = 0.005534467322*t8066;
  t8123 = t7875 + t8119;
  t8140 = -0.6934341012630001*t8123;
  t8182 = t8055 + t8059 + t8067 + t8140;
  t12120 = t6346*t12034;
  t12121 = t6517*t12059;
  t12122 = t12120 + t12121;
  t8255 = t8243 + t8060;
  t8366 = t8363 + t8119;
  t8462 = -0.993925573253*t6968;
  t8550 = 1. + t8462;
  t8764 = t8707 + t7908;
  t8768 = -0.999969365345*t6968;
  t8771 = 1. + t8768;
  t8807 = t8363 + t7893;
  t8871 = -0.006104248100000001*t6968;
  t8880 = 1. + t8871;
  t8929 = t8707 + t7312;
  t9077 = t8243 + t7428;
  t9425 = -1.11344*t9400;
  t9531 = 0.02159*t9502;
  t9563 = t9425 + t9531;
  t9580 = -0.02159*t9400;
  t9587 = -1.11344*t9502;
  t9588 = t9580 + t9587;
  t12240 = t694*t9932;
  t12241 = t9998*t966*t1041;
  t12242 = t12240 + t12241;
  t12232 = -1.*t9998*t694*t966;
  t12233 = t9932*t1041;
  t12235 = t12232 + t12233;
  t12247 = t9998*t385*t938;
  t12250 = t1035*t12242;
  t12253 = t12247 + t12250;
  t12258 = t1035*t9998*t385;
  t12261 = -1.*t938*t12242;
  t12266 = t12258 + t12261;
  t12281 = t708*t12235;
  t12283 = t719*t12253;
  t12284 = t12281 + t12283;
  t12288 = t1105*t12266;
  t12289 = t1082*t12284;
  t12296 = t12288 + t12289;
  t12298 = t1082*t12266;
  t12303 = -1.*t1105*t12284;
  t12307 = t12298 + t12303;
  t12316 = -1.*t1248*t12296;
  t12317 = t1206*t12307;
  t12323 = t12316 + t12317;
  t12325 = t1206*t12296;
  t12328 = t1248*t12307;
  t12340 = t12325 + t12328;
  t12345 = t1285*t12323;
  t12349 = t1276*t12340;
  t12352 = t12345 + t12349;
  t12369 = t1276*t12323;
  t12372 = -1.*t1285*t12340;
  t12373 = t12369 + t12372;
  t12377 = -1.*t1393*t12352;
  t12380 = t1388*t12373;
  t12381 = t12377 + t12380;
  t12384 = t1388*t12352;
  t12390 = t1393*t12373;
  t12392 = t12384 + t12390;
  t12430 = 0.135*t9998*t385*t938;
  t12443 = -0.135*t1037*t12242;
  t12273 = -1.*t719*t12235;
  t12274 = t708*t12253;
  t12278 = t12273 + t12274;
  t12459 = t847*t12235;
  t12466 = t1061*t12253;
  t12485 = t1113*t12266;
  t12488 = t1179*t12284;
  t12501 = t1256*t12296;
  t12503 = t1270*t12307;
  t12516 = t1313*t12323;
  t12517 = t1383*t12340;
  t12532 = t1395*t12352;
  t12538 = t1437*t12373;
  t12398 = t1491*t12381;
  t12402 = t1485*t12392;
  t12403 = t12398 + t12402;
  t12411 = t1485*t12381;
  t12412 = -1.*t1491*t12392;
  t12413 = t12411 + t12412;
  t12431 = -0.0233*t12235;
  t12593 = 0.135*t2670*t12242;
  t12594 = -0.135*t9998*t385*t2680;
  t12602 = t9998*t385*t2656;
  t12603 = -1.*t12242*t2680;
  t12604 = t12602 + t12603;
  t12595 = t2656*t12242;
  t12596 = t9998*t385*t2680;
  t12597 = t12595 + t12596;
  t12621 = t12597*t3380;
  t12625 = t12235*t3661;
  t12627 = t2818*t12597;
  t12629 = -1.*t12235*t3369;
  t12630 = t12627 + t12629;
  t12636 = t2818*t12235;
  t12638 = t12597*t3369;
  t12639 = t12636 + t12638;
  t12652 = t12639*t4478;
  t12653 = t12604*t4594;
  t12655 = t4364*t12639;
  t12658 = t12604*t4455;
  t12661 = t12655 + t12658;
  t12664 = t4364*t12604;
  t12665 = -1.*t12639*t4455;
  t12670 = t12664 + t12665;
  t12676 = t5616*t12661;
  t12677 = t5786*t12670;
  t12678 = -1.*t5341*t12661;
  t12679 = t5155*t12670;
  t12681 = t12678 + t12679;
  t12683 = t5155*t12661;
  t12684 = t5341*t12670;
  t12685 = t12683 + t12684;
  t12690 = t6127*t12681;
  t12691 = t6140*t12685;
  t12692 = t6123*t12681;
  t12693 = t5997*t12685;
  t12694 = t12692 + t12693;
  t12696 = t5997*t12681;
  t12697 = -1.*t6123*t12685;
  t12698 = t12696 + t12697;
  t12703 = t6534*t12694;
  t12704 = t6584*t12698;
  t12705 = -1.*t6517*t12694;
  t12706 = t6346*t12698;
  t12707 = t12705 + t12706;
  t12709 = t6346*t12694;
  t12710 = t6517*t12698;
  t12711 = t12709 + t12710;
  p_output1[0]=-1.*t1061*t1077 - 1.*t1113*t1144 + 0.1305*t1160 - 1.*t1179*t1195 - 1.*t1256*t1266 - 1.*t1270*t1274 - 1.*t1313*t1344 - 1.*t1383*t1386 - 1.*t1395*t1398 - 1.*t1437*t1480 - 1.*t1494*t1508 - 1.*t1540*t1548 + 0.02159*t1555 + 1.11344*t1571 - 0.135*t1037*t1041*t385 - 1.*t385*t694*t847 - 0.135*t938*t966 - 1.*var1[0] + 0.0288377642750394*(1.965608*(-0.1351*t1077 + 0.01793*t1144 + t1614 + t1615 + t1616 + var1[0]) + 1.316608*(-0.0343*t1144 - 0.135*t1160 - 0.049*t1195 + t1615 + t1616 + t1624 + t1625 + var1[0]) + 5.79228*(-0.17081*t1160 - 0.04895*t1266 - 0.14946*t1274 + t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + var1[0]) + 1.03008*(-0.132168*t1160 - 0.255862*t1344 - 0.007761*t1386 + t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + t1678 + t1679 + var1[0]) + 0.763*(-0.130288*t1160 - 0.000421*t1398 - 0.45406*t1480 + t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + t1678 + t1679 + t1695 + t1696 + var1[0]) + 1.03*(-0.127241*t1160 - 0.826587*t1508 - 0.004179*t1548 + t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + t1678 + t1679 + t1695 + t1696 + t1722 + t1724 + var1[0]) + 0.1498*(-0.13064*t1160 + t1494*t1508 + t1540*t1548 + 0.00589*t1555 - 1.11818*t1571 + t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + t1678 + t1679 + t1695 + t1696 + t1722 + t1724 + var1[0]) + 0.126*(t1615 + t1616 + t1624 + t1625 + t1646 + t1666 + t1678 + t1679 + t1695 + t1696 + t1722 + t1724 + t1160*t1766 + t1508*t1818 + t1548*t2074 + 0.01889*(t1160*t2091 + t1508*t2142 + t1548*t2200) - 0.617968*(t1160*t2260 + t1508*t2281 + t1548*t2298) - 0.126739*(t1160*t2321 + t1508*t2331 + t1548*t2381) + var1[0]) + 1.965608*(t1614 + t2674 + t2686 + 0.1351*t2724 + 0.01793*t2758 + var1[0]) + 1.316608*(t2674 + t2686 - 0.0343*t2758 + t3601 + t3722 + 0.135*t4034 - 0.049*t4180 + var1[0]) + 5.79228*(t2674 + t2686 + t3601 + t3722 + 0.17081*t4034 + t4506 + t4634 - 0.04895*t4676 - 0.14946*t4909 + var1[0]) + 1.03008*(t2674 + t2686 + t3601 + t3722 + 0.132168*t4034 + t4506 + t4634 + t5670 + t5796 - 0.255862*t5916 - 0.007761*t5982 + var1[0]) + 0.763*(t2674 + t2686 + t3601 + t3722 + 0.130288*t4034 + t4506 + t4634 + t5670 + t5796 + t6136 + t6150 - 0.000421*t6164 - 0.45406*t6184 + var1[0]) + 1.03*(t2674 + t2686 + t3601 + t3722 + 0.127241*t4034 + t4506 + t4634 + t5670 + t5796 + t6136 + t6150 + t6539 + t6592 - 0.826587*t6602 - 0.004179*t6734 + var1[0]) + 0.126*(t2674 + t2686 + t3601 + t3722 + t4506 + t4634 + t5670 + t5796 + t6136 + t6150 + t6539 + t6592 + t4034*t7498 + t6602*t8006 + t6734*t8182 + 0.01889*(t4034*t8255 + t6602*t8366 + t6734*t8550) - 0.617968*(t4034*t8764 + t6602*t8771 + t6734*t8807) + 0.126739*(t4034*t8880 + t6602*t8929 + t6734*t9077) + var1[0]) + 0.1498*(t2674 + t2686 + t3601 + t3722 + 0.13064*t4034 + t4506 + t4634 + t5670 + t5796 + t6136 + t6150 + t6539 + t6592 + 0.00589*(t6734*t9397 + t6602*t9502) - 1.11818*(t6602*t9397 - 1.*t6734*t9502) + t6602*t9563 + t6734*t9588 + var1[0]) + 10.33*(-0.000346*t1041*t385 + 0.05066*t385*t694 + 0.02841*t966 + var1[0]));
  p_output1[1]=0.1305*t10223 + 0.135*t10036*t1037 - 1.*t10147*t1061 + 0.02159*t10854 + 1.11344*t10930 - 1.*t10203*t1113 - 1.*t10377*t1179 - 1.*t10391*t1256 - 1.*t10400*t1270 - 1.*t10420*t1313 - 1.*t10511*t1383 - 1.*t10541*t1395 - 1.*t10703*t1437 - 1.*t10744*t1494 - 1.*t10769*t1540 - 1.*t10014*t847 + 0.135*t385*t938*t9932 - 1.*var1[1] + 0.0288377642750394*(1.965608*(-0.1351*t10147 + 0.01793*t10203 + t11009 + t11011 + t11045 + var1[1]) + 1.316608*(-0.0343*t10203 - 0.135*t10223 - 0.049*t10377 + t11009 + t11045 + t11073 + t11077 + var1[1]) + 5.79228*(-0.17081*t10223 - 0.04895*t10391 - 0.14946*t10400 + t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + var1[1]) + 1.03008*(-0.132168*t10223 - 0.255862*t10420 - 0.007761*t10511 + t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + t11240 + t11245 + var1[1]) + 0.763*(-0.130288*t10223 - 0.000421*t10541 - 0.45406*t10703 + t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + t11240 + t11245 + t11307 + t11310 + var1[1]) + 1.03*(-0.127241*t10223 - 0.826587*t10744 - 0.004179*t10769 + t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + t11240 + t11245 + t11307 + t11310 + t11365 + t11374 + var1[1]) + 1.965608*(t11011 + t11622 + t11623 + 0.1351*t11643 + 0.01793*t11687 + var1[1]) + 1.316608*(t11622 + t11623 - 0.0343*t11687 + t11725 + t11727 + 0.135*t11752 - 0.049*t11805 + var1[1]) + 5.79228*(t11622 + t11623 + t11725 + t11727 + 0.17081*t11752 + t11820 + t11839 - 0.04895*t11861 - 0.14946*t11902 + var1[1]) + 1.03008*(t11622 + t11623 + t11725 + t11727 + 0.132168*t11752 + t11820 + t11839 + t11955 + t11958 - 0.255862*t11973 - 0.007761*t11991 + var1[1]) + 0.763*(t11622 + t11623 + t11725 + t11727 + 0.130288*t11752 + t11820 + t11839 + t11955 + t11958 + t12015 + t12021 - 0.000421*t12034 - 0.45406*t12059 + var1[1]) + 1.03*(t11622 + t11623 + t11725 + t11727 + 0.127241*t11752 + t11820 + t11839 + t11955 + t11958 + t12015 + t12021 + t12103 + t12107 - 0.826587*t12113 - 0.004179*t12122 + var1[1]) + 0.1498*(-0.13064*t10223 + 0.00589*t10854 - 1.11818*t10930 + t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + t11240 + t11245 + t11307 + t11310 + t11365 + t11374 + t10744*t1494 + t10769*t1540 + var1[1]) + 0.126*(t11009 + t11045 + t11073 + t11077 + t11147 + t11201 + t11240 + t11245 + t11307 + t11310 + t11365 + t11374 + t10223*t1766 + t10744*t1818 + t10769*t2074 + 0.01889*(t10223*t2091 + t10744*t2142 + t10769*t2200) - 0.617968*(t10223*t2260 + t10744*t2281 + t10769*t2298) - 0.126739*(t10223*t2321 + t10744*t2331 + t10769*t2381) + var1[1]) + 0.126*(t11622 + t11623 + t11725 + t11727 + t11820 + t11839 + t11955 + t11958 + t12015 + t12021 + t12103 + t12107 + t11752*t7498 + t12113*t8006 + t12122*t8182 + 0.01889*(t11752*t8255 + t12113*t8366 + t12122*t8550) - 0.617968*(t11752*t8764 + t12113*t8771 + t12122*t8807) + 0.126739*(t11752*t8880 + t12113*t8929 + t12122*t9077) + var1[1]) + 0.1498*(t11622 + t11623 + t11725 + t11727 + 0.13064*t11752 + t11820 + t11839 + t11955 + t11958 + t12015 + t12021 + t12103 + t12107 + 0.00589*(t12122*t9397 + t12113*t9502) - 1.11818*(t12113*t9397 - 1.*t12122*t9502) + t12113*t9563 + t12122*t9588 + var1[1]) + 10.33*(0.05066*t10014 + 0.000346*t10036 - 0.02841*t385*t9932 + var1[1]));
  p_output1[2]=0.135*t1037*t12242 - 1.*t1061*t12253 - 1.*t1113*t12266 + 0.1305*t12278 - 1.*t1179*t12284 + 0.02159*t12403 + 1.11344*t12413 - 1.*t12296*t1256 - 1.*t12307*t1270 - 1.*t12323*t1313 - 1.*t12340*t1383 - 1.*t12352*t1395 - 1.*t12373*t1437 - 1.*t12381*t1494 - 1.*t12392*t1540 - 1.*t12235*t847 - 0.135*t385*t938*t9998 - 1.*var1[2] + 0.0288377642750394*(1.965608*(-0.1351*t12253 + 0.01793*t12266 + t12430 + t12431 + t12443 + var1[2]) + 1.316608*(-0.0343*t12266 - 0.135*t12278 - 0.049*t12284 + t12430 + t12443 + t12459 + t12466 + var1[2]) + 5.79228*(-0.17081*t12278 - 0.04895*t12296 - 0.14946*t12307 + t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + var1[2]) + 1.03008*(-0.132168*t12278 - 0.255862*t12323 - 0.007761*t12340 + t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + t12501 + t12503 + var1[2]) + 0.763*(-0.130288*t12278 - 0.000421*t12352 - 0.45406*t12373 + t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + t12501 + t12503 + t12516 + t12517 + var1[2]) + 1.03*(-0.127241*t12278 - 0.826587*t12381 - 0.004179*t12392 + t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + t12501 + t12503 + t12516 + t12517 + t12532 + t12538 + var1[2]) + 1.965608*(t12431 + t12593 + t12594 + 0.1351*t12597 + 0.01793*t12604 + var1[2]) + 1.316608*(t12593 + t12594 - 0.0343*t12604 + t12621 + t12625 + 0.135*t12630 - 0.049*t12639 + var1[2]) + 5.79228*(t12593 + t12594 + t12621 + t12625 + 0.17081*t12630 + t12652 + t12653 - 0.04895*t12661 - 0.14946*t12670 + var1[2]) + 1.03008*(t12593 + t12594 + t12621 + t12625 + 0.132168*t12630 + t12652 + t12653 + t12676 + t12677 - 0.255862*t12681 - 0.007761*t12685 + var1[2]) + 0.763*(t12593 + t12594 + t12621 + t12625 + 0.130288*t12630 + t12652 + t12653 + t12676 + t12677 + t12690 + t12691 - 0.000421*t12694 - 0.45406*t12698 + var1[2]) + 1.03*(t12593 + t12594 + t12621 + t12625 + 0.127241*t12630 + t12652 + t12653 + t12676 + t12677 + t12690 + t12691 + t12703 + t12704 - 0.826587*t12707 - 0.004179*t12711 + var1[2]) + 0.1498*(-0.13064*t12278 + 0.00589*t12403 - 1.11818*t12413 + t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + t12501 + t12503 + t12516 + t12517 + t12532 + t12538 + t12381*t1494 + t12392*t1540 + var1[2]) + 0.126*(t12430 + t12443 + t12459 + t12466 + t12485 + t12488 + t12501 + t12503 + t12516 + t12517 + t12532 + t12538 + t12278*t1766 + t12381*t1818 + t12392*t2074 + 0.01889*(t12278*t2091 + t12381*t2142 + t12392*t2200) - 0.617968*(t12278*t2260 + t12381*t2281 + t12392*t2298) - 0.126739*(t12278*t2321 + t12381*t2331 + t12392*t2381) + var1[2]) + 0.126*(t12593 + t12594 + t12621 + t12625 + t12652 + t12653 + t12676 + t12677 + t12690 + t12691 + t12703 + t12704 + t12630*t7498 + t12707*t8006 + t12711*t8182 + 0.01889*(t12630*t8255 + t12707*t8366 + t12711*t8550) - 0.617968*(t12630*t8764 + t12707*t8771 + t12711*t8807) + 0.126739*(t12630*t8880 + t12707*t8929 + t12711*t9077) + var1[2]) + 0.1498*(t12593 + t12594 + t12621 + t12625 + 0.13064*t12630 + t12652 + t12653 + t12676 + t12677 + t12690 + t12691 + t12703 + t12704 + 0.00589*(t12711*t9397 + t12707*t9502) - 1.11818*(t12707*t9397 - 1.*t12711*t9502) + t12707*t9563 + t12711*t9588 + var1[2]) + 10.33*(0.05066*t12235 + 0.000346*t12242 + 0.02841*t385*t9998 + var1[2]));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void p_com_RightStance_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




