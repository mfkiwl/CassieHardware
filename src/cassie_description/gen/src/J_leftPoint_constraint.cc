/*
 * Automatically Generated from Mathematica.
 * Tue 2 Feb 2021 13:46:12 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "J_leftPoint_constraint.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t699;
  double t172;
  double t345;
  double t415;
  double t541;
  double t735;
  double t738;
  double t740;
  double t750;
  double t851;
  double t906;
  double t1016;
  double t1038;
  double t1073;
  double t1189;
  double t914;
  double t920;
  double t986;
  double t1263;
  double t1264;
  double t1293;
  double t1512;
  double t1523;
  double t1537;
  double t1564;
  double t1419;
  double t1471;
  double t1491;
  double t1615;
  double t1624;
  double t1666;
  double t1753;
  double t1765;
  double t1774;
  double t1814;
  double t1833;
  double t1840;
  double t1862;
  double t1944;
  double t1968;
  double t2023;
  double t2068;
  double t2072;
  double t2074;
  double t2087;
  double t2096;
  double t2156;
  double t2165;
  double t2185;
  double t2189;
  double t2190;
  double t2195;
  double t2198;
  double t2219;
  double t2246;
  double t2288;
  double t2296;
  double t2298;
  double t2339;
  double t2343;
  double t2349;
  double t195;
  double t343;
  double t2404;
  double t2405;
  double t2408;
  double t1132;
  double t1231;
  double t1233;
  double t1294;
  double t1343;
  double t1345;
  double t2500;
  double t2510;
  double t2520;
  double t2528;
  double t2531;
  double t2534;
  double t1551;
  double t1575;
  double t1602;
  double t1701;
  double t1726;
  double t1727;
  double t1784;
  double t1817;
  double t1828;
  double t2565;
  double t2574;
  double t2582;
  double t2586;
  double t2595;
  double t2610;
  double t1904;
  double t1912;
  double t1927;
  double t2085;
  double t2089;
  double t2092;
  double t2681;
  double t2689;
  double t2709;
  double t2750;
  double t2830;
  double t2854;
  double t2176;
  double t2178;
  double t2182;
  double t2226;
  double t2273;
  double t2283;
  double t2904;
  double t2928;
  double t2933;
  double t3144;
  double t3187;
  double t3253;
  double t2314;
  double t2322;
  double t2323;
  double t3311;
  double t3313;
  double t3361;
  double t3382;
  double t3438;
  double t3489;
  double t4426;
  double t4438;
  double t4447;
  double t4578;
  double t4630;
  double t4636;
  double t4294;
  double t4300;
  double t4333;
  double t4412;
  double t4511;
  double t4539;
  double t4549;
  double t4559;
  double t4560;
  double t4561;
  double t4653;
  double t4698;
  double t4725;
  double t4764;
  double t4776;
  double t4710;
  double t4790;
  double t4796;
  double t4893;
  double t4905;
  double t4914;
  double t4818;
  double t4957;
  double t4968;
  double t4975;
  double t4976;
  double t4988;
  double t4995;
  double t4996;
  double t5119;
  double t5121;
  double t5133;
  double t5147;
  double t4103;
  double t4153;
  double t4166;
  double t5229;
  double t5230;
  double t5233;
  double t5203;
  double t5225;
  double t5227;
  double t5228;
  double t5234;
  double t5252;
  double t5278;
  double t5285;
  double t5291;
  double t5267;
  double t5321;
  double t5331;
  double t5378;
  double t5384;
  double t5396;
  double t5155;
  double t5164;
  double t5187;
  double t5188;
  double t2373;
  double t2380;
  double t2389;
  double t5590;
  double t5593;
  double t5606;
  double t3836;
  double t3867;
  double t3888;
  double t5638;
  double t5639;
  double t5648;
  double t5658;
  double t4183;
  double t4246;
  double t4272;
  double t5366;
  double t5412;
  double t5417;
  double t5422;
  double t5423;
  double t5427;
  double t5428;
  double t5439;
  double t5444;
  double t5697;
  double t5709;
  double t5717;
  double t5741;
  double t5761;
  double t5779;
  double t5781;
  double t5794;
  double t5797;
  double t5800;
  double t5929;
  double t5932;
  double t5934;
  double t6071;
  double t6078;
  double t6087;
  double t6142;
  double t6150;
  double t6162;
  double t6218;
  double t6270;
  double t6278;
  double t6300;
  double t6301;
  double t6310;
  double t6318;
  double t6321;
  double t6337;
  double t6348;
  double t6349;
  double t6350;
  double t6364;
  double t6386;
  double t6387;
  double t6398;
  double t6401;
  double t6403;
  double t6517;
  double t6528;
  double t6529;
  double t6569;
  double t6571;
  double t6574;
  double t6577;
  double t6585;
  double t6590;
  double t6594;
  double t6595;
  double t6596;
  double t6603;
  double t6641;
  double t6649;
  double t6693;
  double t6696;
  double t6717;
  double t6725;
  double t6729;
  double t6732;
  double t6749;
  double t6762;
  double t6765;
  double t6767;
  double t6769;
  double t6771;
  double t6824;
  double t6826;
  double t6830;
  double t6873;
  double t6885;
  double t6886;
  double t6889;
  double t6900;
  double t6901;
  double t6926;
  double t6927;
  double t6935;
  double t6957;
  double t6958;
  double t6964;
  double t6973;
  double t6974;
  double t6975;
  double t6979;
  double t6980;
  double t6981;
  double t6988;
  double t6989;
  double t6998;
  double t7003;
  double t7007;
  double t7008;
  double t5189;
  double t5455;
  double t5456;
  double t7020;
  double t7021;
  double t7022;
  double t6793;
  double t6797;
  double t6808;
  double t7042;
  double t7051;
  double t7055;
  double t7063;
  double t7064;
  double t7067;
  double t6469;
  double t6498;
  double t6500;
  double t7131;
  double t7132;
  double t7133;
  double t7140;
  double t7141;
  double t7143;
  double t7145;
  double t7146;
  double t7148;
  double t7152;
  double t7154;
  double t7158;
  double t7162;
  double t7163;
  double t7171;
  double t7178;
  double t7180;
  double t7184;
  double t7190;
  double t7195;
  double t7198;
  double t7256;
  double t7259;
  double t7260;
  double t7293;
  double t7294;
  double t7295;
  double t7298;
  double t7299;
  double t7300;
  double t7306;
  double t7307;
  double t7308;
  double t7310;
  double t7311;
  double t7312;
  double t7314;
  double t7315;
  double t7316;
  double t7318;
  double t7319;
  double t7320;
  double t7322;
  double t7323;
  double t7324;
  double t7344;
  double t7345;
  double t7346;
  double t7349;
  double t7350;
  double t7351;
  double t7353;
  double t7354;
  double t7355;
  double t7357;
  double t7358;
  double t7359;
  double t7361;
  double t7362;
  double t7363;
  double t7365;
  double t7366;
  double t7367;
  double t7369;
  double t7370;
  double t7371;
  double t7377;
  double t7391;
  double t7407;
  double t7414;
  double t7416;
  double t7419;
  double t7420;
  double t7421;
  double t7422;
  double t7330;
  double t7331;
  double t7332;
  double t7245;
  double t7246;
  double t7249;
  double t7577;
  double t7578;
  double t7583;
  double t7590;
  double t7591;
  double t7592;
  double t7596;
  double t7603;
  double t7604;
  double t7609;
  double t7614;
  double t7616;
  double t7620;
  double t7623;
  double t7624;
  double t7629;
  double t7634;
  double t7639;
  double t7642;
  double t7643;
  double t7644;
  double t7729;
  double t7730;
  double t7740;
  double t7745;
  double t7746;
  double t7747;
  double t7761;
  double t7765;
  double t7766;
  double t7770;
  double t7771;
  double t7779;
  double t7794;
  double t7799;
  double t7800;
  double t7806;
  double t7807;
  double t7811;
  double t7818;
  double t7819;
  double t7820;
  double t7867;
  double t7870;
  double t7873;
  double t7874;
  double t7878;
  double t7881;
  double t7884;
  double t7885;
  double t7894;
  double t7895;
  double t7896;
  double t7901;
  double t7907;
  double t7908;
  double t7913;
  double t7916;
  double t7919;
  double t7921;
  double t7924;
  double t7925;
  double t7941;
  double t7944;
  double t7945;
  double t7956;
  double t7957;
  double t7960;
  double t7670;
  double t7691;
  double t7693;
  double t7826;
  double t7827;
  double t7828;
  double t8003;
  double t8004;
  double t8005;
  double t8015;
  double t8017;
  double t8019;
  double t8021;
  double t8022;
  double t8023;
  double t8029;
  double t8030;
  double t8032;
  double t8038;
  double t8041;
  double t8043;
  double t7992;
  double t7993;
  double t7994;
  double t7999;
  double t8001;
  double t2548;
  double t2549;
  double t2555;
  double t8070;
  double t8073;
  double t8074;
  double t8080;
  double t8084;
  double t8088;
  double t8092;
  double t8095;
  double t8097;
  double t8121;
  double t8124;
  double t8125;
  double t8141;
  double t8142;
  double t8144;
  double t8166;
  double t8167;
  double t8169;
  double t8173;
  double t8174;
  double t8175;
  double t8177;
  double t8180;
  double t8181;
  double t8183;
  double t8184;
  double t8185;
  double t8191;
  double t8192;
  double t8193;
  double t8196;
  double t8197;
  double t8198;
  double t8131;
  double t8132;
  double t8133;
  double t8050;
  double t8051;
  double t8052;
  double t8225;
  double t8226;
  double t8227;
  double t8230;
  double t8231;
  double t8234;
  double t8235;
  double t8236;
  double t8238;
  double t8239;
  double t8240;
  double t8242;
  double t8243;
  double t8244;
  double t8218;
  double t8219;
  double t8221;
  double t8222;
  double t8223;
  double t8258;
  double t8259;
  double t8260;
  double t8263;
  double t8264;
  double t8266;
  double t8267;
  double t8268;
  double t8271;
  double t8272;
  double t8273;
  double t8275;
  double t8276;
  double t8277;
  double t8290;
  double t8291;
  double t8292;
  double t8295;
  double t8296;
  double t8298;
  double t8299;
  double t8300;
  double t8302;
  double t8303;
  double t8304;
  double t8306;
  double t8307;
  double t8308;
  double t8310;
  double t8311;
  double t8312;
  double t8246;
  double t8247;
  double t8248;
  double t8279;
  double t8280;
  double t8281;
  double t8386;
  double t8387;
  double t8392;
  double t8393;
  double t8394;
  double t8401;
  double t8403;
  double t8368;
  double t8369;
  double t8371;
  double t8379;
  double t8380;
  double t8419;
  double t8420;
  double t8422;
  double t8423;
  double t8424;
  double t8426;
  double t8427;
  double t8441;
  double t8442;
  double t8444;
  double t8445;
  double t8446;
  double t8448;
  double t8449;
  double t8451;
  double t8452;
  double t8453;
  double t8405;
  double t8406;
  double t8407;
  double t8429;
  double t8430;
  double t8431;
  double t8480;
  double t8481;
  double t8473;
  double t8474;
  double t8476;
  double t8477;
  double t8478;
  double t8504;
  double t8506;
  double t3687;
  double t8534;
  double t8536;
  double t8540;
  double t8541;
  double t8542;
  double t8484;
  double t8485;
  double t8486;
  double t8511;
  double t8513;
  double t8489;
  double t8563;
  double t8564;
  double t8565;
  double t8567;
  double t8574;
  double t3677;
  double t3698;
  double t8519;
  double t8545;
  double t8620;
  double t8621;
  double t8576;
  double t8577;
  t699 = Cos(var1[3]);
  t172 = Cos(var1[6]);
  t345 = Cos(var1[5]);
  t415 = Sin(var1[3]);
  t541 = -1.*t345*t415;
  t735 = Sin(var1[4]);
  t738 = Sin(var1[5]);
  t740 = -1.*t699*t735*t738;
  t750 = t541 + t740;
  t851 = Cos(var1[4]);
  t906 = Sin(var1[6]);
  t1016 = Cos(var1[7]);
  t1038 = -1.*t1016;
  t1073 = 1. + t1038;
  t1189 = Sin(var1[7]);
  t914 = t172*t750;
  t920 = -1.*t699*t851*t906;
  t986 = t914 + t920;
  t1263 = t699*t345*t735;
  t1264 = -1.*t415*t738;
  t1293 = t1263 + t1264;
  t1512 = Cos(var1[8]);
  t1523 = -1.*t1512;
  t1537 = 1. + t1523;
  t1564 = Sin(var1[8]);
  t1419 = t1016*t1293;
  t1471 = t986*t1189;
  t1491 = t1419 + t1471;
  t1615 = -1.*t699*t851*t172;
  t1624 = -1.*t750*t906;
  t1666 = t1615 + t1624;
  t1753 = Cos(var1[9]);
  t1765 = -1.*t1753;
  t1774 = 1. + t1765;
  t1814 = Sin(var1[9]);
  t1833 = t1512*t1491;
  t1840 = t1666*t1564;
  t1862 = t1833 + t1840;
  t1944 = t1512*t1666;
  t1968 = -1.*t1491*t1564;
  t2023 = t1944 + t1968;
  t2068 = Cos(var1[10]);
  t2072 = -1.*t2068;
  t2074 = 1. + t2072;
  t2087 = Sin(var1[10]);
  t2096 = -1.*t1814*t1862;
  t2156 = t1753*t2023;
  t2165 = t2096 + t2156;
  t2185 = t1753*t1862;
  t2189 = t1814*t2023;
  t2190 = t2185 + t2189;
  t2195 = Cos(var1[11]);
  t2198 = -1.*t2195;
  t2219 = 1. + t2198;
  t2246 = Sin(var1[11]);
  t2288 = t2087*t2165;
  t2296 = t2068*t2190;
  t2298 = t2288 + t2296;
  t2339 = t2068*t2165;
  t2343 = -1.*t2087*t2190;
  t2349 = t2339 + t2343;
  t195 = -1.*t172;
  t343 = 1. + t195;
  t2404 = t699*t345;
  t2405 = -1.*t415*t735*t738;
  t2408 = t2404 + t2405;
  t1132 = 0.135*t1073;
  t1231 = 0.049*t1189;
  t1233 = t1132 + t1231;
  t1294 = -0.049*t1073;
  t1343 = 0.135*t1189;
  t1345 = t1294 + t1343;
  t2500 = t172*t2408;
  t2510 = -1.*t851*t415*t906;
  t2520 = t2500 + t2510;
  t2528 = t345*t415*t735;
  t2531 = t699*t738;
  t2534 = t2528 + t2531;
  t1551 = -0.049*t1537;
  t1575 = -0.09*t1564;
  t1602 = t1551 + t1575;
  t1701 = -0.09*t1537;
  t1726 = 0.049*t1564;
  t1727 = t1701 + t1726;
  t1784 = -0.049*t1774;
  t1817 = -0.21*t1814;
  t1828 = t1784 + t1817;
  t2565 = t1016*t2534;
  t2574 = t2520*t1189;
  t2582 = t2565 + t2574;
  t2586 = -1.*t851*t172*t415;
  t2595 = -1.*t2408*t906;
  t2610 = t2586 + t2595;
  t1904 = -0.21*t1774;
  t1912 = 0.049*t1814;
  t1927 = t1904 + t1912;
  t2085 = -0.27068*t2074;
  t2089 = 0.00159*t2087;
  t2092 = t2085 + t2089;
  t2681 = t1512*t2582;
  t2689 = t2610*t1564;
  t2709 = t2681 + t2689;
  t2750 = t1512*t2610;
  t2830 = -1.*t2582*t1564;
  t2854 = t2750 + t2830;
  t2176 = -0.00159*t2074;
  t2178 = -0.27068*t2087;
  t2182 = t2176 + t2178;
  t2226 = 0.01841*t2219;
  t2273 = -0.70544*t2246;
  t2283 = t2226 + t2273;
  t2904 = -1.*t1814*t2709;
  t2928 = t1753*t2854;
  t2933 = t2904 + t2928;
  t3144 = t1753*t2709;
  t3187 = t1814*t2854;
  t3253 = t3144 + t3187;
  t2314 = -0.70544*t2219;
  t2322 = -0.01841*t2246;
  t2323 = t2314 + t2322;
  t3311 = t2087*t2933;
  t3313 = t2068*t3253;
  t3361 = t3311 + t3313;
  t3382 = t2068*t2933;
  t3438 = -1.*t2087*t3253;
  t3489 = t3382 + t3438;
  t4426 = t345*t415;
  t4438 = t699*t735*t738;
  t4447 = t4426 + t4438;
  t4578 = t699*t851*t172;
  t4630 = -1.*t4447*t906;
  t4636 = t4578 + t4630;
  t4294 = -1.*t699*t345*t735;
  t4300 = t415*t738;
  t4333 = t4294 + t4300;
  t4412 = t1016*t4333;
  t4511 = t172*t4447;
  t4539 = t699*t851*t906;
  t4549 = t4511 + t4539;
  t4559 = t4549*t1189;
  t4560 = t4412 + t4559;
  t4561 = t1512*t4560;
  t4653 = t4636*t1564;
  t4698 = t4561 + t4653;
  t4725 = t1512*t4636;
  t4764 = -1.*t4560*t1564;
  t4776 = t4725 + t4764;
  t4710 = -1.*t1814*t4698;
  t4790 = t1753*t4776;
  t4796 = t4710 + t4790;
  t4893 = t1753*t4698;
  t4905 = t1814*t4776;
  t4914 = t4893 + t4905;
  t4818 = t2087*t4796;
  t4957 = t2068*t4914;
  t4968 = t4818 + t4957;
  t4975 = t2195*t4968;
  t4976 = t2068*t4796;
  t4988 = -1.*t2087*t4914;
  t4995 = t4976 + t4988;
  t4996 = t2246*t4995;
  t5119 = t4975 + t4996;
  t5121 = -1.*t1016*t4549;
  t5133 = t4333*t1189;
  t5147 = t5121 + t5133;
  t4103 = -1.*t851*t172*t738;
  t4153 = t735*t906;
  t4166 = t4103 + t4153;
  t5229 = t172*t735;
  t5230 = t851*t738*t906;
  t5233 = t5229 + t5230;
  t5203 = t851*t345*t1016;
  t5225 = t4166*t1189;
  t5227 = t5203 + t5225;
  t5228 = t1512*t5227;
  t5234 = t5233*t1564;
  t5252 = t5228 + t5234;
  t5278 = t1512*t5233;
  t5285 = -1.*t5227*t1564;
  t5291 = t5278 + t5285;
  t5267 = -1.*t1814*t5252;
  t5321 = t1753*t5291;
  t5331 = t5267 + t5321;
  t5378 = t1753*t5252;
  t5384 = t1814*t5291;
  t5396 = t5378 + t5384;
  t5155 = Power(t5147,2);
  t5164 = Power(t5119,2);
  t5187 = t5155 + t5164;
  t5188 = 1/Sqrt(t5187);
  t2373 = t2195*t2298;
  t2380 = t2246*t2349;
  t2389 = t2373 + t2380;
  t5590 = -1.*t1016*t2520;
  t5593 = t2534*t1189;
  t5606 = t5590 + t5593;
  t3836 = t2195*t3361;
  t3867 = t2246*t3489;
  t3888 = t3836 + t3867;
  t5638 = Power(t5187,-1.5);
  t5639 = 2.*t5606*t5147;
  t5648 = 2.*t5119*t3888;
  t5658 = t5639 + t5648;
  t4183 = -1.*t1016*t4166;
  t4246 = t851*t345*t1189;
  t4272 = t4183 + t4246;
  t5366 = t2087*t5331;
  t5412 = t2068*t5396;
  t5417 = t5366 + t5412;
  t5422 = t2195*t5417;
  t5423 = t2068*t5331;
  t5427 = -1.*t2087*t5396;
  t5428 = t5423 + t5427;
  t5439 = t2246*t5428;
  t5444 = t5422 + t5439;
  t5697 = -1.*t5606*t5119*t5188;
  t5709 = t5147*t3888*t5188;
  t5717 = t5697 + t5709;
  t5741 = Power(t5717,2);
  t5761 = t4272*t5119*t5188;
  t5779 = -1.*t5147*t5444*t5188;
  t5781 = t5761 + t5779;
  t5794 = Power(t5781,2);
  t5797 = t5741 + t5794;
  t5800 = 1/t5797;
  t5929 = t172*t735*t738;
  t5932 = t851*t906;
  t5934 = t5929 + t5932;
  t6071 = -1.*t345*t1016*t735;
  t6078 = t5934*t1189;
  t6087 = t6071 + t6078;
  t6142 = t851*t172;
  t6150 = -1.*t735*t738*t906;
  t6162 = t6142 + t6150;
  t6218 = t1512*t6087;
  t6270 = t6162*t1564;
  t6278 = t6218 + t6270;
  t6300 = t1512*t6162;
  t6301 = -1.*t6087*t1564;
  t6310 = t6300 + t6301;
  t6318 = -1.*t1814*t6278;
  t6321 = t1753*t6310;
  t6337 = t6318 + t6321;
  t6348 = t1753*t6278;
  t6349 = t1814*t6310;
  t6350 = t6348 + t6349;
  t6364 = t2087*t6337;
  t6386 = t2068*t6350;
  t6387 = t6364 + t6386;
  t6398 = t2068*t6337;
  t6401 = -1.*t2087*t6350;
  t6403 = t6398 + t6401;
  t6517 = -1.*t851*t172*t415*t738;
  t6528 = t415*t735*t906;
  t6529 = t6517 + t6528;
  t6569 = t851*t345*t1016*t415;
  t6571 = t6529*t1189;
  t6574 = t6569 + t6571;
  t6577 = t172*t415*t735;
  t6585 = t851*t415*t738*t906;
  t6590 = t6577 + t6585;
  t6594 = t1512*t6574;
  t6595 = t6590*t1564;
  t6596 = t6594 + t6595;
  t6603 = t1512*t6590;
  t6641 = -1.*t6574*t1564;
  t6649 = t6603 + t6641;
  t6693 = -1.*t1814*t6596;
  t6696 = t1753*t6649;
  t6717 = t6693 + t6696;
  t6725 = t1753*t6596;
  t6729 = t1814*t6649;
  t6732 = t6725 + t6729;
  t6749 = t2087*t6717;
  t6762 = t2068*t6732;
  t6765 = t6749 + t6762;
  t6767 = t2068*t6717;
  t6769 = -1.*t2087*t6732;
  t6771 = t6767 + t6769;
  t6824 = t699*t851*t172*t738;
  t6826 = -1.*t699*t735*t906;
  t6830 = t6824 + t6826;
  t6873 = -1.*t699*t851*t345*t1016;
  t6885 = t6830*t1189;
  t6886 = t6873 + t6885;
  t6889 = -1.*t699*t172*t735;
  t6900 = -1.*t699*t851*t738*t906;
  t6901 = t6889 + t6900;
  t6926 = t1512*t6886;
  t6927 = t6901*t1564;
  t6935 = t6926 + t6927;
  t6957 = t1512*t6901;
  t6958 = -1.*t6886*t1564;
  t6964 = t6957 + t6958;
  t6973 = -1.*t1814*t6935;
  t6974 = t1753*t6964;
  t6975 = t6973 + t6974;
  t6979 = t1753*t6935;
  t6980 = t1814*t6964;
  t6981 = t6979 + t6980;
  t6988 = t2087*t6975;
  t6989 = t2068*t6981;
  t6998 = t6988 + t6989;
  t7003 = t2068*t6975;
  t7007 = -1.*t2087*t6981;
  t7008 = t7003 + t7007;
  t5189 = -1.*t4272*t5119*t5188;
  t5455 = t5147*t5444*t5188;
  t5456 = t5189 + t5455;
  t7020 = t2195*t6998;
  t7021 = t2246*t7008;
  t7022 = t7020 + t7021;
  t6793 = t2195*t6765;
  t6797 = t2246*t6771;
  t6808 = t6793 + t6797;
  t7042 = -1.*t1016*t6830;
  t7051 = -1.*t699*t851*t345*t1189;
  t7055 = t7042 + t7051;
  t7063 = 2.*t7055*t5147;
  t7064 = 2.*t5119*t7022;
  t7067 = t7063 + t7064;
  t6469 = t2195*t6387;
  t6498 = t2246*t6403;
  t6500 = t6469 + t6498;
  t7131 = -1.*t851*t1016*t738;
  t7132 = -1.*t851*t345*t172*t1189;
  t7133 = t7131 + t7132;
  t7140 = t1512*t7133;
  t7141 = t851*t345*t906*t1564;
  t7143 = t7140 + t7141;
  t7145 = t851*t345*t1512*t906;
  t7146 = -1.*t7133*t1564;
  t7148 = t7145 + t7146;
  t7152 = -1.*t1814*t7143;
  t7154 = t1753*t7148;
  t7158 = t7152 + t7154;
  t7162 = t1753*t7143;
  t7163 = t1814*t7148;
  t7171 = t7162 + t7163;
  t7178 = t2087*t7158;
  t7180 = t2068*t7171;
  t7184 = t7178 + t7180;
  t7190 = t2068*t7158;
  t7195 = -1.*t2087*t7171;
  t7198 = t7190 + t7195;
  t7256 = -1.*t345*t415*t735;
  t7259 = -1.*t699*t738;
  t7260 = t7256 + t7259;
  t7293 = t1016*t2408;
  t7294 = t172*t7260*t1189;
  t7295 = t7293 + t7294;
  t7298 = t1512*t7295;
  t7299 = -1.*t7260*t906*t1564;
  t7300 = t7298 + t7299;
  t7306 = -1.*t1512*t7260*t906;
  t7307 = -1.*t7295*t1564;
  t7308 = t7306 + t7307;
  t7310 = -1.*t1814*t7300;
  t7311 = t1753*t7308;
  t7312 = t7310 + t7311;
  t7314 = t1753*t7300;
  t7315 = t1814*t7308;
  t7316 = t7314 + t7315;
  t7318 = t2087*t7312;
  t7319 = t2068*t7316;
  t7320 = t7318 + t7319;
  t7322 = t2068*t7312;
  t7323 = -1.*t2087*t7316;
  t7324 = t7322 + t7323;
  t7344 = t1016*t4447;
  t7345 = t172*t1293*t1189;
  t7346 = t7344 + t7345;
  t7349 = t1512*t7346;
  t7350 = -1.*t1293*t906*t1564;
  t7351 = t7349 + t7350;
  t7353 = -1.*t1512*t1293*t906;
  t7354 = -1.*t7346*t1564;
  t7355 = t7353 + t7354;
  t7357 = -1.*t1814*t7351;
  t7358 = t1753*t7355;
  t7359 = t7357 + t7358;
  t7361 = t1753*t7351;
  t7362 = t1814*t7355;
  t7363 = t7361 + t7362;
  t7365 = t2087*t7359;
  t7366 = t2068*t7363;
  t7367 = t7365 + t7366;
  t7369 = t2068*t7359;
  t7370 = -1.*t2087*t7363;
  t7371 = t7369 + t7370;
  t7377 = t2195*t7367;
  t7391 = t2246*t7371;
  t7407 = t7377 + t7391;
  t7414 = -1.*t172*t1016*t1293;
  t7416 = t4447*t1189;
  t7419 = t7414 + t7416;
  t7420 = 2.*t5147*t7419;
  t7421 = 2.*t7407*t5119;
  t7422 = t7420 + t7421;
  t7330 = t2195*t7320;
  t7331 = t2246*t7324;
  t7332 = t7330 + t7331;
  t7245 = t2195*t7184;
  t7246 = t2246*t7198;
  t7249 = t7245 + t7246;
  t7577 = t851*t172*t738;
  t7578 = -1.*t735*t906;
  t7583 = t7577 + t7578;
  t7590 = t1512*t5233*t1189;
  t7591 = t7583*t1564;
  t7592 = t7590 + t7591;
  t7596 = t1512*t7583;
  t7603 = -1.*t5233*t1189*t1564;
  t7604 = t7596 + t7603;
  t7609 = -1.*t1814*t7592;
  t7614 = t1753*t7604;
  t7616 = t7609 + t7614;
  t7620 = t1753*t7592;
  t7623 = t1814*t7604;
  t7624 = t7620 + t7623;
  t7629 = t2087*t7616;
  t7634 = t2068*t7624;
  t7639 = t7629 + t7634;
  t7642 = t2068*t7616;
  t7643 = -1.*t2087*t7624;
  t7644 = t7642 + t7643;
  t7729 = -1.*t172*t2408;
  t7730 = t851*t415*t906;
  t7740 = t7729 + t7730;
  t7745 = t1512*t2610*t1189;
  t7746 = t7740*t1564;
  t7747 = t7745 + t7746;
  t7761 = t1512*t7740;
  t7765 = -1.*t2610*t1189*t1564;
  t7766 = t7761 + t7765;
  t7770 = -1.*t1814*t7747;
  t7771 = t1753*t7766;
  t7779 = t7770 + t7771;
  t7794 = t1753*t7747;
  t7799 = t1814*t7766;
  t7800 = t7794 + t7799;
  t7806 = t2087*t7779;
  t7807 = t2068*t7800;
  t7811 = t7806 + t7807;
  t7818 = t2068*t7779;
  t7819 = -1.*t2087*t7800;
  t7820 = t7818 + t7819;
  t7867 = -1.*t172*t4447;
  t7870 = t7867 + t920;
  t7873 = t1512*t4636*t1189;
  t7874 = t7870*t1564;
  t7878 = t7873 + t7874;
  t7881 = t1512*t7870;
  t7884 = -1.*t4636*t1189*t1564;
  t7885 = t7881 + t7884;
  t7894 = -1.*t1814*t7878;
  t7895 = t1753*t7885;
  t7896 = t7894 + t7895;
  t7901 = t1753*t7878;
  t7907 = t1814*t7885;
  t7908 = t7901 + t7907;
  t7913 = t2087*t7896;
  t7916 = t2068*t7908;
  t7919 = t7913 + t7916;
  t7921 = t2068*t7896;
  t7924 = -1.*t2087*t7908;
  t7925 = t7921 + t7924;
  t7941 = t2195*t7919;
  t7944 = t2246*t7925;
  t7945 = t7941 + t7944;
  t7956 = -2.*t1016*t4636*t5147;
  t7957 = 2.*t7945*t5119;
  t7960 = t7956 + t7957;
  t7670 = t2195*t7639;
  t7691 = t2246*t7644;
  t7693 = t7670 + t7691;
  t7826 = t2195*t7811;
  t7827 = t2246*t7820;
  t7828 = t7826 + t7827;
  t8003 = t1016*t4166;
  t8004 = -1.*t851*t345*t1189;
  t8005 = t8003 + t8004;
  t8015 = -1.*t1512*t1814*t8005;
  t8017 = -1.*t1753*t8005*t1564;
  t8019 = t8015 + t8017;
  t8021 = t1753*t1512*t8005;
  t8022 = -1.*t1814*t8005*t1564;
  t8023 = t8021 + t8022;
  t8029 = t2087*t8019;
  t8030 = t2068*t8023;
  t8032 = t8029 + t8030;
  t8038 = t2068*t8019;
  t8041 = -1.*t2087*t8023;
  t8043 = t8038 + t8041;
  t7992 = 0.135*t1016;
  t7993 = -0.049*t1189;
  t7994 = t7992 + t7993;
  t7999 = 0.049*t1016;
  t8001 = t7999 + t1343;
  t2548 = t1016*t2520;
  t2549 = -1.*t2534*t1189;
  t2555 = t2548 + t2549;
  t8070 = -1.*t1512*t1814*t2555;
  t8073 = -1.*t1753*t2555*t1564;
  t8074 = t8070 + t8073;
  t8080 = t1753*t1512*t2555;
  t8084 = -1.*t1814*t2555*t1564;
  t8088 = t8080 + t8084;
  t8092 = t2087*t8074;
  t8095 = t2068*t8088;
  t8097 = t8092 + t8095;
  t8121 = t2068*t8074;
  t8124 = -1.*t2087*t8088;
  t8125 = t8121 + t8124;
  t8141 = t1016*t4549;
  t8142 = -1.*t4333*t1189;
  t8144 = t8141 + t8142;
  t8166 = -1.*t1512*t1814*t8144;
  t8167 = -1.*t1753*t8144*t1564;
  t8169 = t8166 + t8167;
  t8173 = t1753*t1512*t8144;
  t8174 = -1.*t1814*t8144*t1564;
  t8175 = t8173 + t8174;
  t8177 = t2087*t8169;
  t8180 = t2068*t8175;
  t8181 = t8177 + t8180;
  t8183 = t2068*t8169;
  t8184 = -1.*t2087*t8175;
  t8185 = t8183 + t8184;
  t8191 = t2195*t8181;
  t8192 = t2246*t8185;
  t8193 = t8191 + t8192;
  t8196 = 2.*t5147*t4560;
  t8197 = 2.*t8193*t5119;
  t8198 = t8196 + t8197;
  t8131 = t2195*t8097;
  t8132 = t2246*t8125;
  t8133 = t8131 + t8132;
  t8050 = t2195*t8032;
  t8051 = t2246*t8043;
  t8052 = t8050 + t8051;
  t8225 = -1.*t1512*t5227;
  t8226 = -1.*t5233*t1564;
  t8227 = t8225 + t8226;
  t8230 = t1814*t8227;
  t8231 = t8230 + t5321;
  t8234 = t1753*t8227;
  t8235 = -1.*t1814*t5291;
  t8236 = t8234 + t8235;
  t8238 = -1.*t2087*t8231;
  t8239 = t2068*t8236;
  t8240 = t8238 + t8239;
  t8242 = t2068*t8231;
  t8243 = t2087*t8236;
  t8244 = t8242 + t8243;
  t8218 = 0.049*t1512;
  t8219 = t8218 + t1575;
  t8221 = -0.09*t1512;
  t8222 = -0.049*t1564;
  t8223 = t8221 + t8222;
  t8258 = -1.*t1512*t2582;
  t8259 = -1.*t2610*t1564;
  t8260 = t8258 + t8259;
  t8263 = t1814*t8260;
  t8264 = t8263 + t2928;
  t8266 = t1753*t8260;
  t8267 = -1.*t1814*t2854;
  t8268 = t8266 + t8267;
  t8271 = -1.*t2087*t8264;
  t8272 = t2068*t8268;
  t8273 = t8271 + t8272;
  t8275 = t2068*t8264;
  t8276 = t2087*t8268;
  t8277 = t8275 + t8276;
  t8290 = -1.*t1512*t4560;
  t8291 = -1.*t4636*t1564;
  t8292 = t8290 + t8291;
  t8295 = t1814*t8292;
  t8296 = t8295 + t4790;
  t8298 = t1753*t8292;
  t8299 = -1.*t1814*t4776;
  t8300 = t8298 + t8299;
  t8302 = -1.*t2087*t8296;
  t8303 = t2068*t8300;
  t8304 = t8302 + t8303;
  t8306 = t2068*t8296;
  t8307 = t2087*t8300;
  t8308 = t8306 + t8307;
  t8310 = t2246*t8304;
  t8311 = t2195*t8308;
  t8312 = t8310 + t8311;
  t8246 = t2246*t8240;
  t8247 = t2195*t8244;
  t8248 = t8246 + t8247;
  t8279 = t2246*t8273;
  t8280 = t2195*t8277;
  t8281 = t8279 + t8280;
  t8386 = -1.*t1753*t5252;
  t8387 = t8386 + t8235;
  t8392 = -1.*t2087*t5331;
  t8393 = t2068*t8387;
  t8394 = t8392 + t8393;
  t8401 = t2087*t8387;
  t8403 = t5423 + t8401;
  t8368 = -0.21*t1753;
  t8369 = -0.049*t1814;
  t8371 = t8368 + t8369;
  t8379 = 0.049*t1753;
  t8380 = t8379 + t1817;
  t8419 = -1.*t1753*t2709;
  t8420 = t8419 + t8267;
  t8422 = -1.*t2087*t2933;
  t8423 = t2068*t8420;
  t8424 = t8422 + t8423;
  t8426 = t2087*t8420;
  t8427 = t3382 + t8426;
  t8441 = -1.*t1753*t4698;
  t8442 = t8441 + t8299;
  t8444 = -1.*t2087*t4796;
  t8445 = t2068*t8442;
  t8446 = t8444 + t8445;
  t8448 = t2087*t8442;
  t8449 = t4976 + t8448;
  t8451 = t2246*t8446;
  t8452 = t2195*t8449;
  t8453 = t8451 + t8452;
  t8405 = t2246*t8394;
  t8406 = t2195*t8403;
  t8407 = t8405 + t8406;
  t8429 = t2246*t8424;
  t8430 = t2195*t8427;
  t8431 = t8429 + t8430;
  t8480 = -1.*t2068*t5396;
  t8481 = t8392 + t8480;
  t8473 = 0.00159*t2068;
  t8474 = t8473 + t2178;
  t8476 = -0.27068*t2068;
  t8477 = -0.00159*t2087;
  t8478 = t8476 + t8477;
  t8504 = -1.*t2068*t3253;
  t8506 = t8422 + t8504;
  t3687 = t2195*t3489;
  t8534 = -1.*t2068*t4914;
  t8536 = t8444 + t8534;
  t8540 = t2246*t8536;
  t8541 = t2195*t4995;
  t8542 = t8540 + t8541;
  t8484 = t2246*t8481;
  t8485 = t2195*t5428;
  t8486 = t8484 + t8485;
  t8511 = t2246*t8506;
  t8513 = t8511 + t3687;
  t8489 = -1.*t2246*t5428;
  t8563 = -0.70544*t2195;
  t8564 = 0.01841*t2246;
  t8565 = t8563 + t8564;
  t8567 = -0.01841*t2195;
  t8574 = t8567 + t2273;
  t3677 = -1.*t2246*t3361;
  t3698 = t3677 + t3687;
  t8519 = -1.*t2246*t3489;
  t8545 = -1.*t2246*t4995;
  t8620 = -1.*t2246*t4968;
  t8621 = t8620 + t8541;
  t8576 = -1.*t2246*t5417;
  t8577 = t8576 + t8485;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=1.;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=1.;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=t1293*t1345 + t1491*t1602 + t1666*t1727 + t1828*t1862 + t1927*t2023 + t2092*t2165 + t2182*t2190 + t2283*t2298 + t2323*t2349 - 1.11344*(-1.*t2246*t2298 + t2195*t2349) - 0.02159*t2389 + 0.135*t343*t750 + 0.135*t699*t851*t906 + t1233*t986 + 0.1305*(-1.*t1189*t1293 + t1016*t986);
  p_output1[14]=t1233*t2520 + t1345*t2534 + 0.1305*t2555 + t1602*t2582 + t1727*t2610 + t1828*t2709 + t1927*t2854 + t2092*t2933 + t2182*t3253 + t2283*t3361 + 0.135*t2408*t343 + t2323*t3489 - 1.11344*t3698 - 0.02159*t3888 + 0.135*t415*t851*t906;
  p_output1[15]=(t3888*t4272*t5188 - 1.*t5188*t5444*t5606 - 0.5*t4272*t5119*t5638*t5658 + 0.5*t5147*t5444*t5638*t5658)*t5717*t5800 + t5456*t5800*(t2389*t5147*t5188 - 0.5*t3888*t5147*t5638*t5658 + 0.5*t5119*t5606*t5638*t5658 - 1.*t5119*t5188*(t1189*t1293 - 1.*t1016*t986));
  p_output1[16]=t1233*t5934 + t1602*t6087 + t1727*t6162 + t1828*t6278 + t1927*t6310 + t2092*t6337 + t2182*t6350 + t2283*t6387 + t2323*t6403 - 1.11344*(-1.*t2246*t6387 + t2195*t6403) - 0.02159*t6500 - 1.*t1345*t345*t735 + 0.1305*(t1016*t5934 + t1189*t345*t735) + 0.135*t343*t735*t738 - 0.135*t851*t906;
  p_output1[17]=t1233*t6529 + t1602*t6574 + t1727*t6590 + t1828*t6596 + t1927*t6649 + t2092*t6717 + t2182*t6732 + t2283*t6765 + t2323*t6771 - 1.11344*(-1.*t2246*t6765 + t2195*t6771) - 0.02159*t6808 + t1345*t345*t415*t851 - 0.135*t343*t415*t738*t851 + 0.1305*(t1016*t6529 - 1.*t1189*t345*t415*t851) - 0.135*t415*t735*t906;
  p_output1[18]=t1233*t6830 + t1602*t6886 + t1727*t6901 + t1828*t6935 + t1927*t6964 + t2092*t6975 + t2182*t6981 + t2283*t6998 + t2323*t7008 - 1.11344*(-1.*t2246*t6998 + t2195*t7008) - 0.02159*t7022 - 1.*t1345*t345*t699*t851 + 0.135*t343*t699*t738*t851 + 0.1305*(t1016*t6830 + t1189*t345*t699*t851) + 0.135*t699*t735*t906;
  p_output1[19]=t5717*t5800*(-1.*t5147*t5188*t6500 + t4272*t5188*t7022 - 1.*t5188*t5444*t7055 - 0.5*t4272*t5119*t5638*t7067 + 0.5*t5147*t5444*t5638*t7067 + t5119*t5188*(-1.*t1016*t5934 - 1.*t1189*t345*t735)) + t5456*t5800*(t5147*t5188*t6808 - 1.*t5188*t5606*t7022 + t3888*t5188*t7055 - 0.5*t3888*t5147*t5638*t7067 + 0.5*t5119*t5606*t5638*t7067 - 1.*t5119*t5188*(-1.*t1016*t6529 + t1189*t345*t415*t851));
  p_output1[20]=t1602*t7133 + t1828*t7143 + t1927*t7148 + t2092*t7158 + t2182*t7171 + t2283*t7184 + t2323*t7198 - 1.11344*(-1.*t2246*t7184 + t2195*t7198) - 0.02159*t7249 - 1.*t1233*t172*t345*t851 - 0.135*t343*t345*t851 - 1.*t1345*t738*t851 + 0.1305*(-1.*t1016*t172*t345*t851 + t1189*t738*t851) + t1727*t345*t851*t906;
  p_output1[21]=t1345*t2408 + t1233*t172*t7260 + 0.135*t343*t7260 + 0.1305*(-1.*t1189*t2408 + t1016*t172*t7260) + t1602*t7295 + t1828*t7300 + t1927*t7308 + t2092*t7312 + t2182*t7316 + t2283*t7320 + t2323*t7324 - 1.11344*(-1.*t2246*t7320 + t2195*t7324) - 0.02159*t7332 - 1.*t1727*t7260*t906;
  p_output1[22]=t1233*t1293*t172 + 0.135*t1293*t343 + t1345*t4447 + 0.1305*(t1016*t1293*t172 - 1.*t1189*t4447) + t1602*t7346 + t1828*t7351 + t1927*t7355 + t2092*t7359 + t2182*t7363 + t2283*t7367 + t2323*t7371 - 1.11344*(-1.*t2246*t7367 + t2195*t7371) - 0.02159*t7407 - 1.*t1293*t1727*t906;
  p_output1[23]=t5456*t5800*(-1.*t5119*t5188*(t1189*t2408 - 1.*t1016*t172*t7260) + t5147*t5188*t7332 - 1.*t5188*t5606*t7407 + t3888*t5188*t7419 - 0.5*t3888*t5147*t5638*t7422 + 0.5*t5119*t5606*t5638*t7422) + t5717*t5800*(-1.*t5147*t5188*t7249 + t4272*t5188*t7407 - 1.*t5188*t5444*t7419 - 0.5*t4272*t5119*t5638*t7422 + 0.5*t5147*t5444*t5638*t7422 + t5119*t5188*(t1016*t172*t345*t851 - 1.*t1189*t738*t851));
  p_output1[24]=0.1305*t1016*t5233 + t1233*t5233 + t1189*t1602*t5233 - 0.135*t172*t735 + t1727*t7583 + t1828*t7592 + t1927*t7604 + t2092*t7616 + t2182*t7624 + t2283*t7639 + t2323*t7644 - 1.11344*(-1.*t2246*t7639 + t2195*t7644) - 0.02159*t7693 - 0.135*t738*t851*t906;
  p_output1[25]=0.1305*t1016*t2610 + t1233*t2610 + t1189*t1602*t2610 + t1727*t7740 + t1828*t7747 + t1927*t7766 + t2092*t7779 + t2182*t7800 + t2283*t7811 + t2323*t7820 - 1.11344*(-1.*t2246*t7811 + t2195*t7820) - 0.02159*t7828 + 0.135*t172*t415*t851 + 0.135*t2408*t906;
  p_output1[26]=0.1305*t1016*t4636 + t1233*t4636 + t1189*t1602*t4636 + t1727*t7870 + t1828*t7878 + t1927*t7885 + t2092*t7896 + t2182*t7908 + t2283*t7919 + t2323*t7925 - 1.11344*(-1.*t2246*t7919 + t2195*t7925) - 0.02159*t7945 - 0.135*t172*t699*t851 + 0.135*t4447*t906;
  p_output1[27]=t5717*t5800*(-1.*t1016*t5119*t5188*t5233 + t1016*t4636*t5188*t5444 - 1.*t5147*t5188*t7693 + t4272*t5188*t7945 - 0.5*t4272*t5119*t5638*t7960 + 0.5*t5147*t5444*t5638*t7960) + t5456*t5800*(-1.*t1016*t3888*t4636*t5188 + t1016*t2610*t5119*t5188 + t5147*t5188*t7828 - 1.*t5188*t5606*t7945 - 0.5*t3888*t5147*t5638*t7960 + 0.5*t5119*t5606*t5638*t7960);
  p_output1[28]=t4166*t8001 + t1602*t8005 + t1512*t1828*t8005 - 1.*t1564*t1927*t8005 + t2092*t8019 + t2182*t8023 + t2283*t8032 + t2323*t8043 - 1.11344*(-1.*t2246*t8032 + t2195*t8043) - 0.02159*t8052 + t345*t7994*t851 + 0.1305*(-1.*t1189*t4166 - 1.*t1016*t345*t851);
  p_output1[29]=0.1305*(-1.*t1189*t2520 - 1.*t1016*t2534) + t1602*t2555 + t1512*t1828*t2555 - 1.*t1564*t1927*t2555 + t2534*t7994 + t2520*t8001 + t2092*t8074 + t2182*t8088 + t2283*t8097 + t2323*t8125 - 1.11344*(-1.*t2246*t8097 + t2195*t8125) - 0.02159*t8133;
  p_output1[30]=0.1305*(-1.*t1016*t4333 - 1.*t1189*t4549) + t4333*t7994 + t4549*t8001 + t1602*t8144 + t1512*t1828*t8144 - 1.*t1564*t1927*t8144 + t2092*t8169 + t2182*t8175 + t2283*t8181 + t2323*t8185 - 1.11344*(-1.*t2246*t8181 + t2195*t8185) - 0.02159*t8193;
  p_output1[31]=t5717*t5800*(t5119*t5188*t5227 - 1.*t4560*t5188*t5444 - 1.*t5147*t5188*t8052 + t4272*t5188*t8193 - 0.5*t4272*t5119*t5638*t8198 + 0.5*t5147*t5444*t5638*t8198) + t5456*t5800*(t3888*t4560*t5188 - 1.*t2582*t5119*t5188 + t5147*t5188*t8133 - 1.*t5188*t5606*t8193 - 0.5*t3888*t5147*t5638*t8198 + 0.5*t5119*t5606*t5638*t8198);
  p_output1[32]=t1828*t5291 + t5233*t8219 + t5227*t8223 + t1927*t8227 + t2182*t8231 + t2092*t8236 + t2323*t8240 + t2283*t8244 - 1.11344*(t2195*t8240 - 1.*t2246*t8244) - 0.02159*t8248;
  p_output1[33]=t1828*t2854 + t2610*t8219 + t2582*t8223 + t1927*t8260 + t2182*t8264 + t2092*t8268 + t2323*t8273 + t2283*t8277 - 1.11344*(t2195*t8273 - 1.*t2246*t8277) - 0.02159*t8281;
  p_output1[34]=t1828*t4776 + t4636*t8219 + t4560*t8223 + t1927*t8292 + t2182*t8296 + t2092*t8300 + t2323*t8304 + t2283*t8308 - 1.11344*(t2195*t8304 - 1.*t2246*t8308) - 0.02159*t8312;
  p_output1[35]=t5717*t5800*(-1.*t5147*t5188*t8248 + t4272*t5188*t8312 - 1.*t4272*t5164*t5638*t8312 + t5119*t5147*t5444*t5638*t8312) + t5456*t5800*(t5147*t5188*t8281 - 1.*t5188*t5606*t8312 - 1.*t3888*t5119*t5147*t5638*t8312 + t5164*t5606*t5638*t8312);
  p_output1[36]=t2182*t5331 + t5252*t8371 + t5291*t8380 + t2092*t8387 + t2323*t8394 + t2283*t8403 - 1.11344*(t2195*t8394 - 1.*t2246*t8403) - 0.02159*t8407;
  p_output1[37]=t2182*t2933 + t2709*t8371 + t2854*t8380 + t2092*t8420 + t2323*t8424 + t2283*t8427 - 1.11344*(t2195*t8424 - 1.*t2246*t8427) - 0.02159*t8431;
  p_output1[38]=t2182*t4796 + t4698*t8371 + t4776*t8380 + t2092*t8442 + t2323*t8446 + t2283*t8449 - 1.11344*(t2195*t8446 - 1.*t2246*t8449) - 0.02159*t8453;
  p_output1[39]=t5717*t5800*(-1.*t5147*t5188*t8407 + t4272*t5188*t8453 - 1.*t4272*t5164*t5638*t8453 + t5119*t5147*t5444*t5638*t8453) + t5456*t5800*(t5147*t5188*t8431 - 1.*t5188*t5606*t8453 - 1.*t3888*t5119*t5147*t5638*t8453 + t5164*t5606*t5638*t8453);
  p_output1[40]=t2283*t5428 + t5331*t8474 + t5396*t8478 + t2323*t8481 - 0.02159*t8486 - 1.11344*(t2195*t8481 + t8489);
  p_output1[41]=t2283*t3489 + t2933*t8474 + t3253*t8478 + t2323*t8506 - 0.02159*t8513 - 1.11344*(t2195*t8506 + t8519);
  p_output1[42]=t2283*t4995 + t4796*t8474 + t4914*t8478 + t2323*t8536 - 0.02159*t8542 - 1.11344*(t2195*t8536 + t8545);
  p_output1[43]=t5717*t5800*(-1.*t5147*t5188*t8486 + t4272*t5188*t8542 - 1.*t4272*t5164*t5638*t8542 + t5119*t5147*t5444*t5638*t8542) + t5456*t5800*(t5147*t5188*t8513 - 1.*t5188*t5606*t8542 - 1.*t3888*t5119*t5147*t5638*t8542 + t5164*t5606*t5638*t8542);
  p_output1[44]=-1.11344*(-1.*t2195*t5417 + t8489) + t5417*t8565 + t5428*t8574 - 0.02159*t8577;
  p_output1[45]=-0.02159*t3698 - 1.11344*(-1.*t2195*t3361 + t8519) + t3361*t8565 + t3489*t8574;
  p_output1[46]=-1.11344*(-1.*t2195*t4968 + t8545) + t4968*t8565 + t4995*t8574 - 0.02159*t8621;
  p_output1[47]=t5717*t5800*(-1.*t5147*t5188*t8577 + t4272*t5188*t8621 - 1.*t4272*t5164*t5638*t8621 + t5119*t5147*t5444*t5638*t8621) + t5456*t5800*(t3698*t5147*t5188 - 1.*t5188*t5606*t8621 - 1.*t3888*t5119*t5147*t5638*t8621 + t5164*t5606*t5638*t8621);
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 4, (mwSize) 22, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void J_leftPoint_constraint_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




